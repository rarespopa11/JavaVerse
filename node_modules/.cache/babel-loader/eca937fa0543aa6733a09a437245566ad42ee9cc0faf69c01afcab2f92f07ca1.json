{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\AvatarManager.js\",\n  _s = $RefreshSig$();\n// src/components/AvatarManager.js\nimport React, { useState, useRef } from 'react';\nimport '../styles/AvatarManager.css';\nimport { useToast } from './ToastProvider';\n\n/**\r\n * Componentă pentru gestionarea avatar-ului utilizatorului\r\n * Permite alegerea unui avatar preset sau upload-ul unei imagini custom\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AvatarManager({\n  currentAvatar,\n  currentAvatarType,\n  onAvatarChange,\n  onClose\n}) {\n  _s();\n  const [selectedPreset, setSelectedPreset] = useState(currentAvatarType === 'preset' ? currentAvatar : null);\n  const [customImage, setCustomImage] = useState(null);\n  const [previewUrl, setPreviewUrl] = useState(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const fileInputRef = useRef(null);\n  const toast = useToast();\n\n  // Avatar-uri preset disponibile\n  const presetAvatars = [{\n    id: 'dev1',\n    name: 'Developer 1',\n    emoji: '👨‍💻'\n  }, {\n    id: 'dev2',\n    name: 'Developer 2',\n    emoji: '👩‍💻'\n  }, {\n    id: 'student1',\n    name: 'Student 1',\n    emoji: '🧑‍🎓'\n  }, {\n    id: 'student2',\n    name: 'Student 2',\n    emoji: '👩‍🎓'\n  }, {\n    id: 'prof1',\n    name: 'Professor 1',\n    emoji: '👨‍🏫'\n  }, {\n    id: 'prof2',\n    name: 'Professor 2',\n    emoji: '👩‍🏫'\n  }, {\n    id: 'ninja',\n    name: 'Code Ninja',\n    emoji: '🥷'\n  }, {\n    id: 'wizard',\n    name: 'Code Wizard',\n    emoji: '🧙‍♂️'\n  }, {\n    id: 'robot',\n    name: 'Robot',\n    emoji: '🤖'\n  }, {\n    id: 'alien',\n    name: 'Alien Coder',\n    emoji: '👽'\n  }, {\n    id: 'pirate',\n    name: 'Code Pirate',\n    emoji: '🏴‍☠️'\n  }, {\n    id: 'astronaut',\n    name: 'Space Coder',\n    emoji: '👨‍🚀'\n  }];\n\n  // Gestionează selecția unui avatar preset\n  const handlePresetSelect = presetId => {\n    setSelectedPreset(presetId);\n    setCustomImage(null);\n    setPreviewUrl(null);\n  };\n\n  // Gestionează alegerea unei imagini custom\n  const handleImageSelect = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    // Validări pentru fișierul ales\n    if (!file.type.startsWith('image/')) {\n      toast.error('Te rugăm să alegi un fișier imagine valid.');\n      return;\n    }\n    if (file.size > 5 * 1024 * 1024) {\n      // 5MB limit\n      toast.error('Imaginea este prea mare. Dimensiunea maximă permisă este 5MB.');\n      return;\n    }\n    setCustomImage(file);\n    setSelectedPreset(null);\n\n    // Creăm preview pentru imagine\n    const reader = new FileReader();\n    reader.onload = e => {\n      setPreviewUrl(e.target.result);\n    };\n    reader.readAsDataURL(file);\n  };\n\n  // Salvează avatar-ul ales\n  const handleSaveAvatar = async () => {\n    if (!selectedPreset && !customImage) {\n      toast.warning('Te rugăm să alegi un avatar.');\n      return;\n    }\n    setIsUploading(true);\n    try {\n      let avatarData = {\n        avatarType: selectedPreset ? 'preset' : 'custom',\n        avatar: selectedPreset || null\n      };\n\n      // Dacă e imagine custom, o convertim în base64 pentru simplitate\n      // În producție, ai folosi un serviciu de upload precum AWS S3\n      if (customImage) {\n        const reader = new FileReader();\n        reader.onload = async e => {\n          avatarData.avatar = e.target.result;\n          await updateAvatar(avatarData);\n        };\n        reader.readAsDataURL(customImage);\n      } else {\n        await updateAvatar(avatarData);\n      }\n    } catch (error) {\n      console.error('Error saving avatar:', error);\n      toast.error('Eroare la salvarea avatar-ului. Te rugăm să încerci din nou.');\n      setIsUploading(false);\n    }\n  };\n\n  // Funcție pentru actualizarea avatar-ului pe server\n  const updateAvatar = async avatarData => {\n    try {\n      const userId = sessionStorage.getItem('userId');\n      const authToken = sessionStorage.getItem('authToken');\n      const response = await fetch(`http://localhost:5000/api/users/${userId}/avatar`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify(avatarData)\n      });\n      const data = await response.json();\n      if (data.success) {\n        toast.success('Avatar actualizat cu succes!');\n        onAvatarChange(avatarData.avatar, avatarData.avatarType);\n        onClose();\n      } else {\n        throw new Error(data.message || 'Eroare la actualizarea avatar-ului');\n      }\n    } catch (error) {\n      console.error('Error updating avatar:', error);\n      toast.error('Eroare la comunicarea cu serverul.');\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"avatar-manager\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"avatar-manager-overlay\",\n      onClick: onClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"avatar-manager-modal\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-manager-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Alege Avatar-ul T\\u0103u\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: onClose,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-manager-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Avatar-uri Predefinite\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"preset-avatars-grid\",\n            children: presetAvatars.map(preset => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `preset-avatar ${selectedPreset === preset.id ? 'selected' : ''}`,\n              onClick: () => handlePresetSelect(preset.id),\n              title: preset.name,\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"preset-emoji\",\n                children: preset.emoji\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"preset-name\",\n                children: preset.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 19\n              }, this)]\n            }, preset.id, true, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 147,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar-divider\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"SAU\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"avatar-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"\\xCEncarc\\u0103 Imagine Proprie\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"custom-avatar-section\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              ref: fileInputRef,\n              onChange: handleImageSelect,\n              accept: \"image/*\",\n              style: {\n                display: 'none'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"custom-avatar-preview\",\n              children: previewUrl ? /*#__PURE__*/_jsxDEV(\"img\", {\n                src: previewUrl,\n                alt: \"Preview\",\n                className: \"custom-preview-img\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 19\n              }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"custom-placeholder\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"\\uD83D\\uDCF7\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 184,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: \"F\\u0103r\\u0103 imagine\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 185,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 183,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"upload-btn\",\n              onClick: () => {\n                var _fileInputRef$current;\n                return (_fileInputRef$current = fileInputRef.current) === null || _fileInputRef$current === void 0 ? void 0 : _fileInputRef$current.click();\n              },\n              disabled: isUploading,\n              children: previewUrl ? 'Schimbă Imaginea' : 'Alege Imagine'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"upload-hint\",\n              children: \"Formateuri acceptate: JPG, PNG, GIF (max 5MB)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"avatar-manager-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"cancel-btn\",\n          onClick: onClose,\n          disabled: isUploading,\n          children: \"Anuleaz\\u0103\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"save-btn\",\n          onClick: handleSaveAvatar,\n          disabled: isUploading || !selectedPreset && !customImage,\n          children: isUploading ? 'Se salvează...' : 'Salvează Avatar'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n}\n_s(AvatarManager, \"c2SV98AMT4Hu9k/KkWeeF0Mseq4=\", false, function () {\n  return [useToast];\n});\n_c = AvatarManager;\nexport default AvatarManager;\nvar _c;\n$RefreshReg$(_c, \"AvatarManager\");","map":{"version":3,"names":["React","useState","useRef","useToast","jsxDEV","_jsxDEV","AvatarManager","currentAvatar","currentAvatarType","onAvatarChange","onClose","_s","selectedPreset","setSelectedPreset","customImage","setCustomImage","previewUrl","setPreviewUrl","isUploading","setIsUploading","fileInputRef","toast","presetAvatars","id","name","emoji","handlePresetSelect","presetId","handleImageSelect","event","file","target","files","type","startsWith","error","size","reader","FileReader","onload","e","result","readAsDataURL","handleSaveAvatar","warning","avatarData","avatarType","avatar","updateAvatar","console","userId","sessionStorage","getItem","authToken","response","fetch","method","headers","body","JSON","stringify","data","json","success","Error","message","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","map","preset","title","ref","onChange","accept","style","display","src","alt","_fileInputRef$current","current","click","disabled","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/AvatarManager.js"],"sourcesContent":["// src/components/AvatarManager.js\r\nimport React, { useState, useRef } from 'react';\r\nimport '../styles/AvatarManager.css';\r\nimport { useToast } from './ToastProvider';\r\n\r\n/**\r\n * Componentă pentru gestionarea avatar-ului utilizatorului\r\n * Permite alegerea unui avatar preset sau upload-ul unei imagini custom\r\n */\r\nfunction AvatarManager({ currentAvatar, currentAvatarType, onAvatarChange, onClose }) {\r\n  const [selectedPreset, setSelectedPreset] = useState(currentAvatarType === 'preset' ? currentAvatar : null);\r\n  const [customImage, setCustomImage] = useState(null);\r\n  const [previewUrl, setPreviewUrl] = useState(null);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const fileInputRef = useRef(null);\r\n  const toast = useToast();\r\n\r\n  // Avatar-uri preset disponibile\r\n  const presetAvatars = [\r\n    { id: 'dev1', name: 'Developer 1', emoji: '👨‍💻' },\r\n    { id: 'dev2', name: 'Developer 2', emoji: '👩‍💻' },\r\n    { id: 'student1', name: 'Student 1', emoji: '🧑‍🎓' },\r\n    { id: 'student2', name: 'Student 2', emoji: '👩‍🎓' },\r\n    { id: 'prof1', name: 'Professor 1', emoji: '👨‍🏫' },\r\n    { id: 'prof2', name: 'Professor 2', emoji: '👩‍🏫' },\r\n    { id: 'ninja', name: 'Code Ninja', emoji: '🥷' },\r\n    { id: 'wizard', name: 'Code Wizard', emoji: '🧙‍♂️' },\r\n    { id: 'robot', name: 'Robot', emoji: '🤖' },\r\n    { id: 'alien', name: 'Alien Coder', emoji: '👽' },\r\n    { id: 'pirate', name: 'Code Pirate', emoji: '🏴‍☠️' },\r\n    { id: 'astronaut', name: 'Space Coder', emoji: '👨‍🚀' }\r\n  ];\r\n\r\n  // Gestionează selecția unui avatar preset\r\n  const handlePresetSelect = (presetId) => {\r\n    setSelectedPreset(presetId);\r\n    setCustomImage(null);\r\n    setPreviewUrl(null);\r\n  };\r\n\r\n  // Gestionează alegerea unei imagini custom\r\n  const handleImageSelect = (event) => {\r\n    const file = event.target.files[0];\r\n    if (!file) return;\r\n\r\n    // Validări pentru fișierul ales\r\n    if (!file.type.startsWith('image/')) {\r\n      toast.error('Te rugăm să alegi un fișier imagine valid.');\r\n      return;\r\n    }\r\n\r\n    if (file.size > 5 * 1024 * 1024) { // 5MB limit\r\n      toast.error('Imaginea este prea mare. Dimensiunea maximă permisă este 5MB.');\r\n      return;\r\n    }\r\n\r\n    setCustomImage(file);\r\n    setSelectedPreset(null);\r\n\r\n    // Creăm preview pentru imagine\r\n    const reader = new FileReader();\r\n    reader.onload = (e) => {\r\n      setPreviewUrl(e.target.result);\r\n    };\r\n    reader.readAsDataURL(file);\r\n  };\r\n\r\n  // Salvează avatar-ul ales\r\n  const handleSaveAvatar = async () => {\r\n    if (!selectedPreset && !customImage) {\r\n      toast.warning('Te rugăm să alegi un avatar.');\r\n      return;\r\n    }\r\n\r\n    setIsUploading(true);\r\n\r\n    try {\r\n      let avatarData = {\r\n        avatarType: selectedPreset ? 'preset' : 'custom',\r\n        avatar: selectedPreset || null\r\n      };\r\n\r\n      // Dacă e imagine custom, o convertim în base64 pentru simplitate\r\n      // În producție, ai folosi un serviciu de upload precum AWS S3\r\n      if (customImage) {\r\n        const reader = new FileReader();\r\n        reader.onload = async (e) => {\r\n          avatarData.avatar = e.target.result;\r\n          await updateAvatar(avatarData);\r\n        };\r\n        reader.readAsDataURL(customImage);\r\n      } else {\r\n        await updateAvatar(avatarData);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving avatar:', error);\r\n      toast.error('Eroare la salvarea avatar-ului. Te rugăm să încerci din nou.');\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  // Funcție pentru actualizarea avatar-ului pe server\r\n  const updateAvatar = async (avatarData) => {\r\n    try {\r\n      const userId = sessionStorage.getItem('userId');\r\n      const authToken = sessionStorage.getItem('authToken');\r\n\r\n      const response = await fetch(`http://localhost:5000/api/users/${userId}/avatar`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authToken}`\r\n        },\r\n        body: JSON.stringify(avatarData)\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        toast.success('Avatar actualizat cu succes!');\r\n        onAvatarChange(avatarData.avatar, avatarData.avatarType);\r\n        onClose();\r\n      } else {\r\n        throw new Error(data.message || 'Eroare la actualizarea avatar-ului');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error updating avatar:', error);\r\n      toast.error('Eroare la comunicarea cu serverul.');\r\n    } finally {\r\n      setIsUploading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"avatar-manager\">\r\n      <div className=\"avatar-manager-overlay\" onClick={onClose}></div>\r\n      <div className=\"avatar-manager-modal\">\r\n        <div className=\"avatar-manager-header\">\r\n          <h3>Alege Avatar-ul Tău</h3>\r\n          <button className=\"close-btn\" onClick={onClose}>×</button>\r\n        </div>\r\n\r\n        <div className=\"avatar-manager-content\">\r\n          {/* Secțiunea pentru avatar-uri preset */}\r\n          <div className=\"avatar-section\">\r\n            <h4>Avatar-uri Predefinite</h4>\r\n            <div className=\"preset-avatars-grid\">\r\n              {presetAvatars.map((preset) => (\r\n                <div\r\n                  key={preset.id}\r\n                  className={`preset-avatar ${selectedPreset === preset.id ? 'selected' : ''}`}\r\n                  onClick={() => handlePresetSelect(preset.id)}\r\n                  title={preset.name}\r\n                >\r\n                  <span className=\"preset-emoji\">{preset.emoji}</span>\r\n                  <span className=\"preset-name\">{preset.name}</span>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Separator */}\r\n          <div className=\"avatar-divider\">\r\n            <span>SAU</span>\r\n          </div>\r\n\r\n          {/* Secțiunea pentru imagine custom */}\r\n          <div className=\"avatar-section\">\r\n            <h4>Încarcă Imagine Proprie</h4>\r\n            <div className=\"custom-avatar-section\">\r\n              <input\r\n                type=\"file\"\r\n                ref={fileInputRef}\r\n                onChange={handleImageSelect}\r\n                accept=\"image/*\"\r\n                style={{ display: 'none' }}\r\n              />\r\n              \r\n              <div className=\"custom-avatar-preview\">\r\n                {previewUrl ? (\r\n                  <img src={previewUrl} alt=\"Preview\" className=\"custom-preview-img\" />\r\n                ) : (\r\n                  <div className=\"custom-placeholder\">\r\n                    <span>📷</span>\r\n                    <p>Fără imagine</p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <button\r\n                className=\"upload-btn\"\r\n                onClick={() => fileInputRef.current?.click()}\r\n                disabled={isUploading}\r\n              >\r\n                {previewUrl ? 'Schimbă Imaginea' : 'Alege Imagine'}\r\n              </button>\r\n              \r\n              <p className=\"upload-hint\">\r\n                Formateuri acceptate: JPG, PNG, GIF (max 5MB)\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Butoanele de acțiune */}\r\n        <div className=\"avatar-manager-actions\">\r\n          <button className=\"cancel-btn\" onClick={onClose} disabled={isUploading}>\r\n            Anulează\r\n          </button>\r\n          <button \r\n            className=\"save-btn\" \r\n            onClick={handleSaveAvatar}\r\n            disabled={isUploading || (!selectedPreset && !customImage)}\r\n          >\r\n            {isUploading ? 'Se salvează...' : 'Salvează Avatar'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AvatarManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}