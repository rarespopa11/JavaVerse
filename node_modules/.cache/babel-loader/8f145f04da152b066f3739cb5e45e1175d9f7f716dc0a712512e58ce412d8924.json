{"ast":null,"code":"// src/utils/AccessibilityManager.js\nclass AccessibilityManager {\n  constructor() {\n    this.isAccessibilityMode = false;\n    this.speechSynthesis = window.speechSynthesis;\n    this.currentUtterance = null;\n    this.voice = null;\n    this.isReading = false;\n    this.readingQueue = [];\n    this.shortcuts = new Map();\n    this.focusedElement = null;\n    this.navigationMode = 'normal';\n    this.currentFocusIndex = 0;\n    this.focusableElements = [];\n    this.navigationHistory = [];\n    this.readingSpeed = 1.0;\n    this.isTyping = false; // Flag pentru modul de tastare\n    this.typingBuffer = ''; // Buffer pentru caractere tastate\n    this.lastTypedTime = 0; // Timestamp pentru ultimul caracter\n    this.currentLineContent = ''; // Conținutul liniei curente\n\n    this.initializeVoice();\n    this.setupGlobalListeners();\n    this.registerShortcuts();\n  }\n  initializeVoice() {\n    const setVoice = () => {\n      var _this$voice;\n      const voices = this.speechSynthesis.getVoices();\n      // Prioritizăm vocile în română\n      this.voice = voices.find(voice => voice.lang.startsWith('ro-RO')) || voices.find(voice => voice.lang.startsWith('ro')) || voices[0];\n      console.log('Voice initialized:', ((_this$voice = this.voice) === null || _this$voice === void 0 ? void 0 : _this$voice.name) || 'Default');\n    };\n    if (this.speechSynthesis.getVoices().length > 0) {\n      setVoice();\n    } else {\n      this.speechSynthesis.addEventListener('voiceschanged', setVoice);\n    }\n  }\n  setupGlobalListeners() {\n    document.addEventListener('keydown', e => {\n      // Ctrl+Shift+A pentru activarea modului\n      if (e.ctrlKey && e.shiftKey && e.key === 'A') {\n        e.preventDefault();\n        e.stopPropagation();\n        this.toggleAccessibilityMode();\n        return;\n      }\n      if (!this.isAccessibilityMode) return;\n\n      // Detectăm dacă suntem într-un câmp de input\n      const activeElement = document.activeElement;\n      const isInputField = ['INPUT', 'TEXTAREA'].includes(activeElement.tagName) || activeElement.classList.contains('monaco-editor');\n\n      // Dacă suntem în câmp de input, tratăm diferit\n      if (isInputField) {\n        this.handleTypingMode(e);\n        return;\n      }\n\n      // Pentru navigare normală (când NU suntem în input)\n      this.handleNavigationMode(e);\n    });\n\n    // Actualizăm lista de elemente focusabile când se schimbă DOM-ul\n    const observer = new MutationObserver(() => {\n      if (this.isAccessibilityMode) {\n        this.updateFocusableElements();\n      }\n    });\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n  registerShortcuts() {\n    // Comenzi simple cu o singură tastă sau Alt + tastă\n    // Navigare principală\n    this.shortcuts.set('Tab', () => this.navigateNext());\n    this.shortcuts.set('Shift+Tab', () => this.navigatePrevious());\n    this.shortcuts.set('Enter', () => this.activateElement());\n    this.shortcuts.set(' ', () => this.toggleReading()); // Space\n    this.shortcuts.set('Escape', () => this.stopReading());\n\n    // Navigare rapidă cu cifre\n    this.shortcuts.set('1', () => this.navigateToSection('header'));\n    this.shortcuts.set('2', () => this.navigateToSection('main'));\n    this.shortcuts.set('3', () => this.navigateToSection('footer'));\n\n    // Navigare în pagini cu litere\n    this.shortcuts.set('c', () => this.navigateToCourses());\n    this.shortcuts.set('p', () => this.navigateToPlayground());\n    this.shortcuts.set('r', () => this.navigateToProfile());\n    this.shortcuts.set('h', () => this.goHome());\n\n    // Comenzi utilitare cu Alt\n    this.shortcuts.set('alt+h', () => this.readHelp());\n    this.shortcuts.set('alt+m', () => this.readCurrentPage());\n    this.shortcuts.set('alt+n', () => this.readNavigationInfo());\n    this.shortcuts.set('alt+s', () => this.adjustSpeed());\n    this.shortcuts.set('alt+b', () => this.navigateBack());\n    this.shortcuts.set('alt+l', () => this.listAllElements());\n\n    // Navigare prin elemente similare\n    this.shortcuts.set('b', () => this.nextButton());\n    this.shortcuts.set('l', () => this.nextLink());\n    this.shortcuts.set('i', () => this.nextInput());\n    this.shortcuts.set('t', () => this.nextHeading());\n\n    // Navigare în quiz și editor\n    this.shortcuts.set('alt+1', () => this.selectQuizOption(0));\n    this.shortcuts.set('alt+2', () => this.selectQuizOption(1));\n    this.shortcuts.set('alt+3', () => this.selectQuizOption(2));\n    this.shortcuts.set('alt+4', () => this.selectQuizOption(3));\n    this.shortcuts.set('alt+e', () => this.executeCode());\n    this.shortcuts.set('alt+f', () => this.getFeedback());\n  }\n  toggleAccessibilityMode() {\n    this.isAccessibilityMode = !this.isAccessibilityMode;\n    if (this.isAccessibilityMode) {\n      this.speak(\"Modul pentru nevăzători activat. Bine ai venit în JavaVerse!\", 'high');\n      this.addAccessibilityStyles();\n      this.updateFocusableElements();\n      setTimeout(() => {\n        this.readWelcomeMessage();\n      }, 2000);\n    } else {\n      this.speak(\"Modul pentru nevăzători dezactivat.\");\n      this.removeAccessibilityStyles();\n      this.stopReading();\n    }\n    document.dispatchEvent(new CustomEvent('accessibilityModeChanged', {\n      detail: {\n        isActive: this.isAccessibilityMode\n      }\n    }));\n  }\n  readWelcomeMessage() {\n    const welcomeText = `\n      Bine ai venit în modul pentru nevăzători JavaVerse!\n      \n      Navigare simplă:\n      - Tab pentru următorul element\n      - Shift + Tab pentru elementul anterior\n      - Enter pentru a activa elementul selectat\n      - Spațiu pentru pauză sau continuare citire\n      - Escape pentru a opri citirea\n      \n      Navigare rapidă cu cifre:\n      - Tasta 1 pentru header\n      - Tasta 2 pentru conținutul principal\n      - Tasta 3 pentru footer\n      \n      Navigare rapidă cu litere:\n      - C pentru cursuri\n      - P pentru playground\n      - R pentru profil\n      - H pentru pagina principală\n      \n      Comenzi utile cu Alt:\n      - Alt + H pentru acest meniu de ajutor\n      - Alt + M pentru citirea paginii curente\n      - Alt + N pentru informații de navigare\n      - Alt + S pentru ajustarea vitezei de citire\n      - Alt + B pentru înapoi\n      - Alt + L pentru lista tuturor elementelor\n      \n      Navigare prin tipuri de elemente:\n      - B pentru următorul buton\n      - L pentru următorul link\n      - I pentru următorul câmp de input\n      - T pentru următorul titlu\n      \n      În quiz folosește Alt + 1, 2, 3 sau 4 pentru variante.\n      În editor folosește Alt + E pentru execuție și Alt + F pentru feedback.\n    `;\n    this.speak(welcomeText, 'high');\n  }\n  updateFocusableElements() {\n    const selectors = ['a[href]:not([disabled])', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])', 'textarea:not([disabled])', '[tabindex]:not([tabindex=\"-1\"])', '.course-card', '.question-container li', '.feature-card', '.example-card', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', '[role=\"button\"]:not([disabled])', '[role=\"link\"]', '[role=\"navigation\"]', '[role=\"main\"]'];\n    this.focusableElements = Array.from(document.querySelectorAll(selectors.join(', '))).filter(el => {\n      // Verificăm dacă elementul este vizibil\n      const rect = el.getBoundingClientRect();\n      return rect.width > 0 && rect.height > 0 && el.offsetParent !== null;\n    }).sort((a, b) => {\n      // Sortăm elementele după poziția lor în pagină\n      const rectA = a.getBoundingClientRect();\n      const rectB = b.getBoundingClientRect();\n      if (Math.abs(rectA.top - rectB.top) < 10) {\n        return rectA.left - rectB.left;\n      }\n      return rectA.top - rectB.top;\n    });\n  }\n  navigateNext() {\n    this.updateFocusableElements();\n    if (this.focusableElements.length === 0) {\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\n      return;\n    }\n    this.currentFocusIndex = (this.currentFocusIndex + 1) % this.focusableElements.length;\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\n  }\n  navigatePrevious() {\n    this.updateFocusableElements();\n    if (this.focusableElements.length === 0) {\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\n      return;\n    }\n    this.currentFocusIndex = this.currentFocusIndex === 0 ? this.focusableElements.length - 1 : this.currentFocusIndex - 1;\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\n  }\n  setFocus(element) {\n    if (!element) return;\n\n    // Eliminăm focus-ul anterior\n    document.querySelectorAll('.accessibility-focus').forEach(el => {\n      el.classList.remove('accessibility-focus');\n    });\n\n    // Setăm noul focus\n    this.focusedElement = element;\n    element.classList.add('accessibility-focus');\n\n    // Scroll smooth în vedere\n    element.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n      inline: 'nearest'\n    });\n\n    // Focus real pentru inputuri\n    if (['INPUT', 'TEXTAREA', 'SELECT'].includes(element.tagName)) {\n      element.focus();\n    }\n\n    // Citim informații despre element\n    this.readElementInfo(element);\n  }\n  readElementInfo(element) {\n    var _element$textContent, _document$querySelect, _document$querySelect2, _element$options$elem, _document$querySelect3;\n    let description = '';\n    const tagName = element.tagName.toLowerCase();\n    const ariaLabel = element.getAttribute('aria-label');\n    const text = (_element$textContent = element.textContent) === null || _element$textContent === void 0 ? void 0 : _element$textContent.trim();\n\n    // Prioritizăm aria-label\n    if (ariaLabel) {\n      description = ariaLabel;\n    } else {\n      // Descrieri specifice pentru fiecare tip de element\n      switch (tagName) {\n        case 'button':\n          description = `Buton: ${text || 'Fără text'}`;\n          break;\n        case 'a':\n          description = `Link: ${text || 'Fără text'}`;\n          break;\n        case 'input':\n          const inputType = element.type;\n          const inputLabel = (_document$querySelect = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.textContent;\n          const inputValue = element.value;\n          if (inputType === 'text' || inputType === 'email' || inputType === 'password') {\n            description = `Câmp ${inputType}: ${inputLabel || element.placeholder || 'Fără etichetă'}`;\n            if (inputValue) {\n              description += `. Valoare curentă: ${inputType === 'password' ? 'parolă introdusă' : inputValue}`;\n            }\n          } else if (inputType === 'radio' || inputType === 'checkbox') {\n            description = `${inputType === 'radio' ? 'Opțiune' : 'Bifă'}: ${inputLabel || text}. ${element.checked ? 'Selectat' : 'Neselectat'}`;\n          }\n          break;\n        case 'select':\n          const selectLabel = (_document$querySelect2 = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.textContent;\n          const selectedOption = (_element$options$elem = element.options[element.selectedIndex]) === null || _element$options$elem === void 0 ? void 0 : _element$options$elem.text;\n          description = `Listă derulantă: ${selectLabel || 'Fără etichetă'}. Selectat: ${selectedOption || 'Nimic'}`;\n          break;\n        case 'textarea':\n          const textareaLabel = (_document$querySelect3 = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.textContent;\n          description = `Zonă de text: ${textareaLabel || element.placeholder || 'Fără etichetă'}`;\n          if (element.value) {\n            description += `. ${element.value.length} caractere introduse`;\n          }\n          break;\n        case 'h1':\n        case 'h2':\n        case 'h3':\n        case 'h4':\n        case 'h5':\n        case 'h6':\n          const level = tagName.charAt(1);\n          description = `Titlu nivel ${level}: ${text}`;\n          break;\n        default:\n          // Pentru elemente custom (carduri, etc.)\n          if (element.classList.contains('course-card')) {\n            var _element$querySelecto, _element$querySelecto2;\n            const title = (_element$querySelecto = element.querySelector('.course-title')) === null || _element$querySelecto === void 0 ? void 0 : _element$querySelecto.textContent;\n            const desc = (_element$querySelecto2 = element.querySelector('.course-description')) === null || _element$querySelecto2 === void 0 ? void 0 : _element$querySelecto2.textContent;\n            description = `Curs: ${title}. ${desc}`;\n          } else if (element.classList.contains('feature-card')) {\n            var _element$querySelecto3, _element$querySelecto4;\n            const title = (_element$querySelecto3 = element.querySelector('h3')) === null || _element$querySelecto3 === void 0 ? void 0 : _element$querySelecto3.textContent;\n            const desc = (_element$querySelecto4 = element.querySelector('p')) === null || _element$querySelecto4 === void 0 ? void 0 : _element$querySelecto4.textContent;\n            description = `Caracteristică: ${title}. ${desc}`;\n          } else if (element.classList.contains('example-card')) {\n            var _element$querySelecto5;\n            const title = ((_element$querySelecto5 = element.querySelector('.card-title')) === null || _element$querySelecto5 === void 0 ? void 0 : _element$querySelecto5.textContent) || text;\n            description = `Exemplu de cod: ${title}`;\n          } else {\n            description = text || `Element ${tagName}`;\n          }\n      }\n    }\n\n    // Adăugăm indicații pentru interacțiune\n    if (['button', 'a'].includes(tagName) || element.getAttribute('role') === 'button') {\n      description += \". Apasă Enter pentru a activa\";\n    } else if (['input', 'textarea', 'select'].includes(tagName)) {\n      description += \". Apasă Enter pentru a edita\";\n    }\n    this.speak(description, 'high');\n  }\n  activateElement() {\n    if (!this.focusedElement) {\n      this.speak(\"Niciun element selectat\", 'high');\n      return;\n    }\n    const tagName = this.focusedElement.tagName.toLowerCase();\n\n    // Pentru inputuri, permitem editarea\n    if (['input', 'textarea', 'select'].includes(tagName)) {\n      this.focusedElement.focus();\n      this.speak(\"Mod editare activat. Apasă Escape când termini\", 'high');\n\n      // Dezactivăm temporar navigarea pentru a permite tastarea\n      this.temporarilyDisableNavigation();\n      return;\n    }\n\n    // Pentru alte elemente, simulăm click\n    this.speak(\"Activez elementul\", 'normal');\n    if (this.focusedElement.click) {\n      this.focusedElement.click();\n    } else if (tagName === 'a') {\n      window.location.href = this.focusedElement.href;\n    }\n  }\n  temporarilyDisableNavigation() {\n    const handleEscape = e => {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        document.removeEventListener('keydown', handleEscape, true);\n\n        // Re-focusăm elementul și anunțăm\n        if (this.focusedElement) {\n          this.focusedElement.blur();\n          this.speak(\"Mod editare dezactivat. Navigare reactivată\", 'high');\n          this.setFocus(this.focusedElement);\n        }\n      }\n    };\n\n    // Captură pentru Escape cu prioritate mare\n    document.addEventListener('keydown', handleEscape, true);\n  }\n\n  // Navigare rapidă la secțiuni\n  navigateToSection(sectionName) {\n    let selector;\n    let announcement;\n    switch (sectionName) {\n      case 'header':\n        selector = 'header, [role=\"banner\"], .jv-header';\n        announcement = \"Navighez la header\";\n        break;\n      case 'main':\n        selector = 'main, [role=\"main\"], .body-content';\n        announcement = \"Navighez la conținutul principal\";\n        break;\n      case 'footer':\n        selector = 'footer, [role=\"contentinfo\"], .jv-footer';\n        announcement = \"Navighez la footer\";\n        break;\n    }\n    const section = document.querySelector(selector);\n    if (section) {\n      this.speak(announcement, 'high');\n\n      // Găsim primul element focusabil din secțiune\n      const firstFocusable = section.querySelector('a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n      if (firstFocusable) {\n        const index = this.focusableElements.indexOf(firstFocusable);\n        if (index !== -1) {\n          this.currentFocusIndex = index;\n          this.setFocus(firstFocusable);\n        }\n      } else {\n        section.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start'\n        });\n        this.speak(\"Secțiune fără elemente interactive\", 'normal');\n      }\n    } else {\n      this.speak(\"Secțiunea nu a fost găsită\", 'high');\n    }\n  }\n\n  // Navigare prin tipuri de elemente\n  nextButton() {\n    this.navigateToNextOfType('button, [role=\"button\"]', 'buton');\n  }\n  nextLink() {\n    this.navigateToNextOfType('a[href]', 'link');\n  }\n  nextInput() {\n    this.navigateToNextOfType('input, textarea, select', 'câmp de input');\n  }\n  nextHeading() {\n    this.navigateToNextOfType('h1, h2, h3, h4, h5, h6', 'titlu');\n  }\n  navigateToNextOfType(selector, typeName) {\n    const elements = Array.from(document.querySelectorAll(selector)).filter(el => el.offsetParent !== null);\n    if (elements.length === 0) {\n      this.speak(`Nu există ${typeName} pe această pagină`, 'high');\n      return;\n    }\n    let nextIndex = -1;\n    if (this.focusedElement) {\n      const currentTypeIndex = elements.indexOf(this.focusedElement);\n      if (currentTypeIndex !== -1) {\n        nextIndex = (currentTypeIndex + 1) % elements.length;\n      } else {\n        // Găsim următorul element de acest tip după elementul curent\n        const currentRect = this.focusedElement.getBoundingClientRect();\n        for (let i = 0; i < elements.length; i++) {\n          const rect = elements[i].getBoundingClientRect();\n          if (rect.top > currentRect.top || Math.abs(rect.top - currentRect.top) < 10 && rect.left > currentRect.left) {\n            nextIndex = i;\n            break;\n          }\n        }\n      }\n    }\n    if (nextIndex === -1) {\n      nextIndex = 0;\n    }\n    const targetElement = elements[nextIndex];\n    const globalIndex = this.focusableElements.indexOf(targetElement);\n    if (globalIndex !== -1) {\n      this.currentFocusIndex = globalIndex;\n      this.setFocus(targetElement);\n    }\n  }\n\n  // Ajustare viteză citire\n  adjustSpeed() {\n    const speeds = [0.7, 0.85, 1.0, 1.15, 1.3];\n    const currentIndex = speeds.indexOf(this.readingSpeed);\n    const nextIndex = (currentIndex + 1) % speeds.length;\n    this.readingSpeed = speeds[nextIndex];\n    this.speak(`Viteză de citire: ${Math.round(this.readingSpeed * 100)}%`, 'high');\n  }\n\n  // Îmbunătățire pentru speak cu viteză ajustabilă\n  speak(text, priority = 'normal') {\n    if (!text || text.trim() === '') return;\n    if (priority === 'high') {\n      this.stopReading();\n    }\n    const utterance = new SpeechSynthesisUtterance(text);\n    if (this.voice) {\n      utterance.voice = this.voice;\n    }\n    utterance.rate = this.readingSpeed;\n    utterance.pitch = 1.0;\n    utterance.volume = 1.0;\n    utterance.onstart = () => {\n      this.isReading = true;\n      this.currentUtterance = utterance;\n\n      // Trimitem event pentru UI\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n        detail: {\n          isSpeaking: true\n        }\n      }));\n    };\n    utterance.onend = () => {\n      this.isReading = false;\n      this.currentUtterance = null;\n      this.processQueue();\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n        detail: {\n          isSpeaking: false\n        }\n      }));\n    };\n    utterance.onerror = e => {\n      console.error('Speech synthesis error:', e);\n      this.isReading = false;\n      this.currentUtterance = null;\n    };\n    if (this.isReading && priority !== 'high') {\n      this.readingQueue.push(utterance);\n    } else {\n      this.speechSynthesis.speak(utterance);\n    }\n  }\n\n  // Navigare înapoi\n  navigateBack() {\n    if (this.navigationHistory.length > 0) {\n      const previousUrl = this.navigationHistory.pop();\n      this.speak(\"Navighez înapoi\", 'high');\n      window.location.href = previousUrl;\n    } else {\n      this.speak(\"Nu există istoric de navigare\", 'high');\n    }\n  }\n\n  // Listare elemente\n  listAllElements() {\n    this.updateFocusableElements();\n    const totalElements = this.focusableElements.length;\n    const currentPosition = this.currentFocusIndex + 1;\n    let summary = `Pagina conține ${totalElements} elemente interactive. `;\n    summary += `Ești la elementul ${currentPosition} din ${totalElements}. `;\n\n    // Numărăm tipurile de elemente\n    const counts = {\n      buttons: document.querySelectorAll('button, [role=\"button\"]').length,\n      links: document.querySelectorAll('a[href]').length,\n      inputs: document.querySelectorAll('input, textarea, select').length,\n      headings: document.querySelectorAll('h1, h2, h3, h4, h5, h6').length\n    };\n    summary += `Găsit: ${counts.buttons} butoane, ${counts.links} linkuri, `;\n    summary += `${counts.inputs} câmpuri de input, ${counts.headings} titluri.`;\n    this.speak(summary, 'high');\n  }\n\n  // Navigare rapidă pentru pagini\n  navigateToCourses() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la cursuri\", 'high');\n    window.location.href = '/courses';\n  }\n  navigateToPlayground() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la playground\", 'high');\n    window.location.href = '/playground';\n  }\n  navigateToProfile() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la profil\", 'high');\n    window.location.href = '/profile';\n  }\n  goHome() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la pagina principală\", 'high');\n    window.location.href = '/';\n  }\n\n  // Funcții pentru quiz\n  selectQuizOption(index) {\n    const options = document.querySelectorAll('.question-container li');\n    if (options[index]) {\n      options[index].click();\n      this.speak(`Selectat răspunsul ${index + 1}`, 'high');\n    } else {\n      this.speak(`Nu există răspunsul ${index + 1}`, 'high');\n    }\n  }\n\n  // Funcții pentru editor\n  executeCode() {\n    const runButton = document.querySelector('.editor-actions button[aria-label*=\"Execută\"]');\n    if (runButton) {\n      runButton.click();\n      this.speak(\"Execut codul\", 'high');\n    } else {\n      this.speak(\"Butonul de execuție nu a fost găsit\", 'high');\n    }\n  }\n  getFeedback() {\n    const feedbackButton = document.querySelector('.editor-actions button[aria-label*=\"feedback\"]');\n    if (feedbackButton) {\n      feedbackButton.click();\n      this.speak(\"Solicit feedback AI\", 'high');\n    } else {\n      this.speak(\"Butonul de feedback nu a fost găsit\", 'high');\n    }\n  }\n\n  // Citirea informațiilor despre pagina curentă\n  readNavigationInfo() {\n    const currentUrl = window.location.pathname;\n    const totalElements = this.focusableElements.length;\n    const position = this.currentFocusIndex + 1;\n    let info = `Ești pe ${this.getPageName(currentUrl)}. `;\n    info += `Elementul curent: ${position} din ${totalElements}. `;\n    info += `Folosește Tab pentru navigare sau apasă H pentru ajutor.`;\n    this.speak(info, 'high');\n  }\n  getPageName(url) {\n    if (url === '/' || url === '') return 'pagina principală';\n    if (url.includes('/courses')) return 'pagina de cursuri';\n    if (url.includes('/playground')) return 'playground-ul de cod';\n    if (url.includes('/profile')) return 'pagina de profil';\n    if (url.includes('/login')) return 'pagina de autentificare';\n    if (url.includes('/register')) return 'pagina de înregistrare';\n    if (url.includes('/quiz')) return 'pagina de test';\n    return 'pagina curentă';\n  }\n\n  // Metodă îmbunătățită pentru citirea help-ului\n  readHelp() {\n    const currentPage = this.getPageName(window.location.pathname);\n    const helpText = `\n      Ajutor pentru ${currentPage}.\n      \n      Comenzi esențiale:\n      - Tab și Shift Tab pentru navigare înainte și înapoi\n      - Enter pentru a activa elementul selectat\n      - Spațiu pentru pauză sau continuare citire\n      - Escape pentru oprire citire\n      \n      Navigare rapidă:\n      - Tastele 1, 2, 3 pentru header, conținut principal, footer\n      - C pentru cursuri, P pentru playground, R pentru profil, H pentru acasă\n      \n      Navigare prin tipuri:\n      - B pentru butoane, L pentru linkuri\n      - I pentru câmpuri input, T pentru titluri\n      \n      Comenzi speciale cu Alt:\n      - Alt H pentru acest ajutor\n      - Alt M pentru citirea paginii\n      - Alt N pentru informații navigare\n      - Alt S pentru viteză citire\n      - Alt B pentru înapoi\n      - Alt L pentru lista elementelor\n      \n      ${this.getPageSpecificHelp(currentPage)}\n    `;\n    this.speak(helpText, 'high');\n  }\n  getPageSpecificHelp(pageName) {\n    switch (pageName) {\n      case 'pagina de cursuri':\n        return 'În această pagină: Navighează prin cursuri cu Tab. Apasă Enter pentru a selecta un curs.';\n      case 'playground-ul de cod':\n        return 'În editor: Alt E pentru execuție, Alt F pentru feedback AI. Tab citește linia curentă.';\n      case 'pagina de test':\n        return 'În test: Alt 1-4 pentru răspunsuri. Enter pentru verificare sau următoarea întrebare.';\n      case 'pagina de profil':\n        return 'În profil: Navighează prin secțiuni cu Tab. Enter pentru a modifica setările.';\n      default:\n        return '';\n    }\n  }\n  handleAccessibilityShortcuts(e) {\n    const key = this.getShortcutKey(e);\n    const handler = this.shortcuts.get(key);\n    if (handler) {\n      e.preventDefault();\n      handler();\n    }\n  }\n  getShortcutKey(e) {\n    const parts = [];\n    if (e.ctrlKey) parts.push('ctrl');\n    if (e.altKey) parts.push('alt');\n    if (e.shiftKey) parts.push('Shift');\n\n    // Tratăm special anumite taste\n    let key = e.key;\n    if (key === ' ') key = ' ';\n    if (key.length === 1) key = key.toLowerCase();\n    parts.push(key);\n    return parts.join('+');\n  }\n  addAccessibilityStyles() {\n    const style = document.createElement('style');\n    style.id = 'accessibility-styles';\n    style.textContent = `\n      /* Stiluri pentru modul nevăzători */\n      body.accessibility-mode {\n        background: #000000 !important;\n        color: #ffffff !important;\n        font-size: 20px !important;\n        line-height: 1.8 !important;\n        font-family: Arial, sans-serif !important;\n      }\n      \n      body.accessibility-mode * {\n        animation: none !important;\n        transition: none !important;\n      }\n      \n      accessibility-focus {\n       outline: 4px solid #ffff00 !important;\n       outline-offset: 4px !important;\n       background-color: #000033 !important;\n       color: #ffffff !important;\n       box-shadow: 0 0 20px #ffff00 !important;\n       border-radius: 4px !important;\n       position: relative !important;\n       z-index: 9999 !important;\n     }\n     \n     /* Ascundem elementele decorative */\n     body.accessibility-mode .stars-background,\n     body.accessibility-mode .planet,\n     body.accessibility-mode .asteroid,\n     body.accessibility-mode .shooting-star,\n     body.accessibility-mode .code-snippet,\n     body.accessibility-mode .cosmic-dust,\n     body.accessibility-mode .twinkling-star {\n       display: none !important;\n     }\n     \n     /* Simplificăm layout-ul */\n     body.accessibility-mode .main-banner {\n       background: #000000 !important;\n       min-height: auto !important;\n       padding: 20px !important;\n     }\n     \n     /* Text mai vizibil */\n     body.accessibility-mode h1,\n     body.accessibility-mode h2,\n     body.accessibility-mode h3,\n     body.accessibility-mode h4,\n     body.accessibility-mode h5,\n     body.accessibility-mode h6 {\n       color: #ffffff !important;\n       text-decoration: underline !important;\n       margin: 20px 0 !important;\n     }\n     \n     body.accessibility-mode p,\n     body.accessibility-mode span,\n     body.accessibility-mode div {\n       color: #ffffff !important;\n     }\n     \n     /* Butoane mai vizibile */\n     body.accessibility-mode button,\n     body.accessibility-mode .button,\n     body.accessibility-mode [role=\"button\"] {\n       background: #333333 !important;\n       color: #ffffff !important;\n       border: 2px solid #ffffff !important;\n       padding: 15px 20px !important;\n       font-size: 18px !important;\n       font-weight: bold !important;\n       text-transform: uppercase !important;\n     }\n     \n     body.accessibility-mode button:hover,\n     body.accessibility-mode button:focus {\n       background: #555555 !important;\n     }\n     \n     /* Linkuri mai vizibile */\n     body.accessibility-mode a {\n       color: #00ffff !important;\n       text-decoration: underline !important;\n       font-weight: bold !important;\n     }\n     \n     body.accessibility-mode a:hover,\n     body.accessibility-mode a:focus {\n       background: #333333 !important;\n       padding: 2px 4px !important;\n     }\n     \n     /* Inputuri mai clare */\n     body.accessibility-mode input,\n     body.accessibility-mode textarea,\n     body.accessibility-mode select {\n       background: #111111 !important;\n       color: #ffffff !important;\n       border: 2px solid #ffffff !important;\n       padding: 10px !important;\n       font-size: 18px !important;\n     }\n     \n     body.accessibility-mode input:focus,\n     body.accessibility-mode textarea:focus,\n     body.accessibility-mode select:focus {\n       border-color: #ffff00 !important;\n       outline: 2px solid #ffff00 !important;\n     }\n     \n     /* Simplificăm cardurile */\n     body.accessibility-mode .course-card,\n     body.accessibility-mode .feature-card,\n     body.accessibility-mode .example-card {\n       background: #111111 !important;\n       border: 2px solid #ffffff !important;\n       margin: 10px 0 !important;\n       padding: 20px !important;\n     }\n     \n     /* Eliminăm gradiente și efecte */\n     body.accessibility-mode [class*=\"gradient\"] {\n       background: #000000 !important;\n     }\n     \n     /* Indicator pentru elementul curent citit */\n     .accessibility-reading {\n       background-color: #333300 !important;\n       outline: 2px dashed #ffff00 !important;\n     }\n     \n     /* Mesaje de ajutor vizibile */\n     .accessibility-help-popup {\n       position: fixed;\n       bottom: 20px;\n       right: 20px;\n       background: #000000;\n       color: #ffffff;\n       border: 2px solid #ffff00;\n       padding: 20px;\n       max-width: 400px;\n       font-size: 16px;\n       z-index: 10000;\n       border-radius: 8px;\n     }\n     \n     /* Simplificăm navigarea */\n     body.accessibility-mode nav {\n       background: #000000 !important;\n       border: 2px solid #ffffff !important;\n       padding: 10px !important;\n     }\n     \n     /* Lista de elemente focusabile */\n     .accessibility-element-list {\n       position: fixed;\n       left: 0;\n       top: 0;\n       width: 300px;\n       height: 100%;\n       background: #000000;\n       border-right: 2px solid #ffffff;\n       padding: 20px;\n       overflow-y: auto;\n       z-index: 9998;\n       display: none;\n     }\n     \n     body.accessibility-mode.show-element-list .accessibility-element-list {\n       display: block;\n     }\n   `;\n    document.head.appendChild(style);\n    document.body.classList.add('accessibility-mode');\n  }\n  removeAccessibilityStyles() {\n    const style = document.getElementById('accessibility-styles');\n    if (style) style.remove();\n    document.body.classList.remove('accessibility-mode');\n\n    // Eliminăm toate clasele de focus\n    document.querySelectorAll('.accessibility-focus, .accessibility-reading').forEach(el => {\n      el.classList.remove('accessibility-focus', 'accessibility-reading');\n    });\n  }\n\n  // Adaugă aceste metode în clasa AccessibilityManager (în src/utils/AccessibilityManager.js)\n\n  stopReading() {\n    if (this.speechSynthesis.speaking) {\n      this.speechSynthesis.cancel();\n    }\n    this.isReading = false;\n    this.currentUtterance = null;\n    this.readingQueue = [];\n\n    // Trimitem event pentru UI\n    document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n      detail: {\n        isSpeaking: false\n      }\n    }));\n  }\n  processQueue() {\n    if (this.readingQueue.length > 0 && !this.isReading) {\n      const nextUtterance = this.readingQueue.shift();\n      this.speechSynthesis.speak(nextUtterance);\n    }\n  }\n  toggleReading() {\n    if (this.isReading && this.currentUtterance) {\n      if (this.speechSynthesis.paused) {\n        this.speechSynthesis.resume();\n        this.speak(\"Reluare citire\", 'normal');\n      } else {\n        this.speechSynthesis.pause();\n        this.speak(\"Pauză citire\", 'normal');\n      }\n    } else {\n      this.readCurrentPage();\n    }\n  }\n  readCurrentPage() {\n    const pageContent = this.extractPageContent();\n    if (pageContent) {\n      this.speak(pageContent, 'high');\n    } else {\n      this.speak(\"Nu există conținut de citit pe această pagină\", 'high');\n    }\n  }\n  extractPageContent() {\n    let content = '';\n\n    // Extragem titlul paginii\n    const title = document.querySelector('h1');\n    if (title) {\n      content += `Titlu: ${title.textContent.trim()}. `;\n    }\n\n    // Extragem descrierea sau subtitlul\n    const description = document.querySelector('.page-description, .course-detail-description, .code-playground-description');\n    if (description) {\n      content += `${description.textContent.trim()}. `;\n    }\n\n    // Extragem conținutul principal\n    const mainContent = document.querySelector('main, .body-content, .course-detail-content');\n    if (mainContent) {\n      // Extragem doar textul relevant, ignorând butoanele și alte elemente interactive\n      const paragraphs = mainContent.querySelectorAll('p, h2, h3, h4, li');\n      paragraphs.forEach(p => {\n        const text = p.textContent.trim();\n        if (text && text.length > 0) {\n          content += `${text}. `;\n        }\n      });\n    }\n\n    // Dacă suntem pe o pagină de curs, citim și lecțiile\n    const lessons = document.querySelectorAll('.course-preview-item, .lesson-title');\n    if (lessons.length > 0) {\n      content += 'Lecții disponibile: ';\n      lessons.forEach((lesson, index) => {\n        content += `${index + 1}. ${lesson.textContent.trim()}. `;\n      });\n    }\n\n    // Dacă suntem pe o pagină de test, citim întrebarea curentă\n    const currentQuestion = document.querySelector('.question-container h3');\n    if (currentQuestion) {\n      content += `Întrebare: ${currentQuestion.textContent.trim()}. `;\n      const options = document.querySelectorAll('.question-container li label');\n      if (options.length > 0) {\n        content += 'Opțiuni: ';\n        options.forEach((option, index) => {\n          content += `${index + 1}. ${option.textContent.trim()}. `;\n        });\n      }\n    }\n    return content.trim();\n  }\n\n  // Adaugă și această metodă pentru anunțuri\n  announce(message, priority = 'normal') {\n    this.speak(message, priority);\n  }\n\n  // Adaugă getter pentru proprietatea isSpeaking\n  get isSpeaking() {\n    return this.isReading || this.speechSynthesis.speaking;\n  }\n\n  // Adaugă getter pentru proprietatea isActive\n  get isActive() {\n    return this.isAccessibilityMode;\n  }\n\n  // Metodă pentru citirea întrebărilor de quiz\n  readQuizQuestion(question, options) {\n    let text = `Întrebare: ${question}. `;\n    if (options && options.length > 0) {\n      text += 'Variantele de răspuns sunt: ';\n      options.forEach((option, index) => {\n        text += `${index + 1}: ${option}. `;\n      });\n    }\n    this.speak(text, 'high');\n  }\n\n  // Metodă pentru anunțarea rezultatului quiz-ului\n  announceQuizResult(score, totalQuestions) {\n    const percentage = Math.round(score / totalQuestions * 100);\n    const text = `Test finalizat! Ai răspuns corect la ${score} din ${totalQuestions} întrebări. ` + `Scorul tău este ${percentage}%. ` + (percentage >= 80 ? 'Felicitări! Rezultat excelent!' : percentage >= 60 ? 'Rezultat bun! Continuă să înveți.' : 'Nu te descuraja! Încearcă din nou pentru un rezultat mai bun.');\n    this.speak(text, 'high');\n  }\n\n  // Metodă pentru citirea liniilor de cod\n  readCodeLine(lineNumber) {\n    const editor = document.querySelector('.monaco-editor');\n    if (editor) {\n      // Implementare simplificată - în practică ar trebui să accesăm API-ul Monaco\n      this.speak(`Linia ${lineNumber} din editor`, 'normal');\n    }\n  }\n\n  // Metodă pentru anunțarea schimbărilor în cod\n  announceCodeChange(newCode, position) {\n    if (position && position.line) {\n      this.speak(`Cod modificat la linia ${position.line}`, 'normal');\n    }\n  }\n}\n\n// Exportăm o instanță singleton\nconst accessibilityManager = new AccessibilityManager();\nexport default accessibilityManager;","map":{"version":3,"names":["AccessibilityManager","constructor","isAccessibilityMode","speechSynthesis","window","currentUtterance","voice","isReading","readingQueue","shortcuts","Map","focusedElement","navigationMode","currentFocusIndex","focusableElements","navigationHistory","readingSpeed","isTyping","typingBuffer","lastTypedTime","currentLineContent","initializeVoice","setupGlobalListeners","registerShortcuts","setVoice","_this$voice","voices","getVoices","find","lang","startsWith","console","log","name","length","addEventListener","document","e","ctrlKey","shiftKey","key","preventDefault","stopPropagation","toggleAccessibilityMode","activeElement","isInputField","includes","tagName","classList","contains","handleTypingMode","handleNavigationMode","observer","MutationObserver","updateFocusableElements","observe","body","childList","subtree","set","navigateNext","navigatePrevious","activateElement","toggleReading","stopReading","navigateToSection","navigateToCourses","navigateToPlayground","navigateToProfile","goHome","readHelp","readCurrentPage","readNavigationInfo","adjustSpeed","navigateBack","listAllElements","nextButton","nextLink","nextInput","nextHeading","selectQuizOption","executeCode","getFeedback","speak","addAccessibilityStyles","setTimeout","readWelcomeMessage","removeAccessibilityStyles","dispatchEvent","CustomEvent","detail","isActive","welcomeText","selectors","Array","from","querySelectorAll","join","filter","el","rect","getBoundingClientRect","width","height","offsetParent","sort","a","b","rectA","rectB","Math","abs","top","left","setFocus","element","forEach","remove","add","scrollIntoView","behavior","block","inline","focus","readElementInfo","_element$textContent","_document$querySelect","_document$querySelect2","_element$options$elem","_document$querySelect3","description","toLowerCase","ariaLabel","getAttribute","text","textContent","trim","inputType","type","inputLabel","querySelector","id","inputValue","value","placeholder","checked","selectLabel","selectedOption","options","selectedIndex","textareaLabel","level","charAt","_element$querySelecto","_element$querySelecto2","title","desc","_element$querySelecto3","_element$querySelecto4","_element$querySelecto5","temporarilyDisableNavigation","click","location","href","handleEscape","removeEventListener","blur","sectionName","selector","announcement","section","firstFocusable","index","indexOf","navigateToNextOfType","typeName","elements","nextIndex","currentTypeIndex","currentRect","i","targetElement","globalIndex","speeds","currentIndex","round","priority","utterance","SpeechSynthesisUtterance","rate","pitch","volume","onstart","isSpeaking","onend","processQueue","onerror","error","push","previousUrl","pop","totalElements","currentPosition","summary","counts","buttons","links","inputs","headings","runButton","feedbackButton","currentUrl","pathname","position","info","getPageName","url","currentPage","helpText","getPageSpecificHelp","pageName","handleAccessibilityShortcuts","getShortcutKey","handler","get","parts","altKey","style","createElement","head","appendChild","getElementById","speaking","cancel","nextUtterance","shift","paused","resume","pause","pageContent","extractPageContent","content","mainContent","paragraphs","p","lessons","lesson","currentQuestion","option","announce","message","readQuizQuestion","question","announceQuizResult","score","totalQuestions","percentage","readCodeLine","lineNumber","editor","announceCodeChange","newCode","line","accessibilityManager"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/utils/AccessibilityManager.js"],"sourcesContent":["// src/utils/AccessibilityManager.js\r\nclass AccessibilityManager {\r\n  constructor() {\r\n    this.isAccessibilityMode = false;\r\n    this.speechSynthesis = window.speechSynthesis;\r\n    this.currentUtterance = null;\r\n    this.voice = null;\r\n    this.isReading = false;\r\n    this.readingQueue = [];\r\n    this.shortcuts = new Map();\r\n    this.focusedElement = null;\r\n    this.navigationMode = 'normal';\r\n    this.currentFocusIndex = 0;\r\n    this.focusableElements = [];\r\n    this.navigationHistory = [];\r\n    this.readingSpeed = 1.0;\r\n    this.isTyping = false; // Flag pentru modul de tastare\r\n    this.typingBuffer = ''; // Buffer pentru caractere tastate\r\n    this.lastTypedTime = 0; // Timestamp pentru ultimul caracter\r\n    this.currentLineContent = ''; // Conținutul liniei curente\r\n    \r\n    this.initializeVoice();\r\n    this.setupGlobalListeners();\r\n    this.registerShortcuts();\r\n  }\r\n\r\n  initializeVoice() {\r\n    const setVoice = () => {\r\n      const voices = this.speechSynthesis.getVoices();\r\n      // Prioritizăm vocile în română\r\n      this.voice = voices.find(voice => voice.lang.startsWith('ro-RO')) || \r\n                   voices.find(voice => voice.lang.startsWith('ro')) || \r\n                   voices[0];\r\n      console.log('Voice initialized:', this.voice?.name || 'Default');\r\n    };\r\n\r\n    if (this.speechSynthesis.getVoices().length > 0) {\r\n      setVoice();\r\n    } else {\r\n      this.speechSynthesis.addEventListener('voiceschanged', setVoice);\r\n    }\r\n  }\r\n\r\n  setupGlobalListeners() {\r\n    document.addEventListener('keydown', (e) => {\r\n      // Ctrl+Shift+A pentru activarea modului\r\n      if (e.ctrlKey && e.shiftKey && e.key === 'A') {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.toggleAccessibilityMode();\r\n        return;\r\n      }\r\n\r\n      if (!this.isAccessibilityMode) return;\r\n\r\n      // Detectăm dacă suntem într-un câmp de input\r\n      const activeElement = document.activeElement;\r\n      const isInputField = ['INPUT', 'TEXTAREA'].includes(activeElement.tagName) || \r\n                          activeElement.classList.contains('monaco-editor');\r\n\r\n      // Dacă suntem în câmp de input, tratăm diferit\r\n      if (isInputField) {\r\n        this.handleTypingMode(e);\r\n        return;\r\n      }\r\n\r\n      // Pentru navigare normală (când NU suntem în input)\r\n      this.handleNavigationMode(e);\r\n    });\r\n\r\n    // Actualizăm lista de elemente focusabile când se schimbă DOM-ul\r\n    const observer = new MutationObserver(() => {\r\n      if (this.isAccessibilityMode) {\r\n        this.updateFocusableElements();\r\n      }\r\n    });\r\n\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  registerShortcuts() {\r\n    // Comenzi simple cu o singură tastă sau Alt + tastă\r\n    // Navigare principală\r\n    this.shortcuts.set('Tab', () => this.navigateNext());\r\n    this.shortcuts.set('Shift+Tab', () => this.navigatePrevious());\r\n    this.shortcuts.set('Enter', () => this.activateElement());\r\n    this.shortcuts.set(' ', () => this.toggleReading()); // Space\r\n    this.shortcuts.set('Escape', () => this.stopReading());\r\n    \r\n    // Navigare rapidă cu cifre\r\n    this.shortcuts.set('1', () => this.navigateToSection('header'));\r\n    this.shortcuts.set('2', () => this.navigateToSection('main'));\r\n    this.shortcuts.set('3', () => this.navigateToSection('footer'));\r\n    \r\n    // Navigare în pagini cu litere\r\n    this.shortcuts.set('c', () => this.navigateToCourses());\r\n    this.shortcuts.set('p', () => this.navigateToPlayground());\r\n    this.shortcuts.set('r', () => this.navigateToProfile());\r\n    this.shortcuts.set('h', () => this.goHome());\r\n    \r\n    // Comenzi utilitare cu Alt\r\n    this.shortcuts.set('alt+h', () => this.readHelp());\r\n    this.shortcuts.set('alt+m', () => this.readCurrentPage());\r\n    this.shortcuts.set('alt+n', () => this.readNavigationInfo());\r\n    this.shortcuts.set('alt+s', () => this.adjustSpeed());\r\n    this.shortcuts.set('alt+b', () => this.navigateBack());\r\n    this.shortcuts.set('alt+l', () => this.listAllElements());\r\n    \r\n    // Navigare prin elemente similare\r\n    this.shortcuts.set('b', () => this.nextButton());\r\n    this.shortcuts.set('l', () => this.nextLink());\r\n    this.shortcuts.set('i', () => this.nextInput());\r\n    this.shortcuts.set('t', () => this.nextHeading());\r\n    \r\n    // Navigare în quiz și editor\r\n    this.shortcuts.set('alt+1', () => this.selectQuizOption(0));\r\n    this.shortcuts.set('alt+2', () => this.selectQuizOption(1));\r\n    this.shortcuts.set('alt+3', () => this.selectQuizOption(2));\r\n    this.shortcuts.set('alt+4', () => this.selectQuizOption(3));\r\n    this.shortcuts.set('alt+e', () => this.executeCode());\r\n    this.shortcuts.set('alt+f', () => this.getFeedback());\r\n  }\r\n\r\n  toggleAccessibilityMode() {\r\n    this.isAccessibilityMode = !this.isAccessibilityMode;\r\n    \r\n    if (this.isAccessibilityMode) {\r\n      this.speak(\"Modul pentru nevăzători activat. Bine ai venit în JavaVerse!\", 'high');\r\n      this.addAccessibilityStyles();\r\n      this.updateFocusableElements();\r\n      \r\n      setTimeout(() => {\r\n        this.readWelcomeMessage();\r\n      }, 2000);\r\n    } else {\r\n      this.speak(\"Modul pentru nevăzători dezactivat.\");\r\n      this.removeAccessibilityStyles();\r\n      this.stopReading();\r\n    }\r\n    \r\n    document.dispatchEvent(new CustomEvent('accessibilityModeChanged', {\r\n      detail: { isActive: this.isAccessibilityMode }\r\n    }));\r\n  }\r\n\r\n  readWelcomeMessage() {\r\n    const welcomeText = `\r\n      Bine ai venit în modul pentru nevăzători JavaVerse!\r\n      \r\n      Navigare simplă:\r\n      - Tab pentru următorul element\r\n      - Shift + Tab pentru elementul anterior\r\n      - Enter pentru a activa elementul selectat\r\n      - Spațiu pentru pauză sau continuare citire\r\n      - Escape pentru a opri citirea\r\n      \r\n      Navigare rapidă cu cifre:\r\n      - Tasta 1 pentru header\r\n      - Tasta 2 pentru conținutul principal\r\n      - Tasta 3 pentru footer\r\n      \r\n      Navigare rapidă cu litere:\r\n      - C pentru cursuri\r\n      - P pentru playground\r\n      - R pentru profil\r\n      - H pentru pagina principală\r\n      \r\n      Comenzi utile cu Alt:\r\n      - Alt + H pentru acest meniu de ajutor\r\n      - Alt + M pentru citirea paginii curente\r\n      - Alt + N pentru informații de navigare\r\n      - Alt + S pentru ajustarea vitezei de citire\r\n      - Alt + B pentru înapoi\r\n      - Alt + L pentru lista tuturor elementelor\r\n      \r\n      Navigare prin tipuri de elemente:\r\n      - B pentru următorul buton\r\n      - L pentru următorul link\r\n      - I pentru următorul câmp de input\r\n      - T pentru următorul titlu\r\n      \r\n      În quiz folosește Alt + 1, 2, 3 sau 4 pentru variante.\r\n      În editor folosește Alt + E pentru execuție și Alt + F pentru feedback.\r\n    `;\r\n    \r\n    this.speak(welcomeText, 'high');\r\n  }\r\n\r\n  updateFocusableElements() {\r\n    const selectors = [\r\n      'a[href]:not([disabled])',\r\n      'button:not([disabled])',\r\n      'input:not([disabled]):not([type=\"hidden\"])',\r\n      'select:not([disabled])',\r\n      'textarea:not([disabled])',\r\n      '[tabindex]:not([tabindex=\"-1\"])',\r\n      '.course-card',\r\n      '.question-container li',\r\n      '.feature-card',\r\n      '.example-card',\r\n      'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\r\n      '[role=\"button\"]:not([disabled])',\r\n      '[role=\"link\"]',\r\n      '[role=\"navigation\"]',\r\n      '[role=\"main\"]'\r\n    ];\r\n    \r\n    this.focusableElements = Array.from(document.querySelectorAll(selectors.join(', ')))\r\n      .filter(el => {\r\n        // Verificăm dacă elementul este vizibil\r\n        const rect = el.getBoundingClientRect();\r\n        return rect.width > 0 && rect.height > 0 && el.offsetParent !== null;\r\n      })\r\n      .sort((a, b) => {\r\n        // Sortăm elementele după poziția lor în pagină\r\n        const rectA = a.getBoundingClientRect();\r\n        const rectB = b.getBoundingClientRect();\r\n        \r\n        if (Math.abs(rectA.top - rectB.top) < 10) {\r\n          return rectA.left - rectB.left;\r\n        }\r\n        return rectA.top - rectB.top;\r\n      });\r\n  }\r\n\r\n  navigateNext() {\r\n    this.updateFocusableElements();\r\n    \r\n    if (this.focusableElements.length === 0) {\r\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\r\n      return;\r\n    }\r\n    \r\n    this.currentFocusIndex = (this.currentFocusIndex + 1) % this.focusableElements.length;\r\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\r\n  }\r\n\r\n  navigatePrevious() {\r\n    this.updateFocusableElements();\r\n    \r\n    if (this.focusableElements.length === 0) {\r\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\r\n      return;\r\n    }\r\n    \r\n    this.currentFocusIndex = this.currentFocusIndex === 0 \r\n      ? this.focusableElements.length - 1 \r\n      : this.currentFocusIndex - 1;\r\n      \r\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\r\n  }\r\n\r\n  setFocus(element) {\r\n    if (!element) return;\r\n    \r\n    // Eliminăm focus-ul anterior\r\n    document.querySelectorAll('.accessibility-focus').forEach(el => {\r\n      el.classList.remove('accessibility-focus');\r\n    });\r\n    \r\n    // Setăm noul focus\r\n    this.focusedElement = element;\r\n    element.classList.add('accessibility-focus');\r\n    \r\n    // Scroll smooth în vedere\r\n    element.scrollIntoView({ \r\n      behavior: 'smooth', \r\n      block: 'center',\r\n      inline: 'nearest'\r\n    });\r\n    \r\n    // Focus real pentru inputuri\r\n    if (['INPUT', 'TEXTAREA', 'SELECT'].includes(element.tagName)) {\r\n      element.focus();\r\n    }\r\n    \r\n    // Citim informații despre element\r\n    this.readElementInfo(element);\r\n  }\r\n\r\n  readElementInfo(element) {\r\n    let description = '';\r\n    const tagName = element.tagName.toLowerCase();\r\n    const ariaLabel = element.getAttribute('aria-label');\r\n    const text = element.textContent?.trim();\r\n    \r\n    // Prioritizăm aria-label\r\n    if (ariaLabel) {\r\n      description = ariaLabel;\r\n    } else {\r\n      // Descrieri specifice pentru fiecare tip de element\r\n      switch (tagName) {\r\n        case 'button':\r\n          description = `Buton: ${text || 'Fără text'}`;\r\n          break;\r\n          \r\n        case 'a':\r\n          description = `Link: ${text || 'Fără text'}`;\r\n          break;\r\n          \r\n        case 'input':\r\n          const inputType = element.type;\r\n          const inputLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          const inputValue = element.value;\r\n          \r\n          if (inputType === 'text' || inputType === 'email' || inputType === 'password') {\r\n            description = `Câmp ${inputType}: ${inputLabel || element.placeholder || 'Fără etichetă'}`;\r\n            if (inputValue) {\r\n              description += `. Valoare curentă: ${inputType === 'password' ? 'parolă introdusă' : inputValue}`;\r\n            }\r\n          } else if (inputType === 'radio' || inputType === 'checkbox') {\r\n            description = `${inputType === 'radio' ? 'Opțiune' : 'Bifă'}: ${inputLabel || text}. ${element.checked ? 'Selectat' : 'Neselectat'}`;\r\n          }\r\n          break;\r\n          \r\n        case 'select':\r\n          const selectLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          const selectedOption = element.options[element.selectedIndex]?.text;\r\n          description = `Listă derulantă: ${selectLabel || 'Fără etichetă'}. Selectat: ${selectedOption || 'Nimic'}`;\r\n          break;\r\n          \r\n        case 'textarea':\r\n          const textareaLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          description = `Zonă de text: ${textareaLabel || element.placeholder || 'Fără etichetă'}`;\r\n          if (element.value) {\r\n            description += `. ${element.value.length} caractere introduse`;\r\n          }\r\n          break;\r\n          \r\n        case 'h1':\r\n        case 'h2':\r\n        case 'h3':\r\n        case 'h4':\r\n        case 'h5':\r\n        case 'h6':\r\n          const level = tagName.charAt(1);\r\n          description = `Titlu nivel ${level}: ${text}`;\r\n          break;\r\n          \r\n        default:\r\n          // Pentru elemente custom (carduri, etc.)\r\n          if (element.classList.contains('course-card')) {\r\n            const title = element.querySelector('.course-title')?.textContent;\r\n            const desc = element.querySelector('.course-description')?.textContent;\r\n            description = `Curs: ${title}. ${desc}`;\r\n          } else if (element.classList.contains('feature-card')) {\r\n            const title = element.querySelector('h3')?.textContent;\r\n            const desc = element.querySelector('p')?.textContent;\r\n            description = `Caracteristică: ${title}. ${desc}`;\r\n          } else if (element.classList.contains('example-card')) {\r\n            const title = element.querySelector('.card-title')?.textContent || text;\r\n            description = `Exemplu de cod: ${title}`;\r\n          } else {\r\n            description = text || `Element ${tagName}`;\r\n          }\r\n      }\r\n    }\r\n    \r\n    // Adăugăm indicații pentru interacțiune\r\n    if (['button', 'a'].includes(tagName) || element.getAttribute('role') === 'button') {\r\n      description += \". Apasă Enter pentru a activa\";\r\n    } else if (['input', 'textarea', 'select'].includes(tagName)) {\r\n      description += \". Apasă Enter pentru a edita\";\r\n    }\r\n    \r\n    this.speak(description, 'high');\r\n  }\r\n\r\n  activateElement() {\r\n    if (!this.focusedElement) {\r\n      this.speak(\"Niciun element selectat\", 'high');\r\n      return;\r\n    }\r\n    \r\n    const tagName = this.focusedElement.tagName.toLowerCase();\r\n    \r\n    // Pentru inputuri, permitem editarea\r\n    if (['input', 'textarea', 'select'].includes(tagName)) {\r\n      this.focusedElement.focus();\r\n      this.speak(\"Mod editare activat. Apasă Escape când termini\", 'high');\r\n      \r\n      // Dezactivăm temporar navigarea pentru a permite tastarea\r\n      this.temporarilyDisableNavigation();\r\n      return;\r\n    }\r\n    \r\n    // Pentru alte elemente, simulăm click\r\n    this.speak(\"Activez elementul\", 'normal');\r\n    \r\n    if (this.focusedElement.click) {\r\n      this.focusedElement.click();\r\n    } else if (tagName === 'a') {\r\n      window.location.href = this.focusedElement.href;\r\n    }\r\n  }\r\n\r\n  temporarilyDisableNavigation() {\r\n    const handleEscape = (e) => {\r\n      if (e.key === 'Escape') {\r\n        e.preventDefault();\r\n        document.removeEventListener('keydown', handleEscape, true);\r\n        \r\n        // Re-focusăm elementul și anunțăm\r\n        if (this.focusedElement) {\r\n          this.focusedElement.blur();\r\n          this.speak(\"Mod editare dezactivat. Navigare reactivată\", 'high');\r\n          this.setFocus(this.focusedElement);\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Captură pentru Escape cu prioritate mare\r\n    document.addEventListener('keydown', handleEscape, true);\r\n  }\r\n\r\n  // Navigare rapidă la secțiuni\r\n  navigateToSection(sectionName) {\r\n    let selector;\r\n    let announcement;\r\n    \r\n    switch (sectionName) {\r\n      case 'header':\r\n        selector = 'header, [role=\"banner\"], .jv-header';\r\n        announcement = \"Navighez la header\";\r\n        break;\r\n      case 'main':\r\n        selector = 'main, [role=\"main\"], .body-content';\r\n        announcement = \"Navighez la conținutul principal\";\r\n        break;\r\n      case 'footer':\r\n        selector = 'footer, [role=\"contentinfo\"], .jv-footer';\r\n        announcement = \"Navighez la footer\";\r\n        break;\r\n    }\r\n    \r\n    const section = document.querySelector(selector);\r\n    if (section) {\r\n      this.speak(announcement, 'high');\r\n      \r\n      // Găsim primul element focusabil din secțiune\r\n      const firstFocusable = section.querySelector(\r\n        'a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n      );\r\n      \r\n      if (firstFocusable) {\r\n        const index = this.focusableElements.indexOf(firstFocusable);\r\n        if (index !== -1) {\r\n          this.currentFocusIndex = index;\r\n          this.setFocus(firstFocusable);\r\n        }\r\n      } else {\r\n        section.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        this.speak(\"Secțiune fără elemente interactive\", 'normal');\r\n      }\r\n    } else {\r\n      this.speak(\"Secțiunea nu a fost găsită\", 'high');\r\n    }\r\n  }\r\n\r\n  // Navigare prin tipuri de elemente\r\n  nextButton() {\r\n    this.navigateToNextOfType('button, [role=\"button\"]', 'buton');\r\n  }\r\n\r\n  nextLink() {\r\n    this.navigateToNextOfType('a[href]', 'link');\r\n  }\r\n\r\n  nextInput() {\r\n    this.navigateToNextOfType('input, textarea, select', 'câmp de input');\r\n  }\r\n\r\n  nextHeading() {\r\n    this.navigateToNextOfType('h1, h2, h3, h4, h5, h6', 'titlu');\r\n  }\r\n\r\n  navigateToNextOfType(selector, typeName) {\r\n    const elements = Array.from(document.querySelectorAll(selector))\r\n      .filter(el => el.offsetParent !== null);\r\n    \r\n    if (elements.length === 0) {\r\n      this.speak(`Nu există ${typeName} pe această pagină`, 'high');\r\n      return;\r\n    }\r\n    \r\n    let nextIndex = -1;\r\n    \r\n    if (this.focusedElement) {\r\n      const currentTypeIndex = elements.indexOf(this.focusedElement);\r\n      if (currentTypeIndex !== -1) {\r\n        nextIndex = (currentTypeIndex + 1) % elements.length;\r\n      } else {\r\n        // Găsim următorul element de acest tip după elementul curent\r\n        const currentRect = this.focusedElement.getBoundingClientRect();\r\n        for (let i = 0; i < elements.length; i++) {\r\n          const rect = elements[i].getBoundingClientRect();\r\n          if (rect.top > currentRect.top || \r\n              (Math.abs(rect.top - currentRect.top) < 10 && rect.left > currentRect.left)) {\r\n            nextIndex = i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (nextIndex === -1) {\r\n      nextIndex = 0;\r\n    }\r\n    \r\n    const targetElement = elements[nextIndex];\r\n    const globalIndex = this.focusableElements.indexOf(targetElement);\r\n    \r\n    if (globalIndex !== -1) {\r\n      this.currentFocusIndex = globalIndex;\r\n      this.setFocus(targetElement);\r\n    }\r\n  }\r\n\r\n  // Ajustare viteză citire\r\n  adjustSpeed() {\r\n    const speeds = [0.7, 0.85, 1.0, 1.15, 1.3];\r\n    const currentIndex = speeds.indexOf(this.readingSpeed);\r\n    const nextIndex = (currentIndex + 1) % speeds.length;\r\n    \r\n    this.readingSpeed = speeds[nextIndex];\r\n    this.speak(`Viteză de citire: ${Math.round(this.readingSpeed * 100)}%`, 'high');\r\n  }\r\n\r\n  // Îmbunătățire pentru speak cu viteză ajustabilă\r\n  speak(text, priority = 'normal') {\r\n    if (!text || text.trim() === '') return;\r\n\r\n    if (priority === 'high') {\r\n      this.stopReading();\r\n    }\r\n\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    if (this.voice) {\r\n      utterance.voice = this.voice;\r\n    }\r\n    \r\n    utterance.rate = this.readingSpeed;\r\n    utterance.pitch = 1.0;\r\n    utterance.volume = 1.0;\r\n\r\n    utterance.onstart = () => {\r\n      this.isReading = true;\r\n      this.currentUtterance = utterance;\r\n      \r\n      // Trimitem event pentru UI\r\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n        detail: { isSpeaking: true }\r\n      }));\r\n    };\r\n\r\n    utterance.onend = () => {\r\n      this.isReading = false;\r\n      this.currentUtterance = null;\r\n      this.processQueue();\r\n      \r\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n        detail: { isSpeaking: false }\r\n      }));\r\n    };\r\n\r\n    utterance.onerror = (e) => {\r\n      console.error('Speech synthesis error:', e);\r\n      this.isReading = false;\r\n      this.currentUtterance = null;\r\n    };\r\n\r\n    if (this.isReading && priority !== 'high') {\r\n      this.readingQueue.push(utterance);\r\n    } else {\r\n      this.speechSynthesis.speak(utterance);\r\n    }\r\n  }\r\n\r\n  // Navigare înapoi\r\n  navigateBack() {\r\n    if (this.navigationHistory.length > 0) {\r\n      const previousUrl = this.navigationHistory.pop();\r\n      this.speak(\"Navighez înapoi\", 'high');\r\n      window.location.href = previousUrl;\r\n    } else {\r\n      this.speak(\"Nu există istoric de navigare\", 'high');\r\n    }\r\n  }\r\n\r\n  // Listare elemente\r\n  listAllElements() {\r\n    this.updateFocusableElements();\r\n    \r\n    const totalElements = this.focusableElements.length;\r\n    const currentPosition = this.currentFocusIndex + 1;\r\n    \r\n    let summary = `Pagina conține ${totalElements} elemente interactive. `;\r\n    summary += `Ești la elementul ${currentPosition} din ${totalElements}. `;\r\n    \r\n    // Numărăm tipurile de elemente\r\n    const counts = {\r\n      buttons: document.querySelectorAll('button, [role=\"button\"]').length,\r\n      links: document.querySelectorAll('a[href]').length,\r\n      inputs: document.querySelectorAll('input, textarea, select').length,\r\n      headings: document.querySelectorAll('h1, h2, h3, h4, h5, h6').length\r\n    };\r\n    \r\n    summary += `Găsit: ${counts.buttons} butoane, ${counts.links} linkuri, `;\r\n    summary += `${counts.inputs} câmpuri de input, ${counts.headings} titluri.`;\r\n    \r\n    this.speak(summary, 'high');\r\n  }\r\n\r\n  // Navigare rapidă pentru pagini\r\n  navigateToCourses() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la cursuri\", 'high');\r\n    window.location.href = '/courses';\r\n  }\r\n\r\n  navigateToPlayground() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la playground\", 'high');\r\n    window.location.href = '/playground';\r\n  }\r\n\r\n  navigateToProfile() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la profil\", 'high');\r\n    window.location.href = '/profile';\r\n  }\r\n\r\n  goHome() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la pagina principală\", 'high');\r\n    window.location.href = '/';\r\n  }\r\n\r\n  // Funcții pentru quiz\r\n  selectQuizOption(index) {\r\n    const options = document.querySelectorAll('.question-container li');\r\n    if (options[index]) {\r\n      options[index].click();\r\n      this.speak(`Selectat răspunsul ${index + 1}`, 'high');\r\n    } else {\r\n      this.speak(`Nu există răspunsul ${index + 1}`, 'high');\r\n    }\r\n  }\r\n\r\n  // Funcții pentru editor\r\n  executeCode() {\r\n    const runButton = document.querySelector('.editor-actions button[aria-label*=\"Execută\"]');\r\n    if (runButton) {\r\n      runButton.click();\r\n      this.speak(\"Execut codul\", 'high');\r\n    } else {\r\n      this.speak(\"Butonul de execuție nu a fost găsit\", 'high');\r\n    }\r\n  }\r\n\r\n  getFeedback() {\r\n    const feedbackButton = document.querySelector('.editor-actions button[aria-label*=\"feedback\"]');\r\n    if (feedbackButton) {\r\n      feedbackButton.click();\r\n      this.speak(\"Solicit feedback AI\", 'high');\r\n    } else {\r\n      this.speak(\"Butonul de feedback nu a fost găsit\", 'high');\r\n    }\r\n  }\r\n\r\n  // Citirea informațiilor despre pagina curentă\r\n  readNavigationInfo() {\r\n    const currentUrl = window.location.pathname;\r\n    const totalElements = this.focusableElements.length;\r\n    const position = this.currentFocusIndex + 1;\r\n    \r\n    let info = `Ești pe ${this.getPageName(currentUrl)}. `;\r\n    info += `Elementul curent: ${position} din ${totalElements}. `;\r\n    info += `Folosește Tab pentru navigare sau apasă H pentru ajutor.`;\r\n    \r\n    this.speak(info, 'high');\r\n  }\r\n\r\n  getPageName(url) {\r\n    if (url === '/' || url === '') return 'pagina principală';\r\n    if (url.includes('/courses')) return 'pagina de cursuri';\r\n    if (url.includes('/playground')) return 'playground-ul de cod';\r\n    if (url.includes('/profile')) return 'pagina de profil';\r\n    if (url.includes('/login')) return 'pagina de autentificare';\r\n    if (url.includes('/register')) return 'pagina de înregistrare';\r\n    if (url.includes('/quiz')) return 'pagina de test';\r\n    return 'pagina curentă';\r\n  }\r\n\r\n  // Metodă îmbunătățită pentru citirea help-ului\r\n  readHelp() {\r\n    const currentPage = this.getPageName(window.location.pathname);\r\n    \r\n    const helpText = `\r\n      Ajutor pentru ${currentPage}.\r\n      \r\n      Comenzi esențiale:\r\n      - Tab și Shift Tab pentru navigare înainte și înapoi\r\n      - Enter pentru a activa elementul selectat\r\n      - Spațiu pentru pauză sau continuare citire\r\n      - Escape pentru oprire citire\r\n      \r\n      Navigare rapidă:\r\n      - Tastele 1, 2, 3 pentru header, conținut principal, footer\r\n      - C pentru cursuri, P pentru playground, R pentru profil, H pentru acasă\r\n      \r\n      Navigare prin tipuri:\r\n      - B pentru butoane, L pentru linkuri\r\n      - I pentru câmpuri input, T pentru titluri\r\n      \r\n      Comenzi speciale cu Alt:\r\n      - Alt H pentru acest ajutor\r\n      - Alt M pentru citirea paginii\r\n      - Alt N pentru informații navigare\r\n      - Alt S pentru viteză citire\r\n      - Alt B pentru înapoi\r\n      - Alt L pentru lista elementelor\r\n      \r\n      ${this.getPageSpecificHelp(currentPage)}\r\n    `;\r\n    \r\n    this.speak(helpText, 'high');\r\n  }\r\n\r\n  getPageSpecificHelp(pageName) {\r\n    switch (pageName) {\r\n      case 'pagina de cursuri':\r\n        return 'În această pagină: Navighează prin cursuri cu Tab. Apasă Enter pentru a selecta un curs.';\r\n        \r\n      case 'playground-ul de cod':\r\n        return 'În editor: Alt E pentru execuție, Alt F pentru feedback AI. Tab citește linia curentă.';\r\n        \r\n      case 'pagina de test':\r\n        return 'În test: Alt 1-4 pentru răspunsuri. Enter pentru verificare sau următoarea întrebare.';\r\n        \r\n      case 'pagina de profil':\r\n        return 'În profil: Navighează prin secțiuni cu Tab. Enter pentru a modifica setările.';\r\n        \r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  handleAccessibilityShortcuts(e) {\r\n    const key = this.getShortcutKey(e);\r\n    const handler = this.shortcuts.get(key);\r\n    \r\n    if (handler) {\r\n      e.preventDefault();\r\n      handler();\r\n    }\r\n  }\r\n\r\n  getShortcutKey(e) {\r\n    const parts = [];\r\n    \r\n    if (e.ctrlKey) parts.push('ctrl');\r\n    if (e.altKey) parts.push('alt');\r\n    if (e.shiftKey) parts.push('Shift');\r\n    \r\n    // Tratăm special anumite taste\r\n    let key = e.key;\r\n    if (key === ' ') key = ' ';\r\n    if (key.length === 1) key = key.toLowerCase();\r\n    \r\n    parts.push(key);\r\n    \r\n    return parts.join('+');\r\n  }\r\n\r\n  addAccessibilityStyles() {\r\n    const style = document.createElement('style');\r\n    style.id = 'accessibility-styles';\r\n    style.textContent = `\r\n      /* Stiluri pentru modul nevăzători */\r\n      body.accessibility-mode {\r\n        background: #000000 !important;\r\n        color: #ffffff !important;\r\n        font-size: 20px !important;\r\n        line-height: 1.8 !important;\r\n        font-family: Arial, sans-serif !important;\r\n      }\r\n      \r\n      body.accessibility-mode * {\r\n        animation: none !important;\r\n        transition: none !important;\r\n      }\r\n      \r\n      accessibility-focus {\r\n       outline: 4px solid #ffff00 !important;\r\n       outline-offset: 4px !important;\r\n       background-color: #000033 !important;\r\n       color: #ffffff !important;\r\n       box-shadow: 0 0 20px #ffff00 !important;\r\n       border-radius: 4px !important;\r\n       position: relative !important;\r\n       z-index: 9999 !important;\r\n     }\r\n     \r\n     /* Ascundem elementele decorative */\r\n     body.accessibility-mode .stars-background,\r\n     body.accessibility-mode .planet,\r\n     body.accessibility-mode .asteroid,\r\n     body.accessibility-mode .shooting-star,\r\n     body.accessibility-mode .code-snippet,\r\n     body.accessibility-mode .cosmic-dust,\r\n     body.accessibility-mode .twinkling-star {\r\n       display: none !important;\r\n     }\r\n     \r\n     /* Simplificăm layout-ul */\r\n     body.accessibility-mode .main-banner {\r\n       background: #000000 !important;\r\n       min-height: auto !important;\r\n       padding: 20px !important;\r\n     }\r\n     \r\n     /* Text mai vizibil */\r\n     body.accessibility-mode h1,\r\n     body.accessibility-mode h2,\r\n     body.accessibility-mode h3,\r\n     body.accessibility-mode h4,\r\n     body.accessibility-mode h5,\r\n     body.accessibility-mode h6 {\r\n       color: #ffffff !important;\r\n       text-decoration: underline !important;\r\n       margin: 20px 0 !important;\r\n     }\r\n     \r\n     body.accessibility-mode p,\r\n     body.accessibility-mode span,\r\n     body.accessibility-mode div {\r\n       color: #ffffff !important;\r\n     }\r\n     \r\n     /* Butoane mai vizibile */\r\n     body.accessibility-mode button,\r\n     body.accessibility-mode .button,\r\n     body.accessibility-mode [role=\"button\"] {\r\n       background: #333333 !important;\r\n       color: #ffffff !important;\r\n       border: 2px solid #ffffff !important;\r\n       padding: 15px 20px !important;\r\n       font-size: 18px !important;\r\n       font-weight: bold !important;\r\n       text-transform: uppercase !important;\r\n     }\r\n     \r\n     body.accessibility-mode button:hover,\r\n     body.accessibility-mode button:focus {\r\n       background: #555555 !important;\r\n     }\r\n     \r\n     /* Linkuri mai vizibile */\r\n     body.accessibility-mode a {\r\n       color: #00ffff !important;\r\n       text-decoration: underline !important;\r\n       font-weight: bold !important;\r\n     }\r\n     \r\n     body.accessibility-mode a:hover,\r\n     body.accessibility-mode a:focus {\r\n       background: #333333 !important;\r\n       padding: 2px 4px !important;\r\n     }\r\n     \r\n     /* Inputuri mai clare */\r\n     body.accessibility-mode input,\r\n     body.accessibility-mode textarea,\r\n     body.accessibility-mode select {\r\n       background: #111111 !important;\r\n       color: #ffffff !important;\r\n       border: 2px solid #ffffff !important;\r\n       padding: 10px !important;\r\n       font-size: 18px !important;\r\n     }\r\n     \r\n     body.accessibility-mode input:focus,\r\n     body.accessibility-mode textarea:focus,\r\n     body.accessibility-mode select:focus {\r\n       border-color: #ffff00 !important;\r\n       outline: 2px solid #ffff00 !important;\r\n     }\r\n     \r\n     /* Simplificăm cardurile */\r\n     body.accessibility-mode .course-card,\r\n     body.accessibility-mode .feature-card,\r\n     body.accessibility-mode .example-card {\r\n       background: #111111 !important;\r\n       border: 2px solid #ffffff !important;\r\n       margin: 10px 0 !important;\r\n       padding: 20px !important;\r\n     }\r\n     \r\n     /* Eliminăm gradiente și efecte */\r\n     body.accessibility-mode [class*=\"gradient\"] {\r\n       background: #000000 !important;\r\n     }\r\n     \r\n     /* Indicator pentru elementul curent citit */\r\n     .accessibility-reading {\r\n       background-color: #333300 !important;\r\n       outline: 2px dashed #ffff00 !important;\r\n     }\r\n     \r\n     /* Mesaje de ajutor vizibile */\r\n     .accessibility-help-popup {\r\n       position: fixed;\r\n       bottom: 20px;\r\n       right: 20px;\r\n       background: #000000;\r\n       color: #ffffff;\r\n       border: 2px solid #ffff00;\r\n       padding: 20px;\r\n       max-width: 400px;\r\n       font-size: 16px;\r\n       z-index: 10000;\r\n       border-radius: 8px;\r\n     }\r\n     \r\n     /* Simplificăm navigarea */\r\n     body.accessibility-mode nav {\r\n       background: #000000 !important;\r\n       border: 2px solid #ffffff !important;\r\n       padding: 10px !important;\r\n     }\r\n     \r\n     /* Lista de elemente focusabile */\r\n     .accessibility-element-list {\r\n       position: fixed;\r\n       left: 0;\r\n       top: 0;\r\n       width: 300px;\r\n       height: 100%;\r\n       background: #000000;\r\n       border-right: 2px solid #ffffff;\r\n       padding: 20px;\r\n       overflow-y: auto;\r\n       z-index: 9998;\r\n       display: none;\r\n     }\r\n     \r\n     body.accessibility-mode.show-element-list .accessibility-element-list {\r\n       display: block;\r\n     }\r\n   `;\r\n   document.head.appendChild(style);\r\n   document.body.classList.add('accessibility-mode');\r\n }\r\n\r\n removeAccessibilityStyles() {\r\n   const style = document.getElementById('accessibility-styles');\r\n   if (style) style.remove();\r\n   document.body.classList.remove('accessibility-mode');\r\n   \r\n   // Eliminăm toate clasele de focus\r\n   document.querySelectorAll('.accessibility-focus, .accessibility-reading').forEach(el => {\r\n     el.classList.remove('accessibility-focus', 'accessibility-reading');\r\n   });\r\n }\r\n\r\n// Adaugă aceste metode în clasa AccessibilityManager (în src/utils/AccessibilityManager.js)\r\n\r\nstopReading() {\r\n  if (this.speechSynthesis.speaking) {\r\n    this.speechSynthesis.cancel();\r\n  }\r\n  \r\n  this.isReading = false;\r\n  this.currentUtterance = null;\r\n  this.readingQueue = [];\r\n  \r\n  // Trimitem event pentru UI\r\n  document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n    detail: { isSpeaking: false }\r\n  }));\r\n}\r\n\r\nprocessQueue() {\r\n  if (this.readingQueue.length > 0 && !this.isReading) {\r\n    const nextUtterance = this.readingQueue.shift();\r\n    this.speechSynthesis.speak(nextUtterance);\r\n  }\r\n}\r\n\r\ntoggleReading() {\r\n  if (this.isReading && this.currentUtterance) {\r\n    if (this.speechSynthesis.paused) {\r\n      this.speechSynthesis.resume();\r\n      this.speak(\"Reluare citire\", 'normal');\r\n    } else {\r\n      this.speechSynthesis.pause();\r\n      this.speak(\"Pauză citire\", 'normal');\r\n    }\r\n  } else {\r\n    this.readCurrentPage();\r\n  }\r\n}\r\n\r\nreadCurrentPage() {\r\n  const pageContent = this.extractPageContent();\r\n  if (pageContent) {\r\n    this.speak(pageContent, 'high');\r\n  } else {\r\n    this.speak(\"Nu există conținut de citit pe această pagină\", 'high');\r\n  }\r\n}\r\n\r\nextractPageContent() {\r\n  let content = '';\r\n  \r\n  // Extragem titlul paginii\r\n  const title = document.querySelector('h1');\r\n  if (title) {\r\n    content += `Titlu: ${title.textContent.trim()}. `;\r\n  }\r\n  \r\n  // Extragem descrierea sau subtitlul\r\n  const description = document.querySelector('.page-description, .course-detail-description, .code-playground-description');\r\n  if (description) {\r\n    content += `${description.textContent.trim()}. `;\r\n  }\r\n  \r\n  // Extragem conținutul principal\r\n  const mainContent = document.querySelector('main, .body-content, .course-detail-content');\r\n  if (mainContent) {\r\n    // Extragem doar textul relevant, ignorând butoanele și alte elemente interactive\r\n    const paragraphs = mainContent.querySelectorAll('p, h2, h3, h4, li');\r\n    paragraphs.forEach(p => {\r\n      const text = p.textContent.trim();\r\n      if (text && text.length > 0) {\r\n        content += `${text}. `;\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Dacă suntem pe o pagină de curs, citim și lecțiile\r\n  const lessons = document.querySelectorAll('.course-preview-item, .lesson-title');\r\n  if (lessons.length > 0) {\r\n    content += 'Lecții disponibile: ';\r\n    lessons.forEach((lesson, index) => {\r\n      content += `${index + 1}. ${lesson.textContent.trim()}. `;\r\n    });\r\n  }\r\n  \r\n  // Dacă suntem pe o pagină de test, citim întrebarea curentă\r\n  const currentQuestion = document.querySelector('.question-container h3');\r\n  if (currentQuestion) {\r\n    content += `Întrebare: ${currentQuestion.textContent.trim()}. `;\r\n    \r\n    const options = document.querySelectorAll('.question-container li label');\r\n    if (options.length > 0) {\r\n      content += 'Opțiuni: ';\r\n      options.forEach((option, index) => {\r\n        content += `${index + 1}. ${option.textContent.trim()}. `;\r\n      });\r\n    }\r\n  }\r\n  \r\n  return content.trim();\r\n}\r\n\r\n// Adaugă și această metodă pentru anunțuri\r\nannounce(message, priority = 'normal') {\r\n  this.speak(message, priority);\r\n}\r\n\r\n// Adaugă getter pentru proprietatea isSpeaking\r\nget isSpeaking() {\r\n  return this.isReading || this.speechSynthesis.speaking;\r\n}\r\n\r\n// Adaugă getter pentru proprietatea isActive\r\nget isActive() {\r\n  return this.isAccessibilityMode;\r\n}\r\n\r\n// Metodă pentru citirea întrebărilor de quiz\r\nreadQuizQuestion(question, options) {\r\n  let text = `Întrebare: ${question}. `;\r\n  if (options && options.length > 0) {\r\n    text += 'Variantele de răspuns sunt: ';\r\n    options.forEach((option, index) => {\r\n      text += `${index + 1}: ${option}. `;\r\n    });\r\n  }\r\n  this.speak(text, 'high');\r\n}\r\n\r\n// Metodă pentru anunțarea rezultatului quiz-ului\r\nannounceQuizResult(score, totalQuestions) {\r\n  const percentage = Math.round((score / totalQuestions) * 100);\r\n  const text = `Test finalizat! Ai răspuns corect la ${score} din ${totalQuestions} întrebări. ` +\r\n               `Scorul tău este ${percentage}%. ` +\r\n               (percentage >= 80 ? 'Felicitări! Rezultat excelent!' : \r\n                percentage >= 60 ? 'Rezultat bun! Continuă să înveți.' : \r\n                'Nu te descuraja! Încearcă din nou pentru un rezultat mai bun.');\r\n  this.speak(text, 'high');\r\n}\r\n\r\n// Metodă pentru citirea liniilor de cod\r\nreadCodeLine(lineNumber) {\r\n  const editor = document.querySelector('.monaco-editor');\r\n  if (editor) {\r\n    // Implementare simplificată - în practică ar trebui să accesăm API-ul Monaco\r\n    this.speak(`Linia ${lineNumber} din editor`, 'normal');\r\n  }\r\n}\r\n\r\n// Metodă pentru anunțarea schimbărilor în cod\r\nannounceCodeChange(newCode, position) {\r\n  if (position && position.line) {\r\n    this.speak(`Cod modificat la linia ${position.line}`, 'normal');\r\n  }\r\n}\r\n\r\n}\r\n\r\n// Exportăm o instanță singleton\r\nconst accessibilityManager = new AccessibilityManager();\r\nexport default accessibilityManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}