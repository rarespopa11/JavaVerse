{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport '../styles/Quiz.css'; // Linia cerută\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [isFinished, setIsFinished] = useState(false);\n\n  // Extrage `courseId` din URL\n  const courseId = window.location.pathname.split('/')[2]; // Assuming the URL is in the format \"/courses/:courseId/test\"\n\n  useEffect(() => {\n    console.log(`Fetching questions for courseId: ${courseId}`);\n    fetch(`http://localhost:5000/api/courses/${courseId}`).then(response => response.json()).then(data => {\n      if (data.course && data.course.questions) {\n        setQuestions(data.course.questions);\n      }\n    }).catch(error => console.error('Error fetching questions:', error));\n  }, [courseId]);\n  const handleAnswerChange = (index, answerIndex) => {\n    const updatedAnswers = [...selectedAnswers];\n    updatedAnswers[index] = answerIndex;\n    setSelectedAnswers(updatedAnswers);\n  };\n  const handleNext = () => {\n    if (selectedAnswers[currentQuestionIndex] === undefined) {\n      alert('Te rugăm să selectezi un răspuns!');\n      return;\n    }\n    if (selectedAnswers[currentQuestionIndex] === questions[currentQuestionIndex].correctAnswerIndex) {\n      setScore(score + 1);\n    }\n    if (currentQuestionIndex < questions.length - 1) {\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setIsFinished(true);\n    }\n  };\n  const handleRestart = () => {\n    setScore(0);\n    setCurrentQuestionIndex(0);\n    setSelectedAnswers([]);\n    setIsFinished(false);\n  };\n  if (questions.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 38\n  }, this);\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\xCEntrebarea \", currentQuestionIndex + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), !isFinished ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.options.map((option, index) => {\n          let className = '';\n          if (selectedAnswers[currentQuestionIndex] === index) {\n            // Adaugă clasa selected la răspunsul ales\n            className = 'selected';\n          }\n          if (isFinished) {\n            if (index === questions[currentQuestionIndex].correctAnswerIndex) {\n              // Răspuns corect - verde\n              className = 'correct';\n            } else if (selectedAnswers[currentQuestionIndex] === index) {\n              // Răspuns greșit - roșu\n              className = 'incorrect';\n            }\n          }\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: className,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: `question-${currentQuestionIndex}-option-${index}`,\n              name: `question-${currentQuestionIndex}`,\n              value: index,\n              checked: selectedAnswers[currentQuestionIndex] === index,\n              onChange: () => handleAnswerChange(currentQuestionIndex, index)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `question-${currentQuestionIndex}-option-${index}`,\n              children: option\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNext,\n        children: \"Next\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Testul S-a \\xCEncheiat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Punctajul t\\u0103u: \", score, \" din \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        children: \"\\xCEncepe din nou\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(Quiz, \"HoNbgA9uHSOM8PS9B8ihzfaFKi8=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Quiz","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","score","setScore","isFinished","setIsFinished","courseId","window","location","pathname","split","console","log","fetch","then","response","json","data","course","catch","error","handleAnswerChange","index","answerIndex","updatedAnswers","handleNext","undefined","alert","correctAnswerIndex","length","handleRestart","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","className","question","options","map","option","type","id","name","value","checked","onChange","htmlFor","onClick","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/Quiz.js"],"sourcesContent":["import '../styles/Quiz.css'; // Linia cerută\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction Quiz() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [isFinished, setIsFinished] = useState(false);\r\n\r\n  // Extrage `courseId` din URL\r\n  const courseId = window.location.pathname.split('/')[2];  // Assuming the URL is in the format \"/courses/:courseId/test\"\r\n\r\n  useEffect(() => {\r\n    console.log(`Fetching questions for courseId: ${courseId}`);\r\n    fetch(`http://localhost:5000/api/courses/${courseId}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.course && data.course.questions) {\r\n          setQuestions(data.course.questions);\r\n        }\r\n      })\r\n      .catch((error) => console.error('Error fetching questions:', error));\r\n  }, [courseId]);\r\n\r\n  const handleAnswerChange = (index, answerIndex) => {\r\n    const updatedAnswers = [...selectedAnswers];\r\n    updatedAnswers[index] = answerIndex;\r\n    setSelectedAnswers(updatedAnswers);\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (selectedAnswers[currentQuestionIndex] === undefined) {\r\n      alert('Te rugăm să selectezi un răspuns!');\r\n      return;\r\n    }\r\n\r\n    if (selectedAnswers[currentQuestionIndex] === questions[currentQuestionIndex].correctAnswerIndex) {\r\n      setScore(score + 1);\r\n    }\r\n\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n    } else {\r\n      setIsFinished(true);\r\n    }\r\n  };\r\n\r\n  const handleRestart = () => {\r\n    setScore(0);\r\n    setCurrentQuestionIndex(0);\r\n    setSelectedAnswers([]);\r\n    setIsFinished(false);\r\n  };\r\n\r\n  if (questions.length === 0) return <div>Loading questions...</div>;\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      <h2>Întrebarea {currentQuestionIndex + 1}</h2>\r\n\r\n      {!isFinished ? (\r\n        <div className=\"question-container\">\r\n          <h3>{currentQuestion.question}</h3>\r\n          <ul>\r\n            {currentQuestion.options.map((option, index) => {\r\n              let className = '';\r\n              if (selectedAnswers[currentQuestionIndex] === index) {\r\n                // Adaugă clasa selected la răspunsul ales\r\n                className = 'selected';\r\n              }\r\n              if (isFinished) {\r\n                if (index === questions[currentQuestionIndex].correctAnswerIndex) {\r\n                  // Răspuns corect - verde\r\n                  className = 'correct';\r\n                } else if (selectedAnswers[currentQuestionIndex] === index) {\r\n                  // Răspuns greșit - roșu\r\n                  className = 'incorrect';\r\n                }\r\n              }\r\n              return (\r\n                <li\r\n                  key={index}\r\n                  className={className}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={`question-${currentQuestionIndex}-option-${index}`}\r\n                    name={`question-${currentQuestionIndex}`}\r\n                    value={index}\r\n                    checked={selectedAnswers[currentQuestionIndex] === index}\r\n                    onChange={() => handleAnswerChange(currentQuestionIndex, index)}\r\n                  />\r\n                  <label htmlFor={`question-${currentQuestionIndex}-option-${index}`}>{option}</label>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <button onClick={handleNext}>Next</button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"result-container\">\r\n          <h3>Testul S-a Încheiat</h3>\r\n          <p>Punctajul tău: {score} din {questions.length}</p>\r\n          <button onClick={handleRestart}>Începe din nou</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}