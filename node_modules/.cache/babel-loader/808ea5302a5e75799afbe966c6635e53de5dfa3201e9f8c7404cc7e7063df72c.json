{"ast":null,"code":"// src/utils/AccessibilityManager.js\nclass AccessibilityManager {\n  constructor() {\n    this.isAccessibilityMode = false;\n    this.speechSynthesis = window.speechSynthesis;\n    this.currentUtterance = null;\n    this.voice = null;\n    this.isReading = false;\n    this.readingQueue = [];\n    this.shortcuts = new Map();\n    this.focusedElement = null;\n    this.navigationMode = 'normal';\n    this.currentFocusIndex = 0;\n    this.focusableElements = [];\n    this.navigationHistory = [];\n    this.readingSpeed = 1.0;\n\n    // Mod de editare\n    this.isEditMode = false;\n    this.currentEditElement = null;\n    this.lastTypedChar = '';\n    this.typingTimer = null;\n\n    // Setări pentru citire live\n    this.liveReadingEnabled = true;\n    this.readFullWords = true;\n    this.charEchoEnabled = true;\n    this.initializeVoice();\n    this.setupGlobalListeners();\n    this.registerShortcuts();\n  }\n  initializeVoice() {\n    const setVoice = () => {\n      const voices = this.speechSynthesis.getVoices();\n\n      // Lista de voci românești preferate (în ordinea preferinței)\n      const romanianVoiceNames = ['Microsoft Andrei - Romanian (Romania)', 'Microsoft Ioana - Romanian (Romania)', 'Google română', 'Romanian Romania', 'Romanian Female', 'Romanian Male'];\n\n      // Căutăm mai întâi după nume specific\n      let selectedVoice = null;\n      for (const voiceName of romanianVoiceNames) {\n        selectedVoice = voices.find(voice => voice.name.toLowerCase().includes(voiceName.toLowerCase()));\n        if (selectedVoice) break;\n      }\n\n      // Dacă nu găsim după nume, căutăm după cod de limbă\n      if (!selectedVoice) {\n        selectedVoice = voices.find(voice => voice.lang === 'ro-RO') || voices.find(voice => voice.lang.startsWith('ro')) || voices.find(voice => voice.lang.includes('ro'));\n      }\n\n      // Fallback la prima voce disponibilă\n      this.voice = selectedVoice || voices[0];\n\n      // Afișăm informații despre vocea selectată\n      if (this.voice) {\n        console.log(`Voce selectată: ${this.voice.name} (${this.voice.lang})`);\n\n        // Anunțăm utilizatorul despre vocea selectată\n        if (this.voice.lang.startsWith('ro')) {\n          console.log('✓ Voce românească activată cu succes!');\n        } else {\n          console.warn('⚠ Nu s-a găsit o voce românească. Folosesc:', this.voice.name);\n          console.log('Sugestie: Instalați o voce românească în sistemul de operare.');\n        }\n      }\n\n      // Listăm toate vocile disponibile pentru debugging\n      console.log('Voci disponibile:');\n      voices.forEach(voice => {\n        if (voice.lang.includes('ro')) {\n          console.log(`  ✓ ${voice.name} - ${voice.lang} (Română)`);\n        }\n      });\n    };\n\n    // Încercăm să setăm vocea imediat\n    if (this.speechSynthesis.getVoices().length > 0) {\n      setVoice();\n    } else {\n      // Așteptăm ca vocile să se încarce\n      this.speechSynthesis.addEventListener('voiceschanged', setVoice);\n    }\n\n    // Forțăm o reîncărcare după 100ms pentru siguranță\n    setTimeout(() => {\n      if (!this.voice || !this.voice.lang.includes('ro')) {\n        setVoice();\n      }\n    }, 100);\n  }\n  setupGlobalListeners() {\n    document.addEventListener('keydown', e => {\n      // Alt + A pentru activarea modului\n      if (e.altKey && e.key === 'a') {\n        e.preventDefault();\n        e.stopPropagation();\n        this.toggleAccessibilityMode();\n        return;\n      }\n      if (!this.isAccessibilityMode) return;\n\n      // În modul editare, permitem tastarea normală\n      if (this.isEditMode) {\n        this.handleEditModeKeydown(e);\n        return;\n      }\n\n      // Prevenim comportamentul default doar pentru taste speciale în modul navigare\n      if (['Tab', 'Enter', ' ', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      this.handleAccessibilityShortcuts(e);\n    });\n\n    // Listener pentru input în modul editare\n    document.addEventListener('input', e => {\n      if (this.isAccessibilityMode && this.isEditMode && this.liveReadingEnabled) {\n        this.handleLiveReading(e);\n      }\n    });\n\n    // Actualizăm lista de elemente focusabile când se schimbă DOM-ul\n    const observer = new MutationObserver(() => {\n      if (this.isAccessibilityMode && !this.isEditMode) {\n        this.updateFocusableElements();\n      }\n    });\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n  registerShortcuts() {\n    // Comenzi de navigare principală (nu se schimbă)\n    this.shortcuts.set('Tab', () => this.navigateNext());\n    this.shortcuts.set('Shift+Tab', () => this.navigatePrevious());\n    this.shortcuts.set('Enter', () => this.activateElement());\n    this.shortcuts.set(' ', () => this.toggleReading()); // Space\n    this.shortcuts.set('Escape', () => this.stopReading());\n\n    // Navigare rapidă cu F-keys pentru a evita conflictele cu tastarea\n    this.shortcuts.set('F1', () => this.readHelp());\n    this.shortcuts.set('F2', () => this.navigateToSection('header'));\n    this.shortcuts.set('F3', () => this.navigateToSection('main'));\n    this.shortcuts.set('F4', () => this.navigateToSection('footer'));\n\n    // Navigare în pagini - folosim Alt + literă pentru a evita conflictele\n    this.shortcuts.set('alt+c', () => this.navigateToCourses());\n    this.shortcuts.set('alt+p', () => this.navigateToPlayground());\n    this.shortcuts.set('alt+r', () => this.navigateToProfile());\n    this.shortcuts.set('alt+h', () => this.goHome());\n\n    // Comenzi utilitare cu Alt\n    this.shortcuts.set('alt+m', () => this.readCurrentPage());\n    this.shortcuts.set('alt+n', () => this.readNavigationInfo());\n    this.shortcuts.set('alt+s', () => this.adjustSpeed());\n    this.shortcuts.set('alt+b', () => this.navigateBack());\n    this.shortcuts.set('alt+l', () => this.listAllElements());\n\n    // Navigare prin elemente similare cu Ctrl pentru a evita conflictele\n    this.shortcuts.set('ctrl+b', () => this.nextButton());\n    this.shortcuts.set('ctrl+l', () => this.nextLink());\n    this.shortcuts.set('ctrl+i', () => this.nextInput());\n    this.shortcuts.set('ctrl+t', () => this.nextHeading());\n\n    // Navigare în quiz\n    this.shortcuts.set('alt+1', () => this.selectQuizOption(0));\n    this.shortcuts.set('alt+2', () => this.selectQuizOption(1));\n    this.shortcuts.set('alt+3', () => this.selectQuizOption(2));\n    this.shortcuts.set('alt+4', () => this.selectQuizOption(3));\n\n    // Comenzi pentru editor de cod\n    this.shortcuts.set('alt+e', () => this.executeCode());\n    this.shortcuts.set('alt+f', () => this.getFeedback());\n\n    // Comenzi noi pentru modul editare\n    this.shortcuts.set('alt+q', () => this.readCurrentLine());\n    this.shortcuts.set('alt+w', () => this.readCurrentWord());\n    this.shortcuts.set('alt+d', () => this.toggleLiveReading());\n  }\n  handleEditModeKeydown(e) {\n    // În modul editare, permitem majoritatea tastelor\n\n    // Comenzi speciale care funcționează și în modul editare\n    if (e.key === 'Escape') {\n      e.preventDefault();\n      this.exitEditMode();\n      return;\n    }\n\n    // Citire linie curentă cu Alt+Q\n    if (e.altKey && e.key === 'q') {\n      e.preventDefault();\n      this.readCurrentLine();\n      return;\n    }\n\n    // Citire cuvânt curent cu Alt+W\n    if (e.altKey && e.key === 'w') {\n      e.preventDefault();\n      this.readCurrentWord();\n      return;\n    }\n\n    // Pentru editor de cod - citire linie la navigare sus/jos\n    if (this.currentEditElement && this.currentEditElement.classList.contains('monaco-editor')) {\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n        // Amânăm citirea pentru a permite Monaco să actualizeze poziția\n        setTimeout(() => {\n          this.readCurrentCodeLine();\n        }, 50);\n      }\n    }\n\n    // Pentru input-uri normale - citire la navigare stânga/dreapta\n    if (['ArrowLeft', 'ArrowRight'].includes(e.key)) {\n      setTimeout(() => {\n        this.readCharacterAtCursor();\n      }, 50);\n    }\n  }\n  handleLiveReading(e) {\n    const target = e.target;\n    if (!['INPUT', 'TEXTAREA'].includes(target.tagName) && !target.classList.contains('monaco-editor')) {\n      return;\n    }\n\n    // Anulăm timer-ul anterior\n    if (this.typingTimer) {\n      clearTimeout(this.typingTimer);\n    }\n\n    // Citim caracterul tastat imediat\n    if (this.charEchoEnabled && e.data) {\n      this.speak(this.getCharDescription(e.data), 'high');\n    }\n\n    // Setăm un timer pentru a citi cuvântul complet\n    if (this.readFullWords) {\n      this.typingTimer = setTimeout(() => {\n        const word = this.getCurrentWord(target);\n        if (word && word.length > 1) {\n          this.speak(`Cuvânt: ${word}`, 'normal');\n        }\n      }, 500);\n    }\n  }\n  getCharDescription(char) {\n    // Descrieri speciale pentru caractere\n    const charDescriptions = {\n      ' ': 'spațiu',\n      '.': 'punct',\n      ',': 'virgulă',\n      ';': 'punct și virgulă',\n      ':': 'două puncte',\n      '!': 'semnul exclamării',\n      '?': 'semnul întrebării',\n      '\"': 'ghilimele',\n      \"'\": 'apostrof',\n      '(': 'paranteză deschisă',\n      ')': 'paranteză închisă',\n      '[': 'paranteză pătrată deschisă',\n      ']': 'paranteză pătrată închisă',\n      '{': 'acoladă deschisă',\n      '}': 'acoladă închisă',\n      '<': 'mai mic',\n      '>': 'mai mare',\n      '=': 'egal',\n      '+': 'plus',\n      '-': 'minus',\n      '*': 'asterisc',\n      '/': 'slash',\n      '\\\\': 'backslash',\n      '@': 'arobase',\n      '#': 'diez',\n      '$': 'dolar',\n      '%': 'procent',\n      '^': 'circumflex',\n      '&': 'ampersand',\n      '_': 'underscore',\n      '|': 'bară verticală',\n      '~': 'tildă',\n      '`': 'accent grav',\n      '\\n': 'linie nouă',\n      '\\t': 'tab'\n    };\n    return charDescriptions[char] || char;\n  }\n  getCurrentWord(element) {\n    const value = element.value || element.textContent;\n    const cursorPos = element.selectionStart || value.length;\n\n    // Găsim limitele cuvântului curent\n    let start = cursorPos;\n    let end = cursorPos;\n    while (start > 0 && !/\\s/.test(value[start - 1])) {\n      start--;\n    }\n    while (end < value.length && !/\\s/.test(value[end])) {\n      end++;\n    }\n    return value.substring(start, end).trim();\n  }\n  readCurrentLine() {\n    if (!this.currentEditElement) {\n      this.speak(\"Nu ești într-un câmp de editare\", 'high');\n      return;\n    }\n    const element = this.currentEditElement;\n    if (element.tagName === 'TEXTAREA' || element.classList.contains('monaco-editor')) {\n      const value = element.value || element.textContent;\n      const cursorPos = element.selectionStart || 0;\n\n      // Găsim linia curentă\n      const lines = value.split('\\n');\n      let currentLineIndex = 0;\n      let charCount = 0;\n      for (let i = 0; i < lines.length; i++) {\n        charCount += lines[i].length + 1; // +1 pentru \\n\n        if (charCount > cursorPos) {\n          currentLineIndex = i;\n          break;\n        }\n      }\n      const currentLine = lines[currentLineIndex];\n      if (currentLine.trim()) {\n        this.speak(`Linia ${currentLineIndex + 1}: ${currentLine}`, 'high');\n      } else {\n        this.speak(`Linia ${currentLineIndex + 1}: linie goală`, 'high');\n      }\n    } else {\n      // Pentru input simplu, citim tot conținutul\n      const value = element.value;\n      if (value) {\n        this.speak(`Conținut: ${value}`, 'high');\n      } else {\n        this.speak(\"Câmp gol\", 'high');\n      }\n    }\n  }\n  readCurrentWord() {\n    if (!this.currentEditElement) {\n      this.speak(\"Nu ești într-un câmp de editare\", 'high');\n      return;\n    }\n    const word = this.getCurrentWord(this.currentEditElement);\n    if (word) {\n      this.speak(`Cuvânt: ${word}`, 'high');\n    } else {\n      this.speak(\"Nu există cuvânt la poziția curentă\", 'high');\n    }\n  }\n  readCharacterAtCursor() {\n    if (!this.currentEditElement) return;\n    const element = this.currentEditElement;\n    const value = element.value;\n    const cursorPos = element.selectionStart;\n    if (cursorPos < value.length) {\n      const char = value[cursorPos];\n      this.speak(this.getCharDescription(char), 'high');\n    } else {\n      this.speak(\"Sfârșit de text\", 'high');\n    }\n  }\n  readCurrentCodeLine() {\n    // Implementare specifică pentru Monaco Editor\n    if (this.currentEditElement && this.currentEditElement.classList.contains('monaco-editor')) {\n      // În practică, aici ar trebui să accesăm API-ul Monaco\n      // Pentru moment, folosim o implementare simplificată\n      this.speak(\"Citire linie cod în dezvoltare\", 'normal');\n    }\n  }\n  toggleLiveReading() {\n    this.liveReadingEnabled = !this.liveReadingEnabled;\n    this.speak(this.liveReadingEnabled ? \"Citire live activată\" : \"Citire live dezactivată\", 'high');\n  }\n  activateElement() {\n    if (!this.focusedElement) {\n      this.speak(\"Niciun element selectat\", 'high');\n      return;\n    }\n    const tagName = this.focusedElement.tagName.toLowerCase();\n\n    // Pentru inputuri, permitem editarea\n    if (['input', 'textarea', 'select'].includes(tagName)) {\n      this.enterEditMode(this.focusedElement);\n      return;\n    }\n\n    // Pentru alte elemente, simulăm click\n    this.speak(\"Activez elementul\", 'normal');\n    if (this.focusedElement.click) {\n      this.focusedElement.click();\n    } else if (tagName === 'a') {\n      window.location.href = this.focusedElement.href;\n    }\n  }\n  enterEditMode(element) {\n    this.isEditMode = true;\n    this.currentEditElement = element;\n    element.focus();\n    const announcement = `Mod editare activat. ${this.getEditModeInstructions(element)}`;\n    this.speak(announcement, 'high');\n\n    // Dezactivăm temporar navigarea\n    document.dispatchEvent(new CustomEvent('editModeChanged', {\n      detail: {\n        isEditMode: true,\n        element: element\n      }\n    }));\n  }\n  exitEditMode() {\n    if (!this.isEditMode) return;\n    this.isEditMode = false;\n    if (this.currentEditElement) {\n      this.currentEditElement.blur();\n      this.speak(\"Mod editare dezactivat. Navigare reactivată\", 'high');\n\n      // Re-focusăm elementul pentru navigare\n      this.setFocus(this.currentEditElement);\n      this.currentEditElement = null;\n    }\n    document.dispatchEvent(new CustomEvent('editModeChanged', {\n      detail: {\n        isEditMode: false\n      }\n    }));\n  }\n  getEditModeInstructions(element) {\n    const tagName = element.tagName.toLowerCase();\n    let instructions = \"\";\n    switch (tagName) {\n      case 'input':\n        const inputType = element.type;\n        if (inputType === 'text' || inputType === 'email') {\n          instructions = \"Tastează textul dorit. \";\n        } else if (inputType === 'password') {\n          instructions = \"Tastează parola. Caracterele nu vor fi citite din motive de securitate. \";\n        }\n        break;\n      case 'textarea':\n        instructions = \"Tastează textul. Folosește Enter pentru linie nouă. \";\n        break;\n      case 'select':\n        instructions = \"Folosește săgețile sus/jos pentru a selecta o opțiune. \";\n        break;\n    }\n    instructions += \"Alt+Q pentru a citi linia curentă. \";\n    instructions += \"Alt+W pentru a citi cuvântul curent. \";\n    instructions += \"Escape pentru a ieși din modul editare.\";\n    return instructions;\n  }\n  toggleAccessibilityMode() {\n    this.isAccessibilityMode = !this.isAccessibilityMode;\n    if (this.isAccessibilityMode) {\n      this.speak(\"Modul pentru nevăzători activat. Bine ai venit în JavaVerse!\", 'high');\n      this.addAccessibilityStyles();\n      this.updateFocusableElements();\n      setTimeout(() => {\n        this.readWelcomeMessage();\n      }, 2000);\n    } else {\n      this.speak(\"Modul pentru nevăzători dezactivat.\");\n      this.removeAccessibilityStyles();\n      this.stopReading();\n\n      // Ieșim din modul editare dacă e activ\n      if (this.isEditMode) {\n        this.exitEditMode();\n      }\n    }\n    document.dispatchEvent(new CustomEvent('accessibilityModeChanged', {\n      detail: {\n        isActive: this.isAccessibilityMode\n      }\n    }));\n  }\n  readWelcomeMessage() {\n    const welcomeText = `\n      Bine ai venit în modul pentru nevăzători JavaVerse!\n      \n      Navigare principală:\n      - Tab pentru următorul element\n      - Shift + Tab pentru elementul anterior\n      - Enter pentru a activa elementul selectat\n      - Spațiu pentru pauză sau continuare citire\n      - Escape pentru a opri citirea\n      \n      Navigare rapidă:\n      - F1 pentru meniul de ajutor\n      - F2, F3, F4 pentru header, conținut principal și footer\n      \n      Navigare în site cu Alt:\n      - Alt + C pentru cursuri\n      - Alt + P pentru playground\n      - Alt + R pentru profil\n      - Alt + H pentru pagina principală\n      \n      Navigare prin elemente cu Ctrl:\n      - Ctrl + B pentru următorul buton\n      - Ctrl + L pentru următorul link\n      - Ctrl + I pentru următorul câmp de input\n      - Ctrl + T pentru următorul titlu\n      \n      În modul editare:\n      - Alt + Q pentru a citi linia curentă\n      - Alt + W pentru a citi cuvântul curent\n      - Alt + D pentru a comuta citirea live\n      - Escape pentru a ieși din editare\n      \n      Alte comenzi utile:\n      - Alt + M pentru citirea paginii curente\n      - Alt + N pentru informații de navigare\n      - Alt + S pentru ajustarea vitezei de citire\n      - Alt + B pentru înapoi\n      - Alt + L pentru lista tuturor elementelor\n      \n      În quiz folosește Alt + 1, 2, 3 sau 4 pentru variante.\n      În editor folosește Alt + E pentru execuție și Alt + F pentru feedback.\n    `;\n    this.speak(welcomeText, 'high');\n  }\n  handleAccessibilityShortcuts(e) {\n    // Nu procesăm shortcut-uri în modul editare\n    if (this.isEditMode) return;\n    const key = this.getShortcutKey(e);\n    const handler = this.shortcuts.get(key);\n    if (handler) {\n      e.preventDefault();\n      handler();\n    }\n  }\n  getShortcutKey(e) {\n    const parts = [];\n    if (e.ctrlKey) parts.push('ctrl');\n    if (e.altKey) parts.push('alt');\n    if (e.shiftKey) parts.push('Shift');\n\n    // Tratăm special anumite taste\n    let key = e.key;\n    if (key === ' ') key = ' ';\n    if (key.length === 1) key = key.toLowerCase();\n    parts.push(key);\n    return parts.join('+');\n  }\n\n  // Restul metodelor rămân neschimbate...\n  // (updateFocusableElements, navigateNext, navigatePrevious, setFocus, readElementInfo, \n  //  navigateToSection, nextButton, nextLink, nextInput, nextHeading, etc.)\n\n  updateFocusableElements() {\n    const selectors = ['a[href]:not([disabled])', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])', 'textarea:not([disabled])', '[tabindex]:not([tabindex=\"-1\"])', '.course-card', '.question-container li', '.feature-card', '.example-card', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', '[role=\"button\"]:not([disabled])', '[role=\"link\"]', '[role=\"navigation\"]', '[role=\"main\"]'];\n    this.focusableElements = Array.from(document.querySelectorAll(selectors.join(', '))).filter(el => {\n      // Verificăm dacă elementul este vizibil\n      const rect = el.getBoundingClientRect();\n      return rect.width > 0 && rect.height > 0 && el.offsetParent !== null;\n    }).sort((a, b) => {\n      // Sortăm elementele după poziția lor în pagină\n      const rectA = a.getBoundingClientRect();\n      const rectB = b.getBoundingClientRect();\n      if (Math.abs(rectA.top - rectB.top) < 10) {\n        return rectA.left - rectB.left;\n      }\n      return rectA.top - rectB.top;\n    });\n  }\n  navigateNext() {\n    this.updateFocusableElements();\n    if (this.focusableElements.length === 0) {\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\n      return;\n    }\n    this.currentFocusIndex = (this.currentFocusIndex + 1) % this.focusableElements.length;\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\n  }\n  navigatePrevious() {\n    this.updateFocusableElements();\n    if (this.focusableElements.length === 0) {\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\n      return;\n    }\n    this.currentFocusIndex = this.currentFocusIndex === 0 ? this.focusableElements.length - 1 : this.currentFocusIndex - 1;\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\n  }\n  setFocus(element) {\n    if (!element) return;\n\n    // Eliminăm focus-ul anterior\n    document.querySelectorAll('.accessibility-focus').forEach(el => {\n      el.classList.remove('accessibility-focus');\n    });\n\n    // Setăm noul focus\n    this.focusedElement = element;\n    element.classList.add('accessibility-focus');\n\n    // Scroll smooth în vedere\n    element.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n      inline: 'nearest'\n    });\n\n    // Focus real pentru inputuri doar dacă nu suntem în edit mode\n    if (['INPUT', 'TEXTAREA', 'SELECT'].includes(element.tagName) && !this.isEditMode) {\n      // Nu dăm focus automat pentru a evita intrarea accidentală în modul editare\n    }\n\n    // Citim informații despre element\n    this.readElementInfo(element);\n  }\n  readElementInfo(element) {\n    var _element$textContent, _document$querySelect, _document$querySelect2, _element$options$elem, _document$querySelect3;\n    let description = '';\n    const tagName = element.tagName.toLowerCase();\n    const ariaLabel = element.getAttribute('aria-label');\n    const text = (_element$textContent = element.textContent) === null || _element$textContent === void 0 ? void 0 : _element$textContent.trim();\n\n    // Prioritizăm aria-label\n    if (ariaLabel) {\n      description = ariaLabel;\n    } else {\n      // Descrieri specifice pentru fiecare tip de element\n      switch (tagName) {\n        case 'button':\n          description = `Buton: ${text || 'Fără text'}`;\n          break;\n        case 'a':\n          description = `Link: ${text || 'Fără text'}`;\n          break;\n        case 'input':\n          const inputType = element.type;\n          const inputLabel = (_document$querySelect = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.textContent;\n          const inputValue = element.value;\n          if (inputType === 'text' || inputType === 'email' || inputType === 'password') {\n            description = `Câmp ${inputType}: ${inputLabel || element.placeholder || 'Fără etichetă'}`;\n            if (inputValue) {\n              description += `. Valoare curentă: ${inputType === 'password' ? 'parolă introdusă' : inputValue}`;\n            }\n          } else if (inputType === 'radio' || inputType === 'checkbox') {\n            description = `${inputType === 'radio' ? 'Opțiune' : 'Bifă'}: ${inputLabel || text}. ${element.checked ? 'Selectat' : 'Neselectat'}`;\n          }\n          break;\n        case 'select':\n          const selectLabel = (_document$querySelect2 = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.textContent;\n          const selectedOption = (_element$options$elem = element.options[element.selectedIndex]) === null || _element$options$elem === void 0 ? void 0 : _element$options$elem.text;\n          description = `Listă derulantă: ${selectLabel || 'Fără etichetă'}. Selectat: ${selectedOption || 'Nimic'}`;\n          break;\n        case 'textarea':\n          const textareaLabel = (_document$querySelect3 = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.textContent;\n          description = `Zonă de text: ${textareaLabel || element.placeholder || 'Fără etichetă'}`;\n          if (element.value) {\n            description += `. ${element.value.length} caractere introduse`;\n          }\n          break;\n        case 'h1':\n        case 'h2':\n        case 'h3':\n        case 'h4':\n        case 'h5':\n        case 'h6':\n          const level = tagName.charAt(1);\n          description = `Titlu nivel ${level}: ${text}`;\n          break;\n        default:\n          // Pentru elemente custom (carduri, etc.)\n          if (element.classList.contains('course-card')) {\n            var _element$querySelecto, _element$querySelecto2;\n            const title = (_element$querySelecto = element.querySelector('.course-title')) === null || _element$querySelecto === void 0 ? void 0 : _element$querySelecto.textContent;\n            const desc = (_element$querySelecto2 = element.querySelector('.course-description')) === null || _element$querySelecto2 === void 0 ? void 0 : _element$querySelecto2.textContent;\n            description = `Curs: ${title}. ${desc}`;\n          } else if (element.classList.contains('feature-card')) {\n            var _element$querySelecto3, _element$querySelecto4;\n            const title = (_element$querySelecto3 = element.querySelector('h3')) === null || _element$querySelecto3 === void 0 ? void 0 : _element$querySelecto3.textContent;\n            const desc = (_element$querySelecto4 = element.querySelector('p')) === null || _element$querySelecto4 === void 0 ? void 0 : _element$querySelecto4.textContent;\n            description = `Caracteristică: ${title}. ${desc}`;\n          } else if (element.classList.contains('example-card')) {\n            var _element$querySelecto5;\n            const title = ((_element$querySelecto5 = element.querySelector('.card-title')) === null || _element$querySelecto5 === void 0 ? void 0 : _element$querySelecto5.textContent) || text;\n            description = `Exemplu de cod: ${title}`;\n          } else {\n            description = text || `Element ${tagName}`;\n          }\n      }\n    }\n\n    // Adăugăm indicații pentru interacțiune\n    if (['button', 'a'].includes(tagName) || element.getAttribute('role') === 'button') {\n      description += \". Apasă Enter pentru a activa\";\n    } else if (['input', 'textarea', 'select'].includes(tagName)) {\n      description += \". Apasă Enter pentru a edita\";\n    }\n    this.speak(description, 'high');\n  }\n  navigateToSection(sectionName) {\n    let selector;\n    let announcement;\n    switch (sectionName) {\n      case 'header':\n        selector = 'header, [role=\"banner\"], .jv-header';\n        announcement = \"Navighez la header\";\n        break;\n      case 'main':\n        selector = 'main, [role=\"main\"], .body-content';\n        announcement = \"Navighez la conținutul principal\";\n        break;\n      case 'footer':\n        selector = 'footer, [role=\"contentinfo\"], .jv-footer';\n        announcement = \"Navighez la footer\";\n        break;\n    }\n    const section = document.querySelector(selector);\n    if (section) {\n      this.speak(announcement, 'high');\n\n      // Găsim primul element focusabil din secțiune\n      const firstFocusable = section.querySelector('a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n      if (firstFocusable) {\n        const index = this.focusableElements.indexOf(firstFocusable);\n        if (index !== -1) {\n          this.currentFocusIndex = index;\n          this.setFocus(firstFocusable);\n        }\n      } else {\n        section.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start'\n        });\n        this.speak(\"Secțiune fără elemente interactive\", 'normal');\n      }\n    } else {\n      this.speak(\"Secțiunea nu a fost găsită\", 'high');\n    }\n  }\n\n  // Navigare prin tipuri de elemente\n  nextButton() {\n    this.navigateToNextOfType('button, [role=\"button\"]', 'buton');\n  }\n  nextLink() {\n    this.navigateToNextOfType('a[href]', 'link');\n  }\n  nextInput() {\n    this.navigateToNextOfType('input, textarea, select', 'câmp de input');\n  }\n  nextHeading() {\n    this.navigateToNextOfType('h1, h2, h3, h4, h5, h6', 'titlu');\n  }\n  navigateToNextOfType(selector, typeName) {\n    const elements = Array.from(document.querySelectorAll(selector)).filter(el => el.offsetParent !== null);\n    if (elements.length === 0) {\n      this.speak(`Nu există ${typeName} pe această pagină`, 'high');\n      return;\n    }\n    let nextIndex = -1;\n    if (this.focusedElement) {\n      const currentTypeIndex = elements.indexOf(this.focusedElement);\n      if (currentTypeIndex !== -1) {\n        nextIndex = (currentTypeIndex + 1) % elements.length;\n      } else {\n        // Găsim următorul element de acest tip după elementul curent\n        const currentRect = this.focusedElement.getBoundingClientRect();\n        for (let i = 0; i < elements.length; i++) {\n          const rect = elements[i].getBoundingClientRect();\n          if (rect.top > currentRect.top || Math.abs(rect.top - currentRect.top) < 10 && rect.left > currentRect.left) {\n            nextIndex = i;\n            break;\n          }\n        }\n      }\n    }\n    if (nextIndex === -1) {\n      nextIndex = 0;\n    }\n    const targetElement = elements[nextIndex];\n    const globalIndex = this.focusableElements.indexOf(targetElement);\n    if (globalIndex !== -1) {\n      this.currentFocusIndex = globalIndex;\n      this.setFocus(targetElement);\n    }\n  }\n\n  // Ajustare viteză citire\n  adjustSpeed() {\n    const speeds = [0.7, 0.85, 1.0, 1.15, 1.3];\n    const currentIndex = speeds.indexOf(this.readingSpeed);\n    const nextIndex = (currentIndex + 1) % speeds.length;\n    this.readingSpeed = speeds[nextIndex];\n    this.speak(`Viteză de citire: ${Math.round(this.readingSpeed * 100)}%`, 'high');\n  }\n\n  // Îmbunătățire pentru speak cu viteză ajustabilă\n  speak(text, priority = 'normal') {\n    if (!text || text.trim() === '') return;\n    if (priority === 'high') {\n      this.stopReading();\n    }\n    const utterance = new SpeechSynthesisUtterance(text);\n    if (this.voice) {\n      utterance.voice = this.voice;\n    }\n    utterance.rate = this.readingSpeed;\n    utterance.pitch = 1.0;\n    utterance.volume = 1.0;\n    utterance.onstart = () => {\n      this.isReading = true;\n      this.currentUtterance = utterance;\n\n      // Trimitem event pentru UI\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n        detail: {\n          isSpeaking: true\n        }\n      }));\n    };\n    utterance.onend = () => {\n      this.isReading = false;\n      this.currentUtterance = null;\n      this.processQueue();\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n        detail: {\n          isSpeaking: false\n        }\n      }));\n    };\n    utterance.onerror = e => {\n      console.error('Speech synthesis error:', e);\n      this.isReading = false;\n      this.currentUtterance = null;\n    };\n    if (this.isReading && priority !== 'high') {\n      this.readingQueue.push(utterance);\n    } else {\n      this.speechSynthesis.speak(utterance);\n    }\n  }\n\n  // Navigare înapoi\n  navigateBack() {\n    if (this.navigationHistory.length > 0) {\n      const previousUrl = this.navigationHistory.pop();\n      this.speak(\"Navighez înapoi\", 'high');\n      window.location.href = previousUrl;\n    } else {\n      this.speak(\"Nu există istoric de navigare\", 'high');\n    }\n  }\n\n  // Listare elemente\n  listAllElements() {\n    this.updateFocusableElements();\n    const totalElements = this.focusableElements.length;\n    const currentPosition = this.currentFocusIndex + 1;\n    let summary = `Pagina conține ${totalElements} elemente interactive. `;\n    summary += `Ești la elementul ${currentPosition} din ${totalElements}. `;\n\n    // Numărăm tipurile de elemente\n    const counts = {\n      buttons: document.querySelectorAll('button, [role=\"button\"]').length,\n      links: document.querySelectorAll('a[href]').length,\n      inputs: document.querySelectorAll('input, textarea, select').length,\n      headings: document.querySelectorAll('h1, h2, h3, h4, h5, h6').length\n    };\n    summary += `Găsit: ${counts.buttons} butoane, ${counts.links} linkuri, `;\n    summary += `${counts.inputs} câmpuri de input, ${counts.headings} titluri.`;\n    this.speak(summary, 'high');\n  }\n\n  // Navigare rapidă pentru pagini\n  navigateToCourses() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la cursuri\", 'high');\n    window.location.href = '/courses';\n  }\n  navigateToPlayground() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la playground\", 'high');\n    window.location.href = '/playground';\n  }\n  navigateToProfile() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la profil\", 'high');\n    window.location.href = '/profile';\n  }\n  goHome() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la pagina principală\", 'high');\n    window.location.href = '/';\n  }\n\n  // Funcții pentru quiz\n  selectQuizOption(index) {\n    const options = document.querySelectorAll('.question-container li');\n    if (options[index]) {\n      options[index].click();\n      this.speak(`Selectat răspunsul ${index + 1}`, 'high');\n    } else {\n      this.speak(`Nu există răspunsul ${index + 1}`, 'high');\n    }\n  }\n\n  // Funcții pentru editor\n  executeCode() {\n    const runButton = document.querySelector('.editor-actions button[aria-label*=\"Execută\"]');\n    if (runButton) {\n      runButton.click();\n      this.speak(\"Execut codul\", 'high');\n    } else {\n      this.speak(\"Butonul de execuție nu a fost găsit\", 'high');\n    }\n  }\n  getFeedback() {\n    const feedbackButton = document.querySelector('.editor-actions button[aria-label*=\"feedback\"]');\n    if (feedbackButton) {\n      feedbackButton.click();\n      this.speak(\"Solicit feedback AI\", 'high');\n    } else {\n      this.speak(\"Butonul de feedback nu a fost găsit\", 'high');\n    }\n  }\n\n  // Citirea informațiilor despre pagina curentă\n  readNavigationInfo() {\n    const currentUrl = window.location.pathname;\n    const totalElements = this.focusableElements.length;\n    const position = this.currentFocusIndex + 1;\n    let info = `Ești pe ${this.getPageName(currentUrl)}. `;\n    info += `Elementul curent: ${position} din ${totalElements}. `;\n    info += `Folosește Tab pentru navigare sau apasă F1 pentru ajutor.`;\n    this.speak(info, 'high');\n  }\n  getPageName(url) {\n    if (url === '/' || url === '') return 'pagina principală';\n    if (url.includes('/courses')) return 'pagina de cursuri';\n    if (url.includes('/playground')) return 'playground-ul de cod';\n    if (url.includes('/profile')) return 'pagina de profil';\n    if (url.includes('/login')) return 'pagina de autentificare';\n    if (url.includes('/register')) return 'pagina de înregistrare';\n    if (url.includes('/quiz')) return 'pagina de test';\n    return 'pagina curentă';\n  }\n\n  // Metodă îmbunătățită pentru citirea help-ului\n  readHelp() {\n    const currentPage = this.getPageName(window.location.pathname);\n    const helpText = `\n      Ajutor pentru ${currentPage}.\n      \n      Comenzi esențiale:\n      - Tab și Shift Tab pentru navigare înainte și înapoi\n      - Enter pentru a activa elementul selectat\n      - Spațiu pentru pauză sau continuare citire\n      - Escape pentru oprire citire\n      \n      Navigare rapidă cu taste funcționale:\n      - F1 pentru acest ajutor\n      - F2, F3, F4 pentru header, conținut principal, footer\n      \n      Navigare în site cu Alt:\n      - Alt C pentru cursuri\n      - Alt P pentru playground\n      - Alt R pentru profil\n      - Alt H pentru acasă\n      \n      Navigare prin tipuri cu Ctrl:\n      - Ctrl B pentru butoane\n      - Ctrl L pentru linkuri\n      - Ctrl I pentru câmpuri input\n      - Ctrl T pentru titluri\n      \n      În modul editare:\n      - Alt Q pentru a citi linia curentă\n      - Alt W pentru a citi cuvântul curent\n      - Alt D pentru a comuta citirea live\n      - Escape pentru a ieși din editare\n      \n      Comenzi speciale:\n      - Alt M pentru citirea paginii\n      - Alt N pentru informații navigare\n      - Alt S pentru viteză citire\n      - Alt B pentru înapoi\n      - Alt L pentru lista elementelor\n      \n      ${this.getPageSpecificHelp(currentPage)}\n    `;\n    this.speak(helpText, 'high');\n  }\n  getPageSpecificHelp(pageName) {\n    switch (pageName) {\n      case 'pagina de cursuri':\n        return 'În această pagină: Navighează prin cursuri cu Tab. Apasă Enter pentru a selecta un curs.';\n      case 'playground-ul de cod':\n        return 'În editor: Alt E pentru execuție, Alt F pentru feedback AI. În modul editare, săgețile sus/jos citesc linia curentă.';\n      case 'pagina de test':\n        return 'În test: Alt 1-4 pentru răspunsuri. Enter pentru verificare sau următoarea întrebare.';\n      case 'pagina de profil':\n        return 'În profil: Navighează prin secțiuni cu Tab. Enter pentru a modifica setările.';\n      case 'pagina de autentificare':\n      case 'pagina de înregistrare':\n        return 'Completează câmpurile cu Tab și Enter. În modul editare, tastează normal și folosește Escape când termini.';\n      default:\n        return '';\n    }\n  }\n  stopReading() {\n    if (this.speechSynthesis.speaking) {\n      this.speechSynthesis.cancel();\n    }\n    this.isReading = false;\n    this.currentUtterance = null;\n    this.readingQueue = [];\n\n    // Trimitem event pentru UI\n    document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n      detail: {\n        isSpeaking: false\n      }\n    }));\n  }\n  processQueue() {\n    if (this.readingQueue.length > 0 && !this.isReading) {\n      const nextUtterance = this.readingQueue.shift();\n      this.speechSynthesis.speak(nextUtterance);\n    }\n  }\n  toggleReading() {\n    if (this.isReading && this.currentUtterance) {\n      if (this.speechSynthesis.paused) {\n        this.speechSynthesis.resume();\n        this.speak(\"Reluare citire\", 'normal');\n      } else {\n        this.speechSynthesis.pause();\n        this.speak(\"Pauză citire\", 'normal');\n      }\n    } else {\n      this.readCurrentPage();\n    }\n  }\n  readCurrentPage() {\n    const pageContent = this.extractPageContent();\n    if (pageContent) {\n      this.speak(pageContent, 'high');\n    } else {\n      this.speak(\"Nu există conținut de citit pe această pagină\", 'high');\n    }\n  }\n  extractPageContent() {\n    let content = '';\n\n    // Extragem titlul paginii\n    const title = document.querySelector('h1');\n    if (title) {\n      content += `Titlu: ${title.textContent.trim()}. `;\n    }\n\n    // Extragem descrierea sau subtitlul\n    const description = document.querySelector('.page-description, .course-detail-description, .code-playground-description');\n    if (description) {\n      content += `${description.textContent.trim()}. `;\n    }\n\n    // Extragem conținutul principal\n    const mainContent = document.querySelector('main, .body-content, .course-detail-content');\n    if (mainContent) {\n      // Extragem doar textul relevant, ignorând butoanele și alte elemente interactive\n      const paragraphs = mainContent.querySelectorAll('p, h2, h3, h4, li');\n      paragraphs.forEach(p => {\n        const text = p.textContent.trim();\n        if (text && text.length > 0) {\n          content += `${text}. `;\n        }\n      });\n    }\n\n    // Dacă suntem pe o pagină de curs, citim și lecțiile\n    const lessons = document.querySelectorAll('.course-preview-item, .lesson-title');\n    if (lessons.length > 0) {\n      content += 'Lecții disponibile: ';\n      lessons.forEach((lesson, index) => {\n        content += `${index + 1}. ${lesson.textContent.trim()}. `;\n      });\n    }\n\n    // Dacă suntem pe o pagină de test, citim întrebarea curentă\n    const currentQuestion = document.querySelector('.question-container h3');\n    if (currentQuestion) {\n      content += `Întrebare: ${currentQuestion.textContent.trim()}. `;\n      const options = document.querySelectorAll('.question-container li label');\n      if (options.length > 0) {\n        content += 'Opțiuni: ';\n        options.forEach((option, index) => {\n          content += `${index + 1}. ${option.textContent.trim()}. `;\n        });\n      }\n    }\n    return content.trim();\n  }\n\n  // Adaugă și această metodă pentru anunțuri\n  announce(message, priority = 'normal') {\n    this.speak(message, priority);\n  }\n\n  // Adaugă getter pentru proprietatea isSpeaking\n  get isSpeaking() {\n    return this.isReading || this.speechSynthesis.speaking;\n  }\n\n  // Adaugă getter pentru proprietatea isActive\n  get isActive() {\n    return this.isAccessibilityMode;\n  }\n\n  // Metodă pentru citirea întrebărilor de quiz\n  readQuizQuestion(question, options) {\n    let text = `Întrebare: ${question}. `;\n    if (options && options.length > 0) {\n      text += 'Variantele de răspuns sunt: ';\n      options.forEach((option, index) => {\n        text += `${index + 1}: ${option}. `;\n      });\n    }\n    this.speak(text, 'high');\n  }\n\n  // Metodă pentru anunțarea rezultatului quiz-ului\n  announceQuizResult(score, totalQuestions) {\n    const percentage = Math.round(score / totalQuestions * 100);\n    const text = `Test finalizat! Ai răspuns corect la ${score} din ${totalQuestions} întrebări. ` + `Scorul tău este ${percentage}%. ` + (percentage >= 80 ? 'Felicitări! Rezultat excelent!' : percentage >= 60 ? 'Rezultat bun! Continuă să înveți.' : 'Nu te descuraja! Încearcă din nou pentru un rezultat mai bun.');\n    this.speak(text, 'high');\n  }\n\n  // Metodă pentru citirea liniilor de cod în Monaco Editor\n  readCodeLine(lineNumber, content) {\n    if (content) {\n      this.speak(`Linia ${lineNumber}: ${content}`, 'normal');\n    } else {\n      this.speak(`Linia ${lineNumber}: linie goală`, 'normal');\n    }\n  }\n\n  // Metodă pentru anunțarea schimbărilor în cod\n  announceCodeChange(changeType, position) {\n    if (changeType === 'insert') {\n      this.speak(\"Text adăugat\", 'normal');\n    } else if (changeType === 'delete') {\n      this.speak(\"Text șters\", 'normal');\n    }\n  }\n  addAccessibilityStyles() {\n    const style = document.createElement('style');\n    style.id = 'accessibility-styles';\n    style.textContent = `\n      /* Stiluri pentru modul nevăzători */\n      body.accessibility-mode {\n        background: #000000 !important;\n        color: #ffffff !important;\n        font-size: 20px !important;\n        line-height: 1.8 !important;\n        font-family: Arial, sans-serif !important;\n      }\n      \n      body.accessibility-mode * {\n        animation: none !important;\n        transition: none !important;\n      }\n      \n      .accessibility-focus {\n        outline: 4px solid #ffff00 !important;\n        outline-offset: 4px !important;\n        background-color: #000033 !important;\n        color: #ffffff !important;\n        box-shadow: 0 0 20px #ffff00 !important;\n        border-radius: 4px !important;\n        position: relative !important;\n        z-index: 9999 !important;\n      }\n      \n      /* Indicator pentru modul editare */\n      .accessibility-edit-mode {\n        outline: 4px dashed #00ff00 !important;\n        outline-offset: 4px !important;\n        background-color: #003300 !important;\n      }\n      \n      /* Ascundem elementele decorative */\n      body.accessibility-mode .stars-background,\n      body.accessibility-mode .planet,\n      body.accessibility-mode .asteroid,\n      body.accessibility-mode .shooting-star,\n      body.accessibility-mode .code-snippet,\n      body.accessibility-mode .cosmic-dust,\n      body.accessibility-mode .twinkling-star {\n        display: none !important;\n      }\n      \n      /* Simplificăm layout-ul */\n      body.accessibility-mode .main-banner {\n        background: #000000 !important;\n        min-height: auto !important;\n        padding: 20px !important;\n      }\n      \n      /* Text mai vizibil */\n      body.accessibility-mode h1,\n      body.accessibility-mode h2,\n      body.accessibility-mode h3,\n      body.accessibility-mode h4,\n      body.accessibility-mode h5,\n      body.accessibility-mode h6 {\n        color: #ffffff !important;\n        text-decoration: underline !important;\n        margin: 20px 0 !important;\n      }\n      \n      body.accessibility-mode p,\n      body.accessibility-mode span,\n      body.accessibility-mode div {\n        color: #ffffff !important;\n      }\n      \n      /* Butoane mai vizibile */\n      body.accessibility-mode button,\n      body.accessibility-mode .button,\n      body.accessibility-mode [role=\"button\"] {\n        background: #333333 !important;\n        color: #ffffff !important;\n        border: 2px solid #ffffff !important;\n        padding: 15px 20px !important;\n        font-size: 18px !important;\n        font-weight: bold !important;\n        text-transform: uppercase !important;\n      }\n      \n      body.accessibility-mode button:hover,\n      body.accessibility-mode button:focus {\n        background: #555555 !important;\n      }\n      \n      /* Linkuri mai vizibile */\n      body.accessibility-mode a {\n        color: #00ffff !important;\n        text-decoration: underline !important;\n        font-weight: bold !important;\n      }\n      \n      body.accessibility-mode a:hover,\n      body.accessibility-mode a:focus {\n        background: #333333 !important;\n        padding: 2px 4px !important;\n      }\n      \n      /* Inputuri mai clare */\n      body.accessibility-mode input,\n      body.accessibility-mode textarea,\n      body.accessibility-mode select {\n        background: #111111 !important;\n        color: #ffffff !important;\n        border: 2px solid #ffffff !important;\n        padding: 10px !important;\n        font-size: 18px !important;\n      }\n      \n      body.accessibility-mode input:focus,\n      body.accessibility-mode textarea:focus,\n      body.accessibility-mode select:focus {\n        border-color: #ffff00 !important;\n        outline: 2px solid #ffff00 !important;\n      }\n      \n      /* Stil special pentru modul editare */\n      body.accessibility-mode input.accessibility-edit-mode,\n      body.accessibility-mode textarea.accessibility-edit-mode,\n      body.accessibility-mode select.accessibility-edit-mode {\n        border-color: #00ff00 !important;\n        outline: 2px solid #00ff00 !important;\n      }\n      \n      /* Simplificăm cardurile */\n      body.accessibility-mode .course-card,\n      body.accessibility-mode .feature-card,\n      body.accessibility-mode .example-card {\n        background: #111111 !important;\n        border: 2px solid #ffffff !important;\n        margin: 10px 0 !important;\n        padding: 20px !important;\n      }\n      \n      /* Eliminăm gradiente și efecte */\n      body.accessibility-mode [class*=\"gradient\"] {\n        background: #000000 !important;\n      }\n      \n      /* Indicator pentru elementul curent citit */\n      .accessibility-reading {\n        background-color: #333300 !important;\n        outline: 2px dashed #ffff00 !important;\n      }\n      \n      /* Mesaje de ajutor vizibile */\n      .accessibility-help-popup {\n        position: fixed;\n        bottom: 20px;\n        right: 20px;\n        background: #000000;\n        color: #ffffff;\n        border: 2px solid #ffff00;\n        padding: 20px;\n        max-width: 400px;\n        font-size: 16px;\n        z-index: 10000;\n        border-radius: 8px;\n      }\n      \n      /* Simplificăm navigarea */\n      body.accessibility-mode nav {\n        background: #000000 !important;\n        border: 2px solid #ffffff !important;\n        padding: 10px !important;\n      }\n      \n      /* Lista de elemente focusabile */\n      .accessibility-element-list {\n        position: fixed;\n        left: 0;\n        top: 0;\n        width: 300px;\n        height: 100%;\n        background: #000000;\n        border-right: 2px solid #ffffff;\n        padding: 20px;\n        overflow-y: auto;\n        z-index: 9998;\n        display: none;\n      }\n      \n      body.accessibility-mode.show-element-list .accessibility-element-list {\n        display: block;\n      }\n      \n      /* Indicator pentru modul editare activ */\n      .accessibility-edit-indicator {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        background: #00ff00;\n        color: #000000;\n        padding: 10px 20px;\n        font-weight: bold;\n        z-index: 10001;\n        border-radius: 5px;\n        display: none;\n      }\n      \n      body.accessibility-mode.editing .accessibility-edit-indicator {\n        display: block;\n      }\n    `;\n    document.head.appendChild(style);\n    document.body.classList.add('accessibility-mode');\n  }\n  removeAccessibilityStyles() {\n    const style = document.getElementById('accessibility-styles');\n    if (style) style.remove();\n    document.body.classList.remove('accessibility-mode');\n\n    // Eliminăm toate clasele de focus\n    document.querySelectorAll('.accessibility-focus, .accessibility-reading, .accessibility-edit-mode').forEach(el => {\n      el.classList.remove('accessibility-focus', 'accessibility-reading', 'accessibility-edit-mode');\n    });\n  }\n}\n\n// Exportăm o instanță singleton\nconst accessibilityManager = new AccessibilityManager();\nexport default accessibilityManager;","map":{"version":3,"names":["AccessibilityManager","constructor","isAccessibilityMode","speechSynthesis","window","currentUtterance","voice","isReading","readingQueue","shortcuts","Map","focusedElement","navigationMode","currentFocusIndex","focusableElements","navigationHistory","readingSpeed","isEditMode","currentEditElement","lastTypedChar","typingTimer","liveReadingEnabled","readFullWords","charEchoEnabled","initializeVoice","setupGlobalListeners","registerShortcuts","setVoice","voices","getVoices","romanianVoiceNames","selectedVoice","voiceName","find","name","toLowerCase","includes","lang","startsWith","console","log","warn","forEach","length","addEventListener","setTimeout","document","e","altKey","key","preventDefault","stopPropagation","toggleAccessibilityMode","handleEditModeKeydown","handleAccessibilityShortcuts","handleLiveReading","observer","MutationObserver","updateFocusableElements","observe","body","childList","subtree","set","navigateNext","navigatePrevious","activateElement","toggleReading","stopReading","readHelp","navigateToSection","navigateToCourses","navigateToPlayground","navigateToProfile","goHome","readCurrentPage","readNavigationInfo","adjustSpeed","navigateBack","listAllElements","nextButton","nextLink","nextInput","nextHeading","selectQuizOption","executeCode","getFeedback","readCurrentLine","readCurrentWord","toggleLiveReading","exitEditMode","classList","contains","readCurrentCodeLine","readCharacterAtCursor","target","tagName","clearTimeout","data","speak","getCharDescription","word","getCurrentWord","char","charDescriptions","element","value","textContent","cursorPos","selectionStart","start","end","test","substring","trim","lines","split","currentLineIndex","charCount","i","currentLine","enterEditMode","click","location","href","focus","announcement","getEditModeInstructions","dispatchEvent","CustomEvent","detail","blur","setFocus","instructions","inputType","type","addAccessibilityStyles","readWelcomeMessage","removeAccessibilityStyles","isActive","welcomeText","getShortcutKey","handler","get","parts","ctrlKey","push","shiftKey","join","selectors","Array","from","querySelectorAll","filter","el","rect","getBoundingClientRect","width","height","offsetParent","sort","a","b","rectA","rectB","Math","abs","top","left","remove","add","scrollIntoView","behavior","block","inline","readElementInfo","_element$textContent","_document$querySelect","_document$querySelect2","_element$options$elem","_document$querySelect3","description","ariaLabel","getAttribute","text","inputLabel","querySelector","id","inputValue","placeholder","checked","selectLabel","selectedOption","options","selectedIndex","textareaLabel","level","charAt","_element$querySelecto","_element$querySelecto2","title","desc","_element$querySelecto3","_element$querySelecto4","_element$querySelecto5","sectionName","selector","section","firstFocusable","index","indexOf","navigateToNextOfType","typeName","elements","nextIndex","currentTypeIndex","currentRect","targetElement","globalIndex","speeds","currentIndex","round","priority","utterance","SpeechSynthesisUtterance","rate","pitch","volume","onstart","isSpeaking","onend","processQueue","onerror","error","previousUrl","pop","totalElements","currentPosition","summary","counts","buttons","links","inputs","headings","runButton","feedbackButton","currentUrl","pathname","position","info","getPageName","url","currentPage","helpText","getPageSpecificHelp","pageName","speaking","cancel","nextUtterance","shift","paused","resume","pause","pageContent","extractPageContent","content","mainContent","paragraphs","p","lessons","lesson","currentQuestion","option","announce","message","readQuizQuestion","question","announceQuizResult","score","totalQuestions","percentage","readCodeLine","lineNumber","announceCodeChange","changeType","style","createElement","head","appendChild","getElementById","accessibilityManager"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/utils/AccessibilityManager.js"],"sourcesContent":["// src/utils/AccessibilityManager.js\r\nclass AccessibilityManager {\r\n  constructor() {\r\n    this.isAccessibilityMode = false;\r\n    this.speechSynthesis = window.speechSynthesis;\r\n    this.currentUtterance = null;\r\n    this.voice = null;\r\n    this.isReading = false;\r\n    this.readingQueue = [];\r\n    this.shortcuts = new Map();\r\n    this.focusedElement = null;\r\n    this.navigationMode = 'normal';\r\n    this.currentFocusIndex = 0;\r\n    this.focusableElements = [];\r\n    this.navigationHistory = [];\r\n    this.readingSpeed = 1.0;\r\n    \r\n    // Mod de editare\r\n    this.isEditMode = false;\r\n    this.currentEditElement = null;\r\n    this.lastTypedChar = '';\r\n    this.typingTimer = null;\r\n    \r\n    // Setări pentru citire live\r\n    this.liveReadingEnabled = true;\r\n    this.readFullWords = true;\r\n    this.charEchoEnabled = true;\r\n    \r\n    this.initializeVoice();\r\n    this.setupGlobalListeners();\r\n    this.registerShortcuts();\r\n  }\r\n\r\n  initializeVoice() {\r\n    const setVoice = () => {\r\n      const voices = this.speechSynthesis.getVoices();\r\n      \r\n      // Lista de voci românești preferate (în ordinea preferinței)\r\n      const romanianVoiceNames = [\r\n        'Microsoft Andrei - Romanian (Romania)',\r\n        'Microsoft Ioana - Romanian (Romania)',\r\n        'Google română',\r\n        'Romanian Romania',\r\n        'Romanian Female',\r\n        'Romanian Male'\r\n      ];\r\n      \r\n      // Căutăm mai întâi după nume specific\r\n      let selectedVoice = null;\r\n      for (const voiceName of romanianVoiceNames) {\r\n        selectedVoice = voices.find(voice => \r\n          voice.name.toLowerCase().includes(voiceName.toLowerCase())\r\n        );\r\n        if (selectedVoice) break;\r\n      }\r\n      \r\n      // Dacă nu găsim după nume, căutăm după cod de limbă\r\n      if (!selectedVoice) {\r\n        selectedVoice = voices.find(voice => voice.lang === 'ro-RO') || \r\n                       voices.find(voice => voice.lang.startsWith('ro')) ||\r\n                       voices.find(voice => voice.lang.includes('ro'));\r\n      }\r\n      \r\n      // Fallback la prima voce disponibilă\r\n      this.voice = selectedVoice || voices[0];\r\n      \r\n      // Afișăm informații despre vocea selectată\r\n      if (this.voice) {\r\n        console.log(`Voce selectată: ${this.voice.name} (${this.voice.lang})`);\r\n        \r\n        // Anunțăm utilizatorul despre vocea selectată\r\n        if (this.voice.lang.startsWith('ro')) {\r\n          console.log('✓ Voce românească activată cu succes!');\r\n        } else {\r\n          console.warn('⚠ Nu s-a găsit o voce românească. Folosesc:', this.voice.name);\r\n          console.log('Sugestie: Instalați o voce românească în sistemul de operare.');\r\n        }\r\n      }\r\n      \r\n      // Listăm toate vocile disponibile pentru debugging\r\n      console.log('Voci disponibile:');\r\n      voices.forEach(voice => {\r\n        if (voice.lang.includes('ro')) {\r\n          console.log(`  ✓ ${voice.name} - ${voice.lang} (Română)`);\r\n        }\r\n      });\r\n    };\r\n\r\n    // Încercăm să setăm vocea imediat\r\n    if (this.speechSynthesis.getVoices().length > 0) {\r\n      setVoice();\r\n    } else {\r\n      // Așteptăm ca vocile să se încarce\r\n      this.speechSynthesis.addEventListener('voiceschanged', setVoice);\r\n    }\r\n    \r\n    // Forțăm o reîncărcare după 100ms pentru siguranță\r\n    setTimeout(() => {\r\n      if (!this.voice || !this.voice.lang.includes('ro')) {\r\n        setVoice();\r\n      }\r\n    }, 100);\r\n  }\r\n\r\n  setupGlobalListeners() {\r\n    document.addEventListener('keydown', (e) => {\r\n      // Alt + A pentru activarea modului\r\n      if (e.altKey && e.key === 'a') {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.toggleAccessibilityMode();\r\n        return;\r\n      }\r\n\r\n      if (!this.isAccessibilityMode) return;\r\n\r\n      // În modul editare, permitem tastarea normală\r\n      if (this.isEditMode) {\r\n        this.handleEditModeKeydown(e);\r\n        return;\r\n      }\r\n\r\n      // Prevenim comportamentul default doar pentru taste speciale în modul navigare\r\n      if (['Tab', 'Enter', ' ', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      }\r\n\r\n      this.handleAccessibilityShortcuts(e);\r\n    });\r\n\r\n    // Listener pentru input în modul editare\r\n    document.addEventListener('input', (e) => {\r\n      if (this.isAccessibilityMode && this.isEditMode && this.liveReadingEnabled) {\r\n        this.handleLiveReading(e);\r\n      }\r\n    });\r\n\r\n    // Actualizăm lista de elemente focusabile când se schimbă DOM-ul\r\n    const observer = new MutationObserver(() => {\r\n      if (this.isAccessibilityMode && !this.isEditMode) {\r\n        this.updateFocusableElements();\r\n      }\r\n    });\r\n\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  registerShortcuts() {\r\n    // Comenzi de navigare principală (nu se schimbă)\r\n    this.shortcuts.set('Tab', () => this.navigateNext());\r\n    this.shortcuts.set('Shift+Tab', () => this.navigatePrevious());\r\n    this.shortcuts.set('Enter', () => this.activateElement());\r\n    this.shortcuts.set(' ', () => this.toggleReading()); // Space\r\n    this.shortcuts.set('Escape', () => this.stopReading());\r\n    \r\n    // Navigare rapidă cu F-keys pentru a evita conflictele cu tastarea\r\n    this.shortcuts.set('F1', () => this.readHelp());\r\n    this.shortcuts.set('F2', () => this.navigateToSection('header'));\r\n    this.shortcuts.set('F3', () => this.navigateToSection('main'));\r\n    this.shortcuts.set('F4', () => this.navigateToSection('footer'));\r\n    \r\n    // Navigare în pagini - folosim Alt + literă pentru a evita conflictele\r\n    this.shortcuts.set('alt+c', () => this.navigateToCourses());\r\n    this.shortcuts.set('alt+p', () => this.navigateToPlayground());\r\n    this.shortcuts.set('alt+r', () => this.navigateToProfile());\r\n    this.shortcuts.set('alt+h', () => this.goHome());\r\n    \r\n    // Comenzi utilitare cu Alt\r\n    this.shortcuts.set('alt+m', () => this.readCurrentPage());\r\n    this.shortcuts.set('alt+n', () => this.readNavigationInfo());\r\n    this.shortcuts.set('alt+s', () => this.adjustSpeed());\r\n    this.shortcuts.set('alt+b', () => this.navigateBack());\r\n    this.shortcuts.set('alt+l', () => this.listAllElements());\r\n    \r\n    // Navigare prin elemente similare cu Ctrl pentru a evita conflictele\r\n    this.shortcuts.set('ctrl+b', () => this.nextButton());\r\n    this.shortcuts.set('ctrl+l', () => this.nextLink());\r\n    this.shortcuts.set('ctrl+i', () => this.nextInput());\r\n    this.shortcuts.set('ctrl+t', () => this.nextHeading());\r\n    \r\n    // Navigare în quiz\r\n    this.shortcuts.set('alt+1', () => this.selectQuizOption(0));\r\n    this.shortcuts.set('alt+2', () => this.selectQuizOption(1));\r\n    this.shortcuts.set('alt+3', () => this.selectQuizOption(2));\r\n    this.shortcuts.set('alt+4', () => this.selectQuizOption(3));\r\n    \r\n    // Comenzi pentru editor de cod\r\n    this.shortcuts.set('alt+e', () => this.executeCode());\r\n    this.shortcuts.set('alt+f', () => this.getFeedback());\r\n    \r\n    // Comenzi noi pentru modul editare\r\n    this.shortcuts.set('alt+q', () => this.readCurrentLine());\r\n    this.shortcuts.set('alt+w', () => this.readCurrentWord());\r\n    this.shortcuts.set('alt+d', () => this.toggleLiveReading());\r\n  }\r\n\r\n  handleEditModeKeydown(e) {\r\n    // În modul editare, permitem majoritatea tastelor\r\n    \r\n    // Comenzi speciale care funcționează și în modul editare\r\n    if (e.key === 'Escape') {\r\n      e.preventDefault();\r\n      this.exitEditMode();\r\n      return;\r\n    }\r\n    \r\n    // Citire linie curentă cu Alt+Q\r\n    if (e.altKey && e.key === 'q') {\r\n      e.preventDefault();\r\n      this.readCurrentLine();\r\n      return;\r\n    }\r\n    \r\n    // Citire cuvânt curent cu Alt+W\r\n    if (e.altKey && e.key === 'w') {\r\n      e.preventDefault();\r\n      this.readCurrentWord();\r\n      return;\r\n    }\r\n    \r\n    // Pentru editor de cod - citire linie la navigare sus/jos\r\n    if (this.currentEditElement && this.currentEditElement.classList.contains('monaco-editor')) {\r\n      if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\r\n        // Amânăm citirea pentru a permite Monaco să actualizeze poziția\r\n        setTimeout(() => {\r\n          this.readCurrentCodeLine();\r\n        }, 50);\r\n      }\r\n    }\r\n    \r\n    // Pentru input-uri normale - citire la navigare stânga/dreapta\r\n    if (['ArrowLeft', 'ArrowRight'].includes(e.key)) {\r\n      setTimeout(() => {\r\n        this.readCharacterAtCursor();\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  handleLiveReading(e) {\r\n    const target = e.target;\r\n    \r\n    if (!['INPUT', 'TEXTAREA'].includes(target.tagName) && \r\n        !target.classList.contains('monaco-editor')) {\r\n      return;\r\n    }\r\n    \r\n    // Anulăm timer-ul anterior\r\n    if (this.typingTimer) {\r\n      clearTimeout(this.typingTimer);\r\n    }\r\n    \r\n    // Citim caracterul tastat imediat\r\n    if (this.charEchoEnabled && e.data) {\r\n      this.speak(this.getCharDescription(e.data), 'high');\r\n    }\r\n    \r\n    // Setăm un timer pentru a citi cuvântul complet\r\n    if (this.readFullWords) {\r\n      this.typingTimer = setTimeout(() => {\r\n        const word = this.getCurrentWord(target);\r\n        if (word && word.length > 1) {\r\n          this.speak(`Cuvânt: ${word}`, 'normal');\r\n        }\r\n      }, 500);\r\n    }\r\n  }\r\n\r\n  getCharDescription(char) {\r\n    // Descrieri speciale pentru caractere\r\n    const charDescriptions = {\r\n      ' ': 'spațiu',\r\n      '.': 'punct',\r\n      ',': 'virgulă',\r\n      ';': 'punct și virgulă',\r\n      ':': 'două puncte',\r\n      '!': 'semnul exclamării',\r\n      '?': 'semnul întrebării',\r\n      '\"': 'ghilimele',\r\n      \"'\": 'apostrof',\r\n      '(': 'paranteză deschisă',\r\n      ')': 'paranteză închisă',\r\n      '[': 'paranteză pătrată deschisă',\r\n      ']': 'paranteză pătrată închisă',\r\n      '{': 'acoladă deschisă',\r\n      '}': 'acoladă închisă',\r\n      '<': 'mai mic',\r\n      '>': 'mai mare',\r\n      '=': 'egal',\r\n      '+': 'plus',\r\n      '-': 'minus',\r\n      '*': 'asterisc',\r\n      '/': 'slash',\r\n      '\\\\': 'backslash',\r\n      '@': 'arobase',\r\n      '#': 'diez',\r\n      '$': 'dolar',\r\n      '%': 'procent',\r\n      '^': 'circumflex',\r\n      '&': 'ampersand',\r\n      '_': 'underscore',\r\n      '|': 'bară verticală',\r\n      '~': 'tildă',\r\n      '`': 'accent grav',\r\n      '\\n': 'linie nouă',\r\n      '\\t': 'tab'\r\n    };\r\n    \r\n    return charDescriptions[char] || char;\r\n  }\r\n\r\n  getCurrentWord(element) {\r\n    const value = element.value || element.textContent;\r\n    const cursorPos = element.selectionStart || value.length;\r\n    \r\n    // Găsim limitele cuvântului curent\r\n    let start = cursorPos;\r\n    let end = cursorPos;\r\n    \r\n    while (start > 0 && !/\\s/.test(value[start - 1])) {\r\n      start--;\r\n    }\r\n    \r\n    while (end < value.length && !/\\s/.test(value[end])) {\r\n      end++;\r\n    }\r\n    \r\n    return value.substring(start, end).trim();\r\n  }\r\n\r\n  readCurrentLine() {\r\n    if (!this.currentEditElement) {\r\n      this.speak(\"Nu ești într-un câmp de editare\", 'high');\r\n      return;\r\n    }\r\n    \r\n    const element = this.currentEditElement;\r\n    \r\n    if (element.tagName === 'TEXTAREA' || element.classList.contains('monaco-editor')) {\r\n      const value = element.value || element.textContent;\r\n      const cursorPos = element.selectionStart || 0;\r\n      \r\n      // Găsim linia curentă\r\n      const lines = value.split('\\n');\r\n      let currentLineIndex = 0;\r\n      let charCount = 0;\r\n      \r\n      for (let i = 0; i < lines.length; i++) {\r\n        charCount += lines[i].length + 1; // +1 pentru \\n\r\n        if (charCount > cursorPos) {\r\n          currentLineIndex = i;\r\n          break;\r\n        }\r\n      }\r\n      \r\n      const currentLine = lines[currentLineIndex];\r\n      if (currentLine.trim()) {\r\n        this.speak(`Linia ${currentLineIndex + 1}: ${currentLine}`, 'high');\r\n      } else {\r\n        this.speak(`Linia ${currentLineIndex + 1}: linie goală`, 'high');\r\n      }\r\n    } else {\r\n      // Pentru input simplu, citim tot conținutul\r\n      const value = element.value;\r\n      if (value) {\r\n        this.speak(`Conținut: ${value}`, 'high');\r\n      } else {\r\n        this.speak(\"Câmp gol\", 'high');\r\n      }\r\n    }\r\n  }\r\n\r\n  readCurrentWord() {\r\n    if (!this.currentEditElement) {\r\n      this.speak(\"Nu ești într-un câmp de editare\", 'high');\r\n      return;\r\n    }\r\n    \r\n    const word = this.getCurrentWord(this.currentEditElement);\r\n    if (word) {\r\n      this.speak(`Cuvânt: ${word}`, 'high');\r\n    } else {\r\n      this.speak(\"Nu există cuvânt la poziția curentă\", 'high');\r\n    }\r\n  }\r\n\r\n  readCharacterAtCursor() {\r\n    if (!this.currentEditElement) return;\r\n    \r\n    const element = this.currentEditElement;\r\n    const value = element.value;\r\n    const cursorPos = element.selectionStart;\r\n    \r\n    if (cursorPos < value.length) {\r\n      const char = value[cursorPos];\r\n      this.speak(this.getCharDescription(char), 'high');\r\n    } else {\r\n      this.speak(\"Sfârșit de text\", 'high');\r\n    }\r\n  }\r\n\r\n  readCurrentCodeLine() {\r\n    // Implementare specifică pentru Monaco Editor\r\n    if (this.currentEditElement && this.currentEditElement.classList.contains('monaco-editor')) {\r\n      // În practică, aici ar trebui să accesăm API-ul Monaco\r\n      // Pentru moment, folosim o implementare simplificată\r\n      this.speak(\"Citire linie cod în dezvoltare\", 'normal');\r\n    }\r\n  }\r\n\r\n  toggleLiveReading() {\r\n    this.liveReadingEnabled = !this.liveReadingEnabled;\r\n    this.speak(\r\n      this.liveReadingEnabled \r\n        ? \"Citire live activată\" \r\n        : \"Citire live dezactivată\", \r\n      'high'\r\n    );\r\n  }\r\n\r\n  activateElement() {\r\n    if (!this.focusedElement) {\r\n      this.speak(\"Niciun element selectat\", 'high');\r\n      return;\r\n    }\r\n    \r\n    const tagName = this.focusedElement.tagName.toLowerCase();\r\n    \r\n    // Pentru inputuri, permitem editarea\r\n    if (['input', 'textarea', 'select'].includes(tagName)) {\r\n      this.enterEditMode(this.focusedElement);\r\n      return;\r\n    }\r\n    \r\n    // Pentru alte elemente, simulăm click\r\n    this.speak(\"Activez elementul\", 'normal');\r\n    \r\n    if (this.focusedElement.click) {\r\n      this.focusedElement.click();\r\n    } else if (tagName === 'a') {\r\n      window.location.href = this.focusedElement.href;\r\n    }\r\n  }\r\n\r\n  enterEditMode(element) {\r\n    this.isEditMode = true;\r\n    this.currentEditElement = element;\r\n    element.focus();\r\n    \r\n    const announcement = `Mod editare activat. ${this.getEditModeInstructions(element)}`;\r\n    this.speak(announcement, 'high');\r\n    \r\n    // Dezactivăm temporar navigarea\r\n    document.dispatchEvent(new CustomEvent('editModeChanged', {\r\n      detail: { isEditMode: true, element: element }\r\n    }));\r\n  }\r\n\r\n  exitEditMode() {\r\n    if (!this.isEditMode) return;\r\n    \r\n    this.isEditMode = false;\r\n    \r\n    if (this.currentEditElement) {\r\n      this.currentEditElement.blur();\r\n      this.speak(\"Mod editare dezactivat. Navigare reactivată\", 'high');\r\n      \r\n      // Re-focusăm elementul pentru navigare\r\n      this.setFocus(this.currentEditElement);\r\n      this.currentEditElement = null;\r\n    }\r\n    \r\n    document.dispatchEvent(new CustomEvent('editModeChanged', {\r\n      detail: { isEditMode: false }\r\n    }));\r\n  }\r\n\r\n  getEditModeInstructions(element) {\r\n    const tagName = element.tagName.toLowerCase();\r\n    let instructions = \"\";\r\n    \r\n    switch (tagName) {\r\n      case 'input':\r\n        const inputType = element.type;\r\n        if (inputType === 'text' || inputType === 'email') {\r\n          instructions = \"Tastează textul dorit. \";\r\n        } else if (inputType === 'password') {\r\n          instructions = \"Tastează parola. Caracterele nu vor fi citite din motive de securitate. \";\r\n        }\r\n        break;\r\n        \r\n      case 'textarea':\r\n        instructions = \"Tastează textul. Folosește Enter pentru linie nouă. \";\r\n        break;\r\n        \r\n      case 'select':\r\n        instructions = \"Folosește săgețile sus/jos pentru a selecta o opțiune. \";\r\n        break;\r\n    }\r\n    \r\n    instructions += \"Alt+Q pentru a citi linia curentă. \";\r\n    instructions += \"Alt+W pentru a citi cuvântul curent. \";\r\n    instructions += \"Escape pentru a ieși din modul editare.\";\r\n    \r\n    return instructions;\r\n  }\r\n\r\n  toggleAccessibilityMode() {\r\n    this.isAccessibilityMode = !this.isAccessibilityMode;\r\n    \r\n    if (this.isAccessibilityMode) {\r\n      this.speak(\"Modul pentru nevăzători activat. Bine ai venit în JavaVerse!\", 'high');\r\n      this.addAccessibilityStyles();\r\n      this.updateFocusableElements();\r\n      \r\n      setTimeout(() => {\r\n        this.readWelcomeMessage();\r\n      }, 2000);\r\n    } else {\r\n      this.speak(\"Modul pentru nevăzători dezactivat.\");\r\n      this.removeAccessibilityStyles();\r\n      this.stopReading();\r\n      \r\n      // Ieșim din modul editare dacă e activ\r\n      if (this.isEditMode) {\r\n        this.exitEditMode();\r\n      }\r\n    }\r\n    \r\n    document.dispatchEvent(new CustomEvent('accessibilityModeChanged', {\r\n      detail: { isActive: this.isAccessibilityMode }\r\n    }));\r\n  }\r\n\r\n  readWelcomeMessage() {\r\n    const welcomeText = `\r\n      Bine ai venit în modul pentru nevăzători JavaVerse!\r\n      \r\n      Navigare principală:\r\n      - Tab pentru următorul element\r\n      - Shift + Tab pentru elementul anterior\r\n      - Enter pentru a activa elementul selectat\r\n      - Spațiu pentru pauză sau continuare citire\r\n      - Escape pentru a opri citirea\r\n      \r\n      Navigare rapidă:\r\n      - F1 pentru meniul de ajutor\r\n      - F2, F3, F4 pentru header, conținut principal și footer\r\n      \r\n      Navigare în site cu Alt:\r\n      - Alt + C pentru cursuri\r\n      - Alt + P pentru playground\r\n      - Alt + R pentru profil\r\n      - Alt + H pentru pagina principală\r\n      \r\n      Navigare prin elemente cu Ctrl:\r\n      - Ctrl + B pentru următorul buton\r\n      - Ctrl + L pentru următorul link\r\n      - Ctrl + I pentru următorul câmp de input\r\n      - Ctrl + T pentru următorul titlu\r\n      \r\n      În modul editare:\r\n      - Alt + Q pentru a citi linia curentă\r\n      - Alt + W pentru a citi cuvântul curent\r\n      - Alt + D pentru a comuta citirea live\r\n      - Escape pentru a ieși din editare\r\n      \r\n      Alte comenzi utile:\r\n      - Alt + M pentru citirea paginii curente\r\n      - Alt + N pentru informații de navigare\r\n      - Alt + S pentru ajustarea vitezei de citire\r\n      - Alt + B pentru înapoi\r\n      - Alt + L pentru lista tuturor elementelor\r\n      \r\n      În quiz folosește Alt + 1, 2, 3 sau 4 pentru variante.\r\n      În editor folosește Alt + E pentru execuție și Alt + F pentru feedback.\r\n    `;\r\n    \r\n    this.speak(welcomeText, 'high');\r\n  }\r\n\r\n  handleAccessibilityShortcuts(e) {\r\n    // Nu procesăm shortcut-uri în modul editare\r\n    if (this.isEditMode) return;\r\n    \r\n    const key = this.getShortcutKey(e);\r\n    const handler = this.shortcuts.get(key);\r\n    \r\n    if (handler) {\r\n      e.preventDefault();\r\n      handler();\r\n    }\r\n  }\r\n\r\n  getShortcutKey(e) {\r\n    const parts = [];\r\n    \r\n    if (e.ctrlKey) parts.push('ctrl');\r\n    if (e.altKey) parts.push('alt');\r\n    if (e.shiftKey) parts.push('Shift');\r\n    \r\n    // Tratăm special anumite taste\r\n    let key = e.key;\r\n    if (key === ' ') key = ' ';\r\n    if (key.length === 1) key = key.toLowerCase();\r\n    \r\n    parts.push(key);\r\n    \r\n    return parts.join('+');\r\n  }\r\n\r\n  // Restul metodelor rămân neschimbate...\r\n  // (updateFocusableElements, navigateNext, navigatePrevious, setFocus, readElementInfo, \r\n  //  navigateToSection, nextButton, nextLink, nextInput, nextHeading, etc.)\r\n  \r\n  updateFocusableElements() {\r\n    const selectors = [\r\n      'a[href]:not([disabled])',\r\n      'button:not([disabled])',\r\n      'input:not([disabled]):not([type=\"hidden\"])',\r\n      'select:not([disabled])',\r\n      'textarea:not([disabled])',\r\n      '[tabindex]:not([tabindex=\"-1\"])',\r\n      '.course-card',\r\n      '.question-container li',\r\n      '.feature-card',\r\n      '.example-card',\r\n      'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\r\n      '[role=\"button\"]:not([disabled])',\r\n      '[role=\"link\"]',\r\n      '[role=\"navigation\"]',\r\n      '[role=\"main\"]'\r\n    ];\r\n    \r\n    this.focusableElements = Array.from(document.querySelectorAll(selectors.join(', ')))\r\n      .filter(el => {\r\n        // Verificăm dacă elementul este vizibil\r\n        const rect = el.getBoundingClientRect();\r\n        return rect.width > 0 && rect.height > 0 && el.offsetParent !== null;\r\n      })\r\n      .sort((a, b) => {\r\n        // Sortăm elementele după poziția lor în pagină\r\n        const rectA = a.getBoundingClientRect();\r\n        const rectB = b.getBoundingClientRect();\r\n        \r\n        if (Math.abs(rectA.top - rectB.top) < 10) {\r\n          return rectA.left - rectB.left;\r\n        }\r\n        return rectA.top - rectB.top;\r\n      });\r\n  }\r\n\r\n  navigateNext() {\r\n    this.updateFocusableElements();\r\n    \r\n    if (this.focusableElements.length === 0) {\r\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\r\n      return;\r\n    }\r\n    \r\n    this.currentFocusIndex = (this.currentFocusIndex + 1) % this.focusableElements.length;\r\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\r\n  }\r\n\r\n  navigatePrevious() {\r\n    this.updateFocusableElements();\r\n    \r\n    if (this.focusableElements.length === 0) {\r\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\r\n      return;\r\n    }\r\n    \r\n    this.currentFocusIndex = this.currentFocusIndex === 0 \r\n      ? this.focusableElements.length - 1 \r\n      : this.currentFocusIndex - 1;\r\n      \r\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\r\n  }\r\n\r\n  setFocus(element) {\r\n    if (!element) return;\r\n    \r\n    // Eliminăm focus-ul anterior\r\n    document.querySelectorAll('.accessibility-focus').forEach(el => {\r\n      el.classList.remove('accessibility-focus');\r\n    });\r\n    \r\n    // Setăm noul focus\r\n    this.focusedElement = element;\r\n    element.classList.add('accessibility-focus');\r\n    \r\n    // Scroll smooth în vedere\r\n    element.scrollIntoView({ \r\n      behavior: 'smooth', \r\n      block: 'center',\r\n      inline: 'nearest'\r\n    });\r\n    \r\n    // Focus real pentru inputuri doar dacă nu suntem în edit mode\r\n    if (['INPUT', 'TEXTAREA', 'SELECT'].includes(element.tagName) && !this.isEditMode) {\r\n      // Nu dăm focus automat pentru a evita intrarea accidentală în modul editare\r\n    }\r\n    \r\n    // Citim informații despre element\r\n    this.readElementInfo(element);\r\n  }\r\n\r\n  readElementInfo(element) {\r\n    let description = '';\r\n    const tagName = element.tagName.toLowerCase();\r\n    const ariaLabel = element.getAttribute('aria-label');\r\n    const text = element.textContent?.trim();\r\n    \r\n    // Prioritizăm aria-label\r\n    if (ariaLabel) {\r\n      description = ariaLabel;\r\n    } else {\r\n      // Descrieri specifice pentru fiecare tip de element\r\n      switch (tagName) {\r\n        case 'button':\r\n          description = `Buton: ${text || 'Fără text'}`;\r\n          break;\r\n          \r\n        case 'a':\r\n          description = `Link: ${text || 'Fără text'}`;\r\n          break;\r\n          \r\n        case 'input':\r\n          const inputType = element.type;\r\n          const inputLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          const inputValue = element.value;\r\n          \r\n          if (inputType === 'text' || inputType === 'email' || inputType === 'password') {\r\n            description = `Câmp ${inputType}: ${inputLabel || element.placeholder || 'Fără etichetă'}`;\r\n            if (inputValue) {\r\n              description += `. Valoare curentă: ${inputType === 'password' ? 'parolă introdusă' : inputValue}`;\r\n            }\r\n          } else if (inputType === 'radio' || inputType === 'checkbox') {\r\n            description = `${inputType === 'radio' ? 'Opțiune' : 'Bifă'}: ${inputLabel || text}. ${element.checked ? 'Selectat' : 'Neselectat'}`;\r\n          }\r\n          break;\r\n          \r\n        case 'select':\r\n          const selectLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          const selectedOption = element.options[element.selectedIndex]?.text;\r\n          description = `Listă derulantă: ${selectLabel || 'Fără etichetă'}. Selectat: ${selectedOption || 'Nimic'}`;\r\n          break;\r\n          \r\n        case 'textarea':\r\n          const textareaLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          description = `Zonă de text: ${textareaLabel || element.placeholder || 'Fără etichetă'}`;\r\n          if (element.value) {\r\n            description += `. ${element.value.length} caractere introduse`;\r\n          }\r\n          break;\r\n          \r\n        case 'h1':\r\n        case 'h2':\r\n        case 'h3':\r\n        case 'h4':\r\n        case 'h5':\r\n        case 'h6':\r\n          const level = tagName.charAt(1);\r\n          description = `Titlu nivel ${level}: ${text}`;\r\n          break;\r\n          \r\n        default:\r\n          // Pentru elemente custom (carduri, etc.)\r\n          if (element.classList.contains('course-card')) {\r\n            const title = element.querySelector('.course-title')?.textContent;\r\n            const desc = element.querySelector('.course-description')?.textContent;\r\n            description = `Curs: ${title}. ${desc}`;\r\n          } else if (element.classList.contains('feature-card')) {\r\n            const title = element.querySelector('h3')?.textContent;\r\n            const desc = element.querySelector('p')?.textContent;\r\n            description = `Caracteristică: ${title}. ${desc}`;\r\n          } else if (element.classList.contains('example-card')) {\r\n            const title = element.querySelector('.card-title')?.textContent || text;\r\n            description = `Exemplu de cod: ${title}`;\r\n          } else {\r\n            description = text || `Element ${tagName}`;\r\n          }\r\n      }\r\n    }\r\n    \r\n    // Adăugăm indicații pentru interacțiune\r\n    if (['button', 'a'].includes(tagName) || element.getAttribute('role') === 'button') {\r\n      description += \". Apasă Enter pentru a activa\";\r\n    } else if (['input', 'textarea', 'select'].includes(tagName)) {\r\n      description += \". Apasă Enter pentru a edita\";\r\n    }\r\n    \r\n    this.speak(description, 'high');\r\n  }\r\n\r\n  navigateToSection(sectionName) {\r\n    let selector;\r\n    let announcement;\r\n    \r\n    switch (sectionName) {\r\n      case 'header':\r\n        selector = 'header, [role=\"banner\"], .jv-header';\r\n        announcement = \"Navighez la header\";\r\n        break;\r\n      case 'main':\r\n        selector = 'main, [role=\"main\"], .body-content';\r\n        announcement = \"Navighez la conținutul principal\";\r\n        break;\r\n      case 'footer':\r\n        selector = 'footer, [role=\"contentinfo\"], .jv-footer';\r\n        announcement = \"Navighez la footer\";\r\n        break;\r\n    }\r\n    \r\n    const section = document.querySelector(selector);\r\n    if (section) {\r\n      this.speak(announcement, 'high');\r\n      \r\n      // Găsim primul element focusabil din secțiune\r\n      const firstFocusable = section.querySelector(\r\n        'a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n      );\r\n      \r\n      if (firstFocusable) {\r\n        const index = this.focusableElements.indexOf(firstFocusable);\r\n        if (index !== -1) {\r\n          this.currentFocusIndex = index;\r\n          this.setFocus(firstFocusable);\r\n        }\r\n      } else {\r\n        section.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        this.speak(\"Secțiune fără elemente interactive\", 'normal');\r\n      }\r\n    } else {\r\n      this.speak(\"Secțiunea nu a fost găsită\", 'high');\r\n    }\r\n  }\r\n\r\n  // Navigare prin tipuri de elemente\r\n  nextButton() {\r\n    this.navigateToNextOfType('button, [role=\"button\"]', 'buton');\r\n  }\r\n\r\n  nextLink() {\r\n    this.navigateToNextOfType('a[href]', 'link');\r\n  }\r\n\r\n  nextInput() {\r\n    this.navigateToNextOfType('input, textarea, select', 'câmp de input');\r\n  }\r\n\r\n  nextHeading() {\r\n    this.navigateToNextOfType('h1, h2, h3, h4, h5, h6', 'titlu');\r\n  }\r\n\r\n  navigateToNextOfType(selector, typeName) {\r\n    const elements = Array.from(document.querySelectorAll(selector))\r\n      .filter(el => el.offsetParent !== null);\r\n    \r\n    if (elements.length === 0) {\r\n      this.speak(`Nu există ${typeName} pe această pagină`, 'high');\r\n      return;\r\n    }\r\n    \r\n    let nextIndex = -1;\r\n    \r\n    if (this.focusedElement) {\r\n      const currentTypeIndex = elements.indexOf(this.focusedElement);\r\n      if (currentTypeIndex !== -1) {\r\n        nextIndex = (currentTypeIndex + 1) % elements.length;\r\n      } else {\r\n        // Găsim următorul element de acest tip după elementul curent\r\n        const currentRect = this.focusedElement.getBoundingClientRect();\r\n        for (let i = 0; i < elements.length; i++) {\r\n          const rect = elements[i].getBoundingClientRect();\r\n          if (rect.top > currentRect.top || \r\n              (Math.abs(rect.top - currentRect.top) < 10 && rect.left > currentRect.left)) {\r\n            nextIndex = i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (nextIndex === -1) {\r\n      nextIndex = 0;\r\n    }\r\n    \r\n    const targetElement = elements[nextIndex];\r\n    const globalIndex = this.focusableElements.indexOf(targetElement);\r\n    \r\n    if (globalIndex !== -1) {\r\n      this.currentFocusIndex = globalIndex;\r\n      this.setFocus(targetElement);\r\n    }\r\n  }\r\n\r\n  // Ajustare viteză citire\r\n  adjustSpeed() {\r\n    const speeds = [0.7, 0.85, 1.0, 1.15, 1.3];\r\n    const currentIndex = speeds.indexOf(this.readingSpeed);\r\n    const nextIndex = (currentIndex + 1) % speeds.length;\r\n    \r\n    this.readingSpeed = speeds[nextIndex];\r\n    this.speak(`Viteză de citire: ${Math.round(this.readingSpeed * 100)}%`, 'high');\r\n  }\r\n\r\n  // Îmbunătățire pentru speak cu viteză ajustabilă\r\n  speak(text, priority = 'normal') {\r\n    if (!text || text.trim() === '') return;\r\n\r\n    if (priority === 'high') {\r\n      this.stopReading();\r\n    }\r\n\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    if (this.voice) {\r\n      utterance.voice = this.voice;\r\n    }\r\n    \r\n    utterance.rate = this.readingSpeed;\r\n    utterance.pitch = 1.0;\r\n    utterance.volume = 1.0;\r\n\r\n    utterance.onstart = () => {\r\n      this.isReading = true;\r\n      this.currentUtterance = utterance;\r\n      \r\n      // Trimitem event pentru UI\r\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n        detail: { isSpeaking: true }\r\n      }));\r\n    };\r\n\r\n    utterance.onend = () => {\r\n      this.isReading = false;\r\n      this.currentUtterance = null;\r\n      this.processQueue();\r\n      \r\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n        detail: { isSpeaking: false }\r\n      }));\r\n    };\r\n\r\n    utterance.onerror = (e) => {\r\n      console.error('Speech synthesis error:', e);\r\n      this.isReading = false;\r\n      this.currentUtterance = null;\r\n    };\r\n\r\n    if (this.isReading && priority !== 'high') {\r\n      this.readingQueue.push(utterance);\r\n    } else {\r\n      this.speechSynthesis.speak(utterance);\r\n    }\r\n  }\r\n\r\n  // Navigare înapoi\r\n  navigateBack() {\r\n    if (this.navigationHistory.length > 0) {\r\n      const previousUrl = this.navigationHistory.pop();\r\n      this.speak(\"Navighez înapoi\", 'high');\r\n      window.location.href = previousUrl;\r\n    } else {\r\n      this.speak(\"Nu există istoric de navigare\", 'high');\r\n    }\r\n  }\r\n\r\n  // Listare elemente\r\n  listAllElements() {\r\n    this.updateFocusableElements();\r\n    \r\n    const totalElements = this.focusableElements.length;\r\n    const currentPosition = this.currentFocusIndex + 1;\r\n    \r\n    let summary = `Pagina conține ${totalElements} elemente interactive. `;\r\n    summary += `Ești la elementul ${currentPosition} din ${totalElements}. `;\r\n    \r\n    // Numărăm tipurile de elemente\r\n    const counts = {\r\n      buttons: document.querySelectorAll('button, [role=\"button\"]').length,\r\n      links: document.querySelectorAll('a[href]').length,\r\n      inputs: document.querySelectorAll('input, textarea, select').length,\r\n      headings: document.querySelectorAll('h1, h2, h3, h4, h5, h6').length\r\n    };\r\n    \r\n    summary += `Găsit: ${counts.buttons} butoane, ${counts.links} linkuri, `;\r\n    summary += `${counts.inputs} câmpuri de input, ${counts.headings} titluri.`;\r\n    \r\n    this.speak(summary, 'high');\r\n  }\r\n\r\n  // Navigare rapidă pentru pagini\r\n  navigateToCourses() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la cursuri\", 'high');\r\n    window.location.href = '/courses';\r\n  }\r\n\r\n  navigateToPlayground() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la playground\", 'high');\r\n    window.location.href = '/playground';\r\n  }\r\n\r\n  navigateToProfile() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la profil\", 'high');\r\n    window.location.href = '/profile';\r\n  }\r\n\r\n  goHome() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la pagina principală\", 'high');\r\n    window.location.href = '/';\r\n  }\r\n\r\n  // Funcții pentru quiz\r\n  selectQuizOption(index) {\r\n    const options = document.querySelectorAll('.question-container li');\r\n    if (options[index]) {\r\n      options[index].click();\r\n      this.speak(`Selectat răspunsul ${index + 1}`, 'high');\r\n    } else {\r\n      this.speak(`Nu există răspunsul ${index + 1}`, 'high');\r\n    }\r\n  }\r\n\r\n  // Funcții pentru editor\r\n  executeCode() {\r\n    const runButton = document.querySelector('.editor-actions button[aria-label*=\"Execută\"]');\r\n    if (runButton) {\r\n      runButton.click();\r\n      this.speak(\"Execut codul\", 'high');\r\n    } else {\r\n      this.speak(\"Butonul de execuție nu a fost găsit\", 'high');\r\n    }\r\n  }\r\n\r\n  getFeedback() {\r\n    const feedbackButton = document.querySelector('.editor-actions button[aria-label*=\"feedback\"]');\r\n    if (feedbackButton) {\r\n      feedbackButton.click();\r\n      this.speak(\"Solicit feedback AI\", 'high');\r\n    } else {\r\n      this.speak(\"Butonul de feedback nu a fost găsit\", 'high');\r\n    }\r\n  }\r\n\r\n  // Citirea informațiilor despre pagina curentă\r\n  readNavigationInfo() {\r\n    const currentUrl = window.location.pathname;\r\n    const totalElements = this.focusableElements.length;\r\n    const position = this.currentFocusIndex + 1;\r\n    \r\n    let info = `Ești pe ${this.getPageName(currentUrl)}. `;\r\n    info += `Elementul curent: ${position} din ${totalElements}. `;\r\n    info += `Folosește Tab pentru navigare sau apasă F1 pentru ajutor.`;\r\n    \r\n    this.speak(info, 'high');\r\n  }\r\n\r\n  getPageName(url) {\r\n    if (url === '/' || url === '') return 'pagina principală';\r\n    if (url.includes('/courses')) return 'pagina de cursuri';\r\n    if (url.includes('/playground')) return 'playground-ul de cod';\r\n    if (url.includes('/profile')) return 'pagina de profil';\r\n    if (url.includes('/login')) return 'pagina de autentificare';\r\n    if (url.includes('/register')) return 'pagina de înregistrare';\r\n    if (url.includes('/quiz')) return 'pagina de test';\r\n    return 'pagina curentă';\r\n  }\r\n\r\n  // Metodă îmbunătățită pentru citirea help-ului\r\n  readHelp() {\r\n    const currentPage = this.getPageName(window.location.pathname);\r\n    \r\n    const helpText = `\r\n      Ajutor pentru ${currentPage}.\r\n      \r\n      Comenzi esențiale:\r\n      - Tab și Shift Tab pentru navigare înainte și înapoi\r\n      - Enter pentru a activa elementul selectat\r\n      - Spațiu pentru pauză sau continuare citire\r\n      - Escape pentru oprire citire\r\n      \r\n      Navigare rapidă cu taste funcționale:\r\n      - F1 pentru acest ajutor\r\n      - F2, F3, F4 pentru header, conținut principal, footer\r\n      \r\n      Navigare în site cu Alt:\r\n      - Alt C pentru cursuri\r\n      - Alt P pentru playground\r\n      - Alt R pentru profil\r\n      - Alt H pentru acasă\r\n      \r\n      Navigare prin tipuri cu Ctrl:\r\n      - Ctrl B pentru butoane\r\n      - Ctrl L pentru linkuri\r\n      - Ctrl I pentru câmpuri input\r\n      - Ctrl T pentru titluri\r\n      \r\n      În modul editare:\r\n      - Alt Q pentru a citi linia curentă\r\n      - Alt W pentru a citi cuvântul curent\r\n      - Alt D pentru a comuta citirea live\r\n      - Escape pentru a ieși din editare\r\n      \r\n      Comenzi speciale:\r\n      - Alt M pentru citirea paginii\r\n      - Alt N pentru informații navigare\r\n      - Alt S pentru viteză citire\r\n      - Alt B pentru înapoi\r\n      - Alt L pentru lista elementelor\r\n      \r\n      ${this.getPageSpecificHelp(currentPage)}\r\n    `;\r\n    \r\n    this.speak(helpText, 'high');\r\n  }\r\n\r\n  getPageSpecificHelp(pageName) {\r\n    switch (pageName) {\r\n      case 'pagina de cursuri':\r\n        return 'În această pagină: Navighează prin cursuri cu Tab. Apasă Enter pentru a selecta un curs.';\r\n        \r\n      case 'playground-ul de cod':\r\n        return 'În editor: Alt E pentru execuție, Alt F pentru feedback AI. În modul editare, săgețile sus/jos citesc linia curentă.';\r\n        \r\n      case 'pagina de test':\r\n        return 'În test: Alt 1-4 pentru răspunsuri. Enter pentru verificare sau următoarea întrebare.';\r\n        \r\n      case 'pagina de profil':\r\n        return 'În profil: Navighează prin secțiuni cu Tab. Enter pentru a modifica setările.';\r\n        \r\n      case 'pagina de autentificare':\r\n      case 'pagina de înregistrare':\r\n        return 'Completează câmpurile cu Tab și Enter. În modul editare, tastează normal și folosește Escape când termini.';\r\n        \r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  stopReading() {\r\n    if (this.speechSynthesis.speaking) {\r\n      this.speechSynthesis.cancel();\r\n    }\r\n    \r\n    this.isReading = false;\r\n    this.currentUtterance = null;\r\n    this.readingQueue = [];\r\n    \r\n    // Trimitem event pentru UI\r\n    document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n      detail: { isSpeaking: false }\r\n    }));\r\n  }\r\n\r\n  processQueue() {\r\n    if (this.readingQueue.length > 0 && !this.isReading) {\r\n      const nextUtterance = this.readingQueue.shift();\r\n      this.speechSynthesis.speak(nextUtterance);\r\n    }\r\n  }\r\n\r\n  toggleReading() {\r\n    if (this.isReading && this.currentUtterance) {\r\n      if (this.speechSynthesis.paused) {\r\n        this.speechSynthesis.resume();\r\n        this.speak(\"Reluare citire\", 'normal');\r\n      } else {\r\n        this.speechSynthesis.pause();\r\n        this.speak(\"Pauză citire\", 'normal');\r\n      }\r\n    } else {\r\n      this.readCurrentPage();\r\n    }\r\n  }\r\n\r\n  readCurrentPage() {\r\n    const pageContent = this.extractPageContent();\r\n    if (pageContent) {\r\n      this.speak(pageContent, 'high');\r\n    } else {\r\n      this.speak(\"Nu există conținut de citit pe această pagină\", 'high');\r\n    }\r\n  }\r\n\r\n  extractPageContent() {\r\n    let content = '';\r\n    \r\n    // Extragem titlul paginii\r\n    const title = document.querySelector('h1');\r\n    if (title) {\r\n      content += `Titlu: ${title.textContent.trim()}. `;\r\n    }\r\n    \r\n    // Extragem descrierea sau subtitlul\r\n    const description = document.querySelector('.page-description, .course-detail-description, .code-playground-description');\r\n    if (description) {\r\n      content += `${description.textContent.trim()}. `;\r\n    }\r\n    \r\n    // Extragem conținutul principal\r\n    const mainContent = document.querySelector('main, .body-content, .course-detail-content');\r\n    if (mainContent) {\r\n      // Extragem doar textul relevant, ignorând butoanele și alte elemente interactive\r\n      const paragraphs = mainContent.querySelectorAll('p, h2, h3, h4, li');\r\n      paragraphs.forEach(p => {\r\n        const text = p.textContent.trim();\r\n        if (text && text.length > 0) {\r\n          content += `${text}. `;\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Dacă suntem pe o pagină de curs, citim și lecțiile\r\n    const lessons = document.querySelectorAll('.course-preview-item, .lesson-title');\r\n    if (lessons.length > 0) {\r\n      content += 'Lecții disponibile: ';\r\n      lessons.forEach((lesson, index) => {\r\n        content += `${index + 1}. ${lesson.textContent.trim()}. `;\r\n      });\r\n    }\r\n    \r\n    // Dacă suntem pe o pagină de test, citim întrebarea curentă\r\n    const currentQuestion = document.querySelector('.question-container h3');\r\n    if (currentQuestion) {\r\n      content += `Întrebare: ${currentQuestion.textContent.trim()}. `;\r\n      \r\n      const options = document.querySelectorAll('.question-container li label');\r\n      if (options.length > 0) {\r\n        content += 'Opțiuni: ';\r\n        options.forEach((option, index) => {\r\n          content += `${index + 1}. ${option.textContent.trim()}. `;\r\n        });\r\n      }\r\n    }\r\n    \r\n    return content.trim();\r\n  }\r\n\r\n  // Adaugă și această metodă pentru anunțuri\r\n  announce(message, priority = 'normal') {\r\n    this.speak(message, priority);\r\n  }\r\n\r\n  // Adaugă getter pentru proprietatea isSpeaking\r\n  get isSpeaking() {\r\n    return this.isReading || this.speechSynthesis.speaking;\r\n  }\r\n\r\n  // Adaugă getter pentru proprietatea isActive\r\n  get isActive() {\r\n    return this.isAccessibilityMode;\r\n  }\r\n\r\n  // Metodă pentru citirea întrebărilor de quiz\r\n  readQuizQuestion(question, options) {\r\n    let text = `Întrebare: ${question}. `;\r\n    if (options && options.length > 0) {\r\n      text += 'Variantele de răspuns sunt: ';\r\n      options.forEach((option, index) => {\r\n        text += `${index + 1}: ${option}. `;\r\n      });\r\n    }\r\n    this.speak(text, 'high');\r\n  }\r\n\r\n  // Metodă pentru anunțarea rezultatului quiz-ului\r\n  announceQuizResult(score, totalQuestions) {\r\n    const percentage = Math.round((score / totalQuestions) * 100);\r\n    const text = `Test finalizat! Ai răspuns corect la ${score} din ${totalQuestions} întrebări. ` +\r\n                 `Scorul tău este ${percentage}%. ` +\r\n                 (percentage >= 80 ? 'Felicitări! Rezultat excelent!' : \r\n                  percentage >= 60 ? 'Rezultat bun! Continuă să înveți.' : \r\n                  'Nu te descuraja! Încearcă din nou pentru un rezultat mai bun.');\r\n    this.speak(text, 'high');\r\n  }\r\n\r\n  // Metodă pentru citirea liniilor de cod în Monaco Editor\r\n  readCodeLine(lineNumber, content) {\r\n    if (content) {\r\n      this.speak(`Linia ${lineNumber}: ${content}`, 'normal');\r\n    } else {\r\n      this.speak(`Linia ${lineNumber}: linie goală`, 'normal');\r\n    }\r\n  }\r\n\r\n  // Metodă pentru anunțarea schimbărilor în cod\r\n  announceCodeChange(changeType, position) {\r\n    if (changeType === 'insert') {\r\n      this.speak(\"Text adăugat\", 'normal');\r\n    } else if (changeType === 'delete') {\r\n      this.speak(\"Text șters\", 'normal');\r\n    }\r\n  }\r\n\r\n  addAccessibilityStyles() {\r\n    const style = document.createElement('style');\r\n    style.id = 'accessibility-styles';\r\n    style.textContent = `\r\n      /* Stiluri pentru modul nevăzători */\r\n      body.accessibility-mode {\r\n        background: #000000 !important;\r\n        color: #ffffff !important;\r\n        font-size: 20px !important;\r\n        line-height: 1.8 !important;\r\n        font-family: Arial, sans-serif !important;\r\n      }\r\n      \r\n      body.accessibility-mode * {\r\n        animation: none !important;\r\n        transition: none !important;\r\n      }\r\n      \r\n      .accessibility-focus {\r\n        outline: 4px solid #ffff00 !important;\r\n        outline-offset: 4px !important;\r\n        background-color: #000033 !important;\r\n        color: #ffffff !important;\r\n        box-shadow: 0 0 20px #ffff00 !important;\r\n        border-radius: 4px !important;\r\n        position: relative !important;\r\n        z-index: 9999 !important;\r\n      }\r\n      \r\n      /* Indicator pentru modul editare */\r\n      .accessibility-edit-mode {\r\n        outline: 4px dashed #00ff00 !important;\r\n        outline-offset: 4px !important;\r\n        background-color: #003300 !important;\r\n      }\r\n      \r\n      /* Ascundem elementele decorative */\r\n      body.accessibility-mode .stars-background,\r\n      body.accessibility-mode .planet,\r\n      body.accessibility-mode .asteroid,\r\n      body.accessibility-mode .shooting-star,\r\n      body.accessibility-mode .code-snippet,\r\n      body.accessibility-mode .cosmic-dust,\r\n      body.accessibility-mode .twinkling-star {\r\n        display: none !important;\r\n      }\r\n      \r\n      /* Simplificăm layout-ul */\r\n      body.accessibility-mode .main-banner {\r\n        background: #000000 !important;\r\n        min-height: auto !important;\r\n        padding: 20px !important;\r\n      }\r\n      \r\n      /* Text mai vizibil */\r\n      body.accessibility-mode h1,\r\n      body.accessibility-mode h2,\r\n      body.accessibility-mode h3,\r\n      body.accessibility-mode h4,\r\n      body.accessibility-mode h5,\r\n      body.accessibility-mode h6 {\r\n        color: #ffffff !important;\r\n        text-decoration: underline !important;\r\n        margin: 20px 0 !important;\r\n      }\r\n      \r\n      body.accessibility-mode p,\r\n      body.accessibility-mode span,\r\n      body.accessibility-mode div {\r\n        color: #ffffff !important;\r\n      }\r\n      \r\n      /* Butoane mai vizibile */\r\n      body.accessibility-mode button,\r\n      body.accessibility-mode .button,\r\n      body.accessibility-mode [role=\"button\"] {\r\n        background: #333333 !important;\r\n        color: #ffffff !important;\r\n        border: 2px solid #ffffff !important;\r\n        padding: 15px 20px !important;\r\n        font-size: 18px !important;\r\n        font-weight: bold !important;\r\n        text-transform: uppercase !important;\r\n      }\r\n      \r\n      body.accessibility-mode button:hover,\r\n      body.accessibility-mode button:focus {\r\n        background: #555555 !important;\r\n      }\r\n      \r\n      /* Linkuri mai vizibile */\r\n      body.accessibility-mode a {\r\n        color: #00ffff !important;\r\n        text-decoration: underline !important;\r\n        font-weight: bold !important;\r\n      }\r\n      \r\n      body.accessibility-mode a:hover,\r\n      body.accessibility-mode a:focus {\r\n        background: #333333 !important;\r\n        padding: 2px 4px !important;\r\n      }\r\n      \r\n      /* Inputuri mai clare */\r\n      body.accessibility-mode input,\r\n      body.accessibility-mode textarea,\r\n      body.accessibility-mode select {\r\n        background: #111111 !important;\r\n        color: #ffffff !important;\r\n        border: 2px solid #ffffff !important;\r\n        padding: 10px !important;\r\n        font-size: 18px !important;\r\n      }\r\n      \r\n      body.accessibility-mode input:focus,\r\n      body.accessibility-mode textarea:focus,\r\n      body.accessibility-mode select:focus {\r\n        border-color: #ffff00 !important;\r\n        outline: 2px solid #ffff00 !important;\r\n      }\r\n      \r\n      /* Stil special pentru modul editare */\r\n      body.accessibility-mode input.accessibility-edit-mode,\r\n      body.accessibility-mode textarea.accessibility-edit-mode,\r\n      body.accessibility-mode select.accessibility-edit-mode {\r\n        border-color: #00ff00 !important;\r\n        outline: 2px solid #00ff00 !important;\r\n      }\r\n      \r\n      /* Simplificăm cardurile */\r\n      body.accessibility-mode .course-card,\r\n      body.accessibility-mode .feature-card,\r\n      body.accessibility-mode .example-card {\r\n        background: #111111 !important;\r\n        border: 2px solid #ffffff !important;\r\n        margin: 10px 0 !important;\r\n        padding: 20px !important;\r\n      }\r\n      \r\n      /* Eliminăm gradiente și efecte */\r\n      body.accessibility-mode [class*=\"gradient\"] {\r\n        background: #000000 !important;\r\n      }\r\n      \r\n      /* Indicator pentru elementul curent citit */\r\n      .accessibility-reading {\r\n        background-color: #333300 !important;\r\n        outline: 2px dashed #ffff00 !important;\r\n      }\r\n      \r\n      /* Mesaje de ajutor vizibile */\r\n      .accessibility-help-popup {\r\n        position: fixed;\r\n        bottom: 20px;\r\n        right: 20px;\r\n        background: #000000;\r\n        color: #ffffff;\r\n        border: 2px solid #ffff00;\r\n        padding: 20px;\r\n        max-width: 400px;\r\n        font-size: 16px;\r\n        z-index: 10000;\r\n        border-radius: 8px;\r\n      }\r\n      \r\n      /* Simplificăm navigarea */\r\n      body.accessibility-mode nav {\r\n        background: #000000 !important;\r\n        border: 2px solid #ffffff !important;\r\n        padding: 10px !important;\r\n      }\r\n      \r\n      /* Lista de elemente focusabile */\r\n      .accessibility-element-list {\r\n        position: fixed;\r\n        left: 0;\r\n        top: 0;\r\n        width: 300px;\r\n        height: 100%;\r\n        background: #000000;\r\n        border-right: 2px solid #ffffff;\r\n        padding: 20px;\r\n        overflow-y: auto;\r\n        z-index: 9998;\r\n        display: none;\r\n      }\r\n      \r\n      body.accessibility-mode.show-element-list .accessibility-element-list {\r\n        display: block;\r\n      }\r\n      \r\n      /* Indicator pentru modul editare activ */\r\n      .accessibility-edit-indicator {\r\n        position: fixed;\r\n        top: 20px;\r\n        right: 20px;\r\n        background: #00ff00;\r\n        color: #000000;\r\n        padding: 10px 20px;\r\n        font-weight: bold;\r\n        z-index: 10001;\r\n        border-radius: 5px;\r\n        display: none;\r\n      }\r\n      \r\n      body.accessibility-mode.editing .accessibility-edit-indicator {\r\n        display: block;\r\n      }\r\n    `;\r\n    document.head.appendChild(style);\r\n    document.body.classList.add('accessibility-mode');\r\n  }\r\n\r\n  removeAccessibilityStyles() {\r\n    const style = document.getElementById('accessibility-styles');\r\n    if (style) style.remove();\r\n    document.body.classList.remove('accessibility-mode');\r\n    \r\n    // Eliminăm toate clasele de focus\r\n    document.querySelectorAll('.accessibility-focus, .accessibility-reading, .accessibility-edit-mode').forEach(el => {\r\n      el.classList.remove('accessibility-focus', 'accessibility-reading', 'accessibility-edit-mode');\r\n    });\r\n  }\r\n}\r\n\r\n// Exportăm o instanță singleton\r\nconst accessibilityManager = new AccessibilityManager();\r\nexport default accessibilityManager;"],"mappings":"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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;IACD7D,QAAQ,CAACiP,IAAI,CAACC,WAAW,CAACH,KAAK,CAAC;IAChC/O,QAAQ,CAACc,IAAI,CAAC+B,SAAS,CAAC+E,GAAG,CAAC,oBAAoB,CAAC;EACnD;EAEAhC,yBAAyBA,CAAA,EAAG;IAC1B,MAAMmJ,KAAK,GAAG/O,QAAQ,CAACmP,cAAc,CAAC,sBAAsB,CAAC;IAC7D,IAAIJ,KAAK,EAAEA,KAAK,CAACpH,MAAM,CAAC,CAAC;IACzB3H,QAAQ,CAACc,IAAI,CAAC+B,SAAS,CAAC8E,MAAM,CAAC,oBAAoB,CAAC;;IAEpD;IACA3H,QAAQ,CAAC0G,gBAAgB,CAAC,wEAAwE,CAAC,CAAC9G,OAAO,CAACgH,EAAE,IAAI;MAChHA,EAAE,CAAC/D,SAAS,CAAC8E,MAAM,CAAC,qBAAqB,EAAE,uBAAuB,EAAE,yBAAyB,CAAC;IAChG,CAAC,CAAC;EACJ;AACF;;AAEA;AACA,MAAMyH,oBAAoB,GAAG,IAAIlS,oBAAoB,CAAC,CAAC;AACvD,eAAekS,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}