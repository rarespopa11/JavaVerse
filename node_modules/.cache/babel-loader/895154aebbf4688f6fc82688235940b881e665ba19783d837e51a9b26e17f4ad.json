{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\Login.js\",\n  _s = $RefreshSig$();\n// src/components/Login.js\nimport React, { useState } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport '../styles/FormPage.css'; // Ajustează calea în funcție de proiectul tău\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Login({\n  setIsAuthenticated\n}) {\n  _s();\n  const [formData, setFormData] = useState({\n    email: '',\n    password: ''\n  });\n  const [error, setError] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const navigate = useNavigate();\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    // Validare simplă\n    if (!formData.email || !formData.password) {\n      setError('Te rugăm să completezi toate câmpurile.');\n      return;\n    }\n    setIsLoading(true);\n    setError('');\n    try {\n      const response = await fetch('http://localhost:5000/api/users/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(formData)\n      });\n      const data = await response.json();\n      if (data.success) {\n        // Stocăm token-ul în localStorage\n        localStorage.setItem('authToken', data.token);\n\n        // IMPORTANT: Trebuie să stocăm userId-ul pentru a-l folosi în Profile.js\n        // Extragem userId din token sau facem o cerere separată\n        // Pentru simplitate, vom folosi direct această soluție deocamdată\n\n        // Decodificăm token-ul pentru a extrage userId (metoda 1)\n        try {\n          // Metoda simplă de extragere a userId din token (fără librării)\n          const base64Url = data.token.split('.')[1];\n          const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n          const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\n          const decoded = JSON.parse(jsonPayload);\n          console.log(\"Decoded token:\", decoded); // Verificăm structura token-ului\n\n          // Salvăm userId - verificăm unde este stocat în token (id sau userId)\n          localStorage.setItem('userId', decoded.id || decoded.userId);\n          console.log(\"Saved userId:\", decoded.id || decoded.userId);\n        } catch (err) {\n          console.error(\"Error decoding token:\", err);\n          // Ca soluție de rezervă, vom face o cerere pentru a obține userId-ul\n          await fetchUserProfile(data.token);\n        }\n\n        // Setăm starea de autentificare\n        setIsAuthenticated(true);\n\n        // Redirecționăm utilizatorul către pagina principală\n        navigate('/');\n      } else {\n        setError(data.message || 'Autentificare eșuată. Verifică email-ul și parola.');\n      }\n    } catch (error) {\n      console.error('Error during login:', error);\n      setError('Eroare de rețea. Te rugăm să încerci din nou.');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // Funcție de rezervă pentru obținerea profilului și userId-ului\n  const fetchUserProfile = async token => {\n    try {\n      // Facem o cerere pentru a obține profilul utilizatorului (presupunem că există acest endpoint)\n      const response = await fetch('http://localhost:5000/api/users/profile', {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        localStorage.setItem('userId', userData.user._id);\n        console.log(\"Fetched and saved userId:\", userData.user._id);\n      }\n    } catch (err) {\n      console.error(\"Error fetching user profile:\", err);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Autentificare\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"email\",\n          children: \"Email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"email\",\n          id: \"email\",\n          name: \"email\",\n          value: formData.email,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"password\",\n          children: \"Parol\\u0103\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"password\",\n          id: \"password\",\n          name: \"password\",\n          value: formData.password,\n          onChange: handleChange,\n          required: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"submit-button\",\n        disabled: isLoading,\n        children: isLoading ? 'Se procesează...' : 'Autentificare'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"switch-page\",\n      children: [\"Nu ai un cont? \", /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/register\",\n        children: \"\\xCEnregistreaz\\u0103-te\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(Login, \"D4WyXjpj4TNw0yXHmX4lCUZ5ntk=\", false, function () {\n  return [useNavigate];\n});\n_c = Login;\nexport default Login;\nvar _c;\n$RefreshReg$(_c, \"Login\");","map":{"version":3,"names":["React","useState","Link","useNavigate","jsxDEV","_jsxDEV","Login","setIsAuthenticated","_s","formData","setFormData","email","password","error","setError","isLoading","setIsLoading","navigate","handleChange","e","name","value","target","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","success","localStorage","setItem","token","base64Url","split","base64","replace","jsonPayload","decodeURIComponent","atob","map","c","charCodeAt","toString","slice","join","decoded","parse","console","log","id","userId","err","fetchUserProfile","message","ok","userData","user","_id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","onChange","required","disabled","to","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/Login.js"],"sourcesContent":["// src/components/Login.js\r\nimport React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport '../styles/FormPage.css'; // Ajustează calea în funcție de proiectul tău\r\n\r\nfunction Login({ setIsAuthenticated }) {\r\n  const [formData, setFormData] = useState({\r\n    email: '',\r\n    password: '',\r\n  });\r\n  \r\n  const [error, setError] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    setFormData({\r\n      ...formData,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    // Validare simplă\r\n    if (!formData.email || !formData.password) {\r\n      setError('Te rugăm să completezi toate câmpurile.');\r\n      return;\r\n    }\r\n    \r\n    setIsLoading(true);\r\n    setError('');\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/users/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      const data = await response.json();\r\n\r\n      if (data.success) {\r\n        // Stocăm token-ul în localStorage\r\n        localStorage.setItem('authToken', data.token);\r\n        \r\n        // IMPORTANT: Trebuie să stocăm userId-ul pentru a-l folosi în Profile.js\r\n        // Extragem userId din token sau facem o cerere separată\r\n        // Pentru simplitate, vom folosi direct această soluție deocamdată\r\n        \r\n        // Decodificăm token-ul pentru a extrage userId (metoda 1)\r\n        try {\r\n          // Metoda simplă de extragere a userId din token (fără librării)\r\n          const base64Url = data.token.split('.')[1];\r\n          const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\r\n          const jsonPayload = decodeURIComponent(atob(base64)\r\n            .split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));\r\n          const decoded = JSON.parse(jsonPayload);\r\n          \r\n          console.log(\"Decoded token:\", decoded); // Verificăm structura token-ului\r\n          \r\n          // Salvăm userId - verificăm unde este stocat în token (id sau userId)\r\n          localStorage.setItem('userId', decoded.id || decoded.userId);\r\n          console.log(\"Saved userId:\", decoded.id || decoded.userId);\r\n        } catch (err) {\r\n          console.error(\"Error decoding token:\", err);\r\n          // Ca soluție de rezervă, vom face o cerere pentru a obține userId-ul\r\n          await fetchUserProfile(data.token);\r\n        }\r\n        \r\n        // Setăm starea de autentificare\r\n        setIsAuthenticated(true);\r\n        \r\n        // Redirecționăm utilizatorul către pagina principală\r\n        navigate('/');\r\n      } else {\r\n        setError(data.message || 'Autentificare eșuată. Verifică email-ul și parola.');\r\n      }\r\n    } catch (error) {\r\n      console.error('Error during login:', error);\r\n      setError('Eroare de rețea. Te rugăm să încerci din nou.');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Funcție de rezervă pentru obținerea profilului și userId-ului\r\n  const fetchUserProfile = async (token) => {\r\n    try {\r\n      // Facem o cerere pentru a obține profilul utilizatorului (presupunem că există acest endpoint)\r\n      const response = await fetch('http://localhost:5000/api/users/profile', {\r\n        headers: {\r\n          'Authorization': `Bearer ${token}`\r\n        }\r\n      });\r\n      \r\n      if (response.ok) {\r\n        const userData = await response.json();\r\n        localStorage.setItem('userId', userData.user._id);\r\n        console.log(\"Fetched and saved userId:\", userData.user._id);\r\n      }\r\n    } catch (err) {\r\n      console.error(\"Error fetching user profile:\", err);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-container\">\r\n      <h1>Autentificare</h1>\r\n      \r\n      {error && <div className=\"error-message\">{error}</div>}\r\n      \r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"input-group\">\r\n          <label htmlFor=\"email\">Email</label>\r\n          <input\r\n            type=\"email\"\r\n            id=\"email\"\r\n            name=\"email\"\r\n            value={formData.email}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        \r\n        <div className=\"input-group\">\r\n          <label htmlFor=\"password\">Parolă</label>\r\n          <input\r\n            type=\"password\"\r\n            id=\"password\"\r\n            name=\"password\"\r\n            value={formData.password}\r\n            onChange={handleChange}\r\n            required\r\n          />\r\n        </div>\r\n        \r\n        <button \r\n          type=\"submit\" \r\n          className=\"submit-button\"\r\n          disabled={isLoading}\r\n        >\r\n          {isLoading ? 'Se procesează...' : 'Autentificare'}\r\n        </button>\r\n      </form>\r\n      \r\n      <div className=\"switch-page\">\r\n        Nu ai un cont? <Link to=\"/register\">Înregistrează-te</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}