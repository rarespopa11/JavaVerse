{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\InteractiveBackground.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport '../styles/InteractiveBackground.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InteractiveBackground = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const mousePosition = useRef({\n    x: 0,\n    y: 0\n  });\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    let animationFrameId;\n    let particles = [];\n    let codeLines = [];\n\n    // Setăm canvas-ul la dimensiunea ferestrei\n    const handleResize = () => {\n      canvas.width = window.innerWidth;\n      canvas.height = window.innerHeight;\n      initParticles();\n      initCodeLines();\n    };\n\n    // Urmărim poziția mouse-ului\n    const handleMouseMove = event => {\n      mousePosition.current = {\n        x: event.clientX,\n        y: event.clientY\n      };\n    };\n    window.addEventListener('resize', handleResize);\n    window.addEventListener('mousemove', handleMouseMove);\n    handleResize();\n\n    // Creăm particule\n    function initParticles() {\n      particles = [];\n      const particleCount = Math.floor(canvas.width * canvas.height / 10000);\n      for (let i = 0; i < particleCount; i++) {\n        particles.push({\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n          size: Math.random() * 2 + 0.5,\n          speedX: (Math.random() - 0.5) * 0.5,\n          speedY: (Math.random() - 0.5) * 0.5,\n          color: getRandomColor(),\n          alpha: Math.random() * 0.5 + 0.2\n        });\n      }\n    }\n\n    // Creăm linii de cod\n    function initCodeLines() {\n      codeLines = [];\n      const codeSnippets = [\"public class JavaVerse {\", \"  public static void main(String[] args) {\", \"    System.out.println(\\\"Hello, Student!\\\");\", \"  }\", \"}\", \"import java.util.Scanner;\", \"Scanner input = new Scanner(System.in);\", \"String name = input.nextLine();\", \"if (condition) {\", \"} else {\", \"for (int i = 0; i < n; i++) {\", \"while (true) {\", \"ArrayList<String> list = new ArrayList<>();\", \"try {\", \"} catch (Exception e) {\", \"} finally {\", \"return result;\", \"class Student implements Learner {\", \"@Override\", \"new Thread(() -> {}).start();\"];\n      const lineCount = Math.floor(canvas.width / 300);\n      for (let i = 0; i < lineCount; i++) {\n        codeLines.push({\n          x: Math.random() * canvas.width,\n          y: Math.random() * canvas.height,\n          text: codeSnippets[Math.floor(Math.random() * codeSnippets.length)],\n          alpha: Math.random() * 0.12 + 0.03,\n          font: `${Math.floor(Math.random() * 4 + 10)}px monospace`\n        });\n      }\n    }\n\n    // Funcție pentru culori aleatorii\n    function getRandomColor() {\n      const colors = ['138, 43, 226',\n      // violet\n      '75, 0, 130',\n      // indigo\n      '0, 255, 204',\n      // cyan\n      '255, 0, 255',\n      // magenta\n      '25, 25, 112' // midnight blue\n      ];\n      return colors[Math.floor(Math.random() * colors.length)];\n    }\n\n    // Desenăm fundalul\n    function drawBackground() {\n      // Gradient de fundal\n      const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\n      gradient.addColorStop(0, 'rgba(10, 10, 35, 1)');\n      gradient.addColorStop(1, 'rgba(30, 10, 60, 1)');\n      ctx.fillStyle = gradient;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      // Nebuloasă digitală\n      const glow = ctx.createRadialGradient(canvas.width / 2, canvas.height / 2, 0, canvas.width / 2, canvas.height / 2, canvas.width * 0.8);\n      glow.addColorStop(0, 'rgba(75, 0, 130, 0.05)');\n      glow.addColorStop(0.5, 'rgba(138, 43, 226, 0.03)');\n      glow.addColorStop(1, 'rgba(30, 10, 60, 0)');\n      ctx.fillStyle = glow;\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n    }\n\n    // Desenăm particule\n    function drawParticles() {\n      particles.forEach((particle, index) => {\n        // Calculăm distanța față de mouse\n        const dx = mousePosition.current.x - particle.x;\n        const dy = mousePosition.current.y - particle.y;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        const maxDistance = 200;\n\n        // Interacțiunea cu mouse-ul\n        if (distance < maxDistance) {\n          const force = (maxDistance - distance) / maxDistance;\n          particle.speedX += dx * force * 0.01;\n          particle.speedY += dy * force * 0.01;\n        }\n\n        // Actualizăm poziția\n        particle.x += particle.speedX;\n        particle.y += particle.speedY;\n\n        // Încetinire\n        particle.speedX *= 0.99;\n        particle.speedY *= 0.99;\n\n        // Verificăm marginile\n        if (particle.x < 0) particle.x = canvas.width;\n        if (particle.x > canvas.width) particle.x = 0;\n        if (particle.y < 0) particle.y = canvas.height;\n        if (particle.y > canvas.height) particle.y = 0;\n\n        // Desenăm particula\n        ctx.beginPath();\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\n        ctx.fillStyle = `rgba(${particle.color}, ${particle.alpha})`;\n        ctx.fill();\n\n        // Desenăm conexiuni între particule apropiate\n        particles.forEach((otherParticle, otherIndex) => {\n          if (index !== otherIndex) {\n            const dx = particle.x - otherParticle.x;\n            const dy = particle.y - otherParticle.y;\n            const distance = Math.sqrt(dx * dx + dy * dy);\n            if (distance < 100) {\n              ctx.beginPath();\n              ctx.moveTo(particle.x, particle.y);\n              ctx.lineTo(otherParticle.x, otherParticle.y);\n              const alpha = (100 - distance) / 500;\n              ctx.strokeStyle = `rgba(${particle.color}, ${alpha})`;\n              ctx.lineWidth = 0.2;\n              ctx.stroke();\n            }\n          }\n        });\n      });\n    }\n\n    // Desenăm liniile de cod\n    function drawCodeLines() {\n      codeLines.forEach(line => {\n        ctx.font = line.font;\n        ctx.fillStyle = `rgba(0, 255, 204, ${line.alpha})`;\n        ctx.fillText(line.text, line.x, line.y);\n\n        // Mișcăm ușor liniile de cod\n        line.y += 0.1;\n\n        // Resetăm poziția când ies din ecran\n        if (line.y > canvas.height) {\n          line.y = 0;\n          line.x = Math.random() * canvas.width;\n        }\n      });\n    }\n\n    // Funcția de animație\n    const animate = () => {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      drawBackground();\n      drawCodeLines();\n      drawParticles();\n      animationFrameId = window.requestAnimationFrame(animate);\n    };\n    animate();\n\n    // Curățăm event listeners și animația când componenta este demontată\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.cancelAnimationFrame(animationFrameId);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"interactive-background\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 225,\n    columnNumber: 10\n  }, this);\n};\n_s(InteractiveBackground, \"zdE6VMQBvQ9AatYgEdGa8nsFBfY=\");\n_c = InteractiveBackground;\nexport default InteractiveBackground;\nvar _c;\n$RefreshReg$(_c, \"InteractiveBackground\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","InteractiveBackground","_s","canvasRef","mousePosition","x","y","canvas","current","ctx","getContext","animationFrameId","particles","codeLines","handleResize","width","window","innerWidth","height","innerHeight","initParticles","initCodeLines","handleMouseMove","event","clientX","clientY","addEventListener","particleCount","Math","floor","i","push","random","size","speedX","speedY","color","getRandomColor","alpha","codeSnippets","lineCount","text","length","font","colors","drawBackground","gradient","createLinearGradient","addColorStop","fillStyle","fillRect","glow","createRadialGradient","drawParticles","forEach","particle","index","dx","dy","distance","sqrt","maxDistance","force","beginPath","arc","PI","fill","otherParticle","otherIndex","moveTo","lineTo","strokeStyle","lineWidth","stroke","drawCodeLines","line","fillText","animate","clearRect","requestAnimationFrame","removeEventListener","cancelAnimationFrame","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/InteractiveBackground.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport '../styles/InteractiveBackground.css';\r\n\r\nconst InteractiveBackground = () => {\r\n  const canvasRef = useRef(null);\r\n  const mousePosition = useRef({ x: 0, y: 0 });\r\n  \r\n  useEffect(() => {\r\n    const canvas = canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n    let animationFrameId;\r\n    let particles = [];\r\n    let codeLines = [];\r\n    \r\n    // Setăm canvas-ul la dimensiunea ferestrei\r\n    const handleResize = () => {\r\n      canvas.width = window.innerWidth;\r\n      canvas.height = window.innerHeight;\r\n      initParticles();\r\n      initCodeLines();\r\n    };\r\n    \r\n    // Urmărim poziția mouse-ului\r\n    const handleMouseMove = (event) => {\r\n      mousePosition.current = {\r\n        x: event.clientX,\r\n        y: event.clientY\r\n      };\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    window.addEventListener('mousemove', handleMouseMove);\r\n    handleResize();\r\n    \r\n    // Creăm particule\r\n    function initParticles() {\r\n      particles = [];\r\n      const particleCount = Math.floor((canvas.width * canvas.height) / 10000);\r\n      \r\n      for (let i = 0; i < particleCount; i++) {\r\n        particles.push({\r\n          x: Math.random() * canvas.width,\r\n          y: Math.random() * canvas.height,\r\n          size: Math.random() * 2 + 0.5,\r\n          speedX: (Math.random() - 0.5) * 0.5,\r\n          speedY: (Math.random() - 0.5) * 0.5,\r\n          color: getRandomColor(),\r\n          alpha: Math.random() * 0.5 + 0.2\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Creăm linii de cod\r\n    function initCodeLines() {\r\n      codeLines = [];\r\n      const codeSnippets = [\r\n        \"public class JavaVerse {\",\r\n        \"  public static void main(String[] args) {\",\r\n        \"    System.out.println(\\\"Hello, Student!\\\");\",\r\n        \"  }\",\r\n        \"}\",\r\n        \"import java.util.Scanner;\",\r\n        \"Scanner input = new Scanner(System.in);\",\r\n        \"String name = input.nextLine();\",\r\n        \"if (condition) {\",\r\n        \"} else {\",\r\n        \"for (int i = 0; i < n; i++) {\",\r\n        \"while (true) {\",\r\n        \"ArrayList<String> list = new ArrayList<>();\",\r\n        \"try {\",\r\n        \"} catch (Exception e) {\",\r\n        \"} finally {\",\r\n        \"return result;\",\r\n        \"class Student implements Learner {\",\r\n        \"@Override\",\r\n        \"new Thread(() -> {}).start();\"\r\n      ];\r\n      \r\n      const lineCount = Math.floor(canvas.width / 300);\r\n      \r\n      for (let i = 0; i < lineCount; i++) {\r\n        codeLines.push({\r\n          x: Math.random() * canvas.width,\r\n          y: Math.random() * canvas.height,\r\n          text: codeSnippets[Math.floor(Math.random() * codeSnippets.length)],\r\n          alpha: Math.random() * 0.12 + 0.03,\r\n          font: `${Math.floor(Math.random() * 4 + 10)}px monospace`\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Funcție pentru culori aleatorii\r\n    function getRandomColor() {\r\n      const colors = [\r\n        '138, 43, 226',   // violet\r\n        '75, 0, 130',     // indigo\r\n        '0, 255, 204',    // cyan\r\n        '255, 0, 255',    // magenta\r\n        '25, 25, 112'     // midnight blue\r\n      ];\r\n      return colors[Math.floor(Math.random() * colors.length)];\r\n    }\r\n    \r\n    // Desenăm fundalul\r\n    function drawBackground() {\r\n      // Gradient de fundal\r\n      const gradient = ctx.createLinearGradient(0, 0, canvas.width, canvas.height);\r\n      gradient.addColorStop(0, 'rgba(10, 10, 35, 1)');\r\n      gradient.addColorStop(1, 'rgba(30, 10, 60, 1)');\r\n      ctx.fillStyle = gradient;\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n      \r\n      // Nebuloasă digitală\r\n      const glow = ctx.createRadialGradient(\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        0,\r\n        canvas.width / 2,\r\n        canvas.height / 2,\r\n        canvas.width * 0.8\r\n      );\r\n      glow.addColorStop(0, 'rgba(75, 0, 130, 0.05)');\r\n      glow.addColorStop(0.5, 'rgba(138, 43, 226, 0.03)');\r\n      glow.addColorStop(1, 'rgba(30, 10, 60, 0)');\r\n      \r\n      ctx.fillStyle = glow;\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n    }\r\n    \r\n    // Desenăm particule\r\n    function drawParticles() {\r\n      particles.forEach((particle, index) => {\r\n        // Calculăm distanța față de mouse\r\n        const dx = mousePosition.current.x - particle.x;\r\n        const dy = mousePosition.current.y - particle.y;\r\n        const distance = Math.sqrt(dx * dx + dy * dy);\r\n        const maxDistance = 200;\r\n        \r\n        // Interacțiunea cu mouse-ul\r\n        if (distance < maxDistance) {\r\n          const force = (maxDistance - distance) / maxDistance;\r\n          particle.speedX += dx * force * 0.01;\r\n          particle.speedY += dy * force * 0.01;\r\n        }\r\n        \r\n        // Actualizăm poziția\r\n        particle.x += particle.speedX;\r\n        particle.y += particle.speedY;\r\n        \r\n        // Încetinire\r\n        particle.speedX *= 0.99;\r\n        particle.speedY *= 0.99;\r\n        \r\n        // Verificăm marginile\r\n        if (particle.x < 0) particle.x = canvas.width;\r\n        if (particle.x > canvas.width) particle.x = 0;\r\n        if (particle.y < 0) particle.y = canvas.height;\r\n        if (particle.y > canvas.height) particle.y = 0;\r\n        \r\n        // Desenăm particula\r\n        ctx.beginPath();\r\n        ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);\r\n        ctx.fillStyle = `rgba(${particle.color}, ${particle.alpha})`;\r\n        ctx.fill();\r\n        \r\n        // Desenăm conexiuni între particule apropiate\r\n        particles.forEach((otherParticle, otherIndex) => {\r\n          if (index !== otherIndex) {\r\n            const dx = particle.x - otherParticle.x;\r\n            const dy = particle.y - otherParticle.y;\r\n            const distance = Math.sqrt(dx * dx + dy * dy);\r\n            \r\n            if (distance < 100) {\r\n              ctx.beginPath();\r\n              ctx.moveTo(particle.x, particle.y);\r\n              ctx.lineTo(otherParticle.x, otherParticle.y);\r\n              const alpha = (100 - distance) / 500;\r\n              ctx.strokeStyle = `rgba(${particle.color}, ${alpha})`;\r\n              ctx.lineWidth = 0.2;\r\n              ctx.stroke();\r\n            }\r\n          }\r\n        });\r\n      });\r\n    }\r\n    \r\n    // Desenăm liniile de cod\r\n    function drawCodeLines() {\r\n      codeLines.forEach(line => {\r\n        ctx.font = line.font;\r\n        ctx.fillStyle = `rgba(0, 255, 204, ${line.alpha})`;\r\n        ctx.fillText(line.text, line.x, line.y);\r\n        \r\n        // Mișcăm ușor liniile de cod\r\n        line.y += 0.1;\r\n        \r\n        // Resetăm poziția când ies din ecran\r\n        if (line.y > canvas.height) {\r\n          line.y = 0;\r\n          line.x = Math.random() * canvas.width;\r\n        }\r\n      });\r\n    }\r\n    \r\n    // Funcția de animație\r\n    const animate = () => {\r\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n      drawBackground();\r\n      drawCodeLines();\r\n      drawParticles();\r\n      \r\n      animationFrameId = window.requestAnimationFrame(animate);\r\n    };\r\n    \r\n    animate();\r\n    \r\n    // Curățăm event listeners și animația când componenta este demontată\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      window.removeEventListener('mousemove', handleMouseMove);\r\n      window.cancelAnimationFrame(animationFrameId);\r\n    };\r\n  }, []);\r\n  \r\n  return <canvas ref={canvasRef} className=\"interactive-background\"></canvas>;\r\n};\r\n\r\nexport default InteractiveBackground;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}