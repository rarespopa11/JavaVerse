{"ast":null,"code":"// src/utils/AccessibilityManager.js\nclass AccessibilityManager {\n  constructor() {\n    this.isAccessibilityMode = false;\n    this.speechSynthesis = window.speechSynthesis;\n    this.currentUtterance = null;\n    this.voice = null;\n    this.isReading = false;\n    this.readingQueue = [];\n    this.shortcuts = new Map();\n    this.focusedElement = null;\n    this.navigationMode = 'normal';\n    this.currentFocusIndex = 0;\n    this.focusableElements = [];\n    this.navigationHistory = [];\n    this.readingSpeed = 1.0;\n    this.isTyping = false; // Flag pentru modul de tastare\n    this.typingBuffer = ''; // Buffer pentru caractere tastate\n    this.lastTypedTime = 0; // Timestamp pentru ultimul caracter\n    this.currentLineContent = ''; // Conținutul liniei curente\n\n    this.initializeVoice();\n    this.setupGlobalListeners();\n    this.registerShortcuts();\n  }\n  initializeVoice() {\n    const setVoice = () => {\n      var _this$voice;\n      const voices = this.speechSynthesis.getVoices();\n      // Prioritizăm vocile în română\n      this.voice = voices.find(voice => voice.lang.startsWith('ro-RO')) || voices.find(voice => voice.lang.startsWith('ro')) || voices[0];\n      console.log('Voice initialized:', ((_this$voice = this.voice) === null || _this$voice === void 0 ? void 0 : _this$voice.name) || 'Default');\n    };\n    if (this.speechSynthesis.getVoices().length > 0) {\n      setVoice();\n    } else {\n      this.speechSynthesis.addEventListener('voiceschanged', setVoice);\n    }\n  }\n  setupGlobalListeners() {\n    document.addEventListener('keydown', e => {\n      // Alt + A pentru activarea modului (evităm Ctrl+Shift care poate avea conflicte)\n      if (e.altKey && e.key === 'a') {\n        e.preventDefault();\n        e.stopPropagation();\n        this.toggleAccessibilityMode();\n        return;\n      }\n      if (!this.isAccessibilityMode) return;\n\n      // Prevenim comportamentul default pentru taste speciale\n      if (['Tab', 'Enter', ' ', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      this.handleAccessibilityShortcuts(e);\n    });\n\n    // Actualizăm lista de elemente focusabile când se schimbă DOM-ul\n    const observer = new MutationObserver(() => {\n      if (this.isAccessibilityMode) {\n        this.updateFocusableElements();\n      }\n    });\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n  registerShortcuts() {\n    // Comenzi pentru modul NAVIGARE (când NU suntem în input)\n    this.navigationShortcuts = new Map();\n\n    // Navigare principală\n    this.navigationShortcuts.set('Tab', () => this.navigateNext());\n    this.navigationShortcuts.set('Shift+Tab', () => this.navigatePrevious());\n    this.navigationShortcuts.set('Enter', () => this.activateElement());\n    this.navigationShortcuts.set('Escape', () => this.stopReading());\n\n    // Navigare rapidă cu F-keys pentru a evita conflictele\n    this.navigationShortcuts.set('F1', () => this.readHelp());\n    this.navigationShortcuts.set('F2', () => this.navigateToSection('header'));\n    this.navigationShortcuts.set('F3', () => this.navigateToSection('main'));\n    this.navigationShortcuts.set('F4', () => this.navigateToSection('footer'));\n\n    // Navigare cu Ctrl+ pentru pagini\n    this.navigationShortcuts.set('Ctrl+Shift+C', () => this.navigateToCourses());\n    this.navigationShortcuts.set('Ctrl+Shift+P', () => this.navigateToPlayground());\n    this.navigationShortcuts.set('Ctrl+Shift+R', () => this.navigateToProfile());\n    this.navigationShortcuts.set('Ctrl+Shift+H', () => this.goHome());\n\n    // Navigare prin elemente cu Ctrl+\n    this.navigationShortcuts.set('Ctrl+B', () => this.nextButton());\n    this.navigationShortcuts.set('Ctrl+L', () => this.nextLink());\n    this.navigationShortcuts.set('Ctrl+T', () => this.nextHeading());\n\n    // Comenzi utilitare\n    this.navigationShortcuts.set('Ctrl+M', () => this.readCurrentPage());\n    this.navigationShortcuts.set('Ctrl+N', () => this.readNavigationInfo());\n    this.navigationShortcuts.set('Ctrl+Shift+S', () => this.adjustSpeed());\n    this.navigationShortcuts.set('Ctrl+Shift+L', () => this.listAllElements());\n\n    // Comenzi pentru modul TASTARE (când suntem în input)\n    this.typingShortcuts = new Map();\n\n    // Ctrl+Enter pentru a ieși din modul editare\n    this.typingShortcuts.set('Ctrl+Enter', () => this.exitTypingMode());\n\n    // Ctrl+L pentru a citi linia curentă\n    this.typingShortcuts.set('Ctrl+L', () => this.readCurrentLine());\n\n    // Ctrl+W pentru a citi ultimul cuvânt\n    this.typingShortcuts.set('Ctrl+W', () => this.readLastWord());\n\n    // Ctrl+Shift+L pentru a citi tot textul\n    this.typingShortcuts.set('Ctrl+Shift+L', () => this.readAllText());\n\n    // Pentru editor de cod\n    this.typingShortcuts.set('Ctrl+Shift+E', () => this.executeCode());\n    this.typingShortcuts.set('Ctrl+Shift+F', () => this.getFeedback());\n  }\n  handleNavigationMode(e) {\n    const key = this.getShortcutKey(e);\n    const handler = this.navigationShortcuts.get(key);\n    if (handler) {\n      e.preventDefault();\n      handler();\n    }\n  }\n  handleTypingMode(e) {\n    const key = this.getShortcutKey(e);\n    const handler = this.typingShortcuts.get(key);\n    if (handler) {\n      e.preventDefault();\n      handler();\n      return;\n    }\n\n    // Pentru navigare în editor cu săgeți\n    if (e.target.classList.contains('monaco-editor') || e.target.closest('.monaco-editor')) {\n      this.handleCodeNavigation(e);\n    }\n  }\n  handleTextInput(e) {\n    const target = e.target;\n    const value = target.value;\n    const cursorPosition = target.selectionStart;\n\n    // Determinăm ce a fost tastat\n    const currentChar = value.charAt(cursorPosition - 1);\n\n    // Adăugăm la buffer pentru citire\n    this.typingBuffer += currentChar;\n    this.lastTypedTime = Date.now();\n\n    // Citim caracterul imediat\n    if (currentChar && currentChar !== ' ') {\n      this.speak(this.getCharacterName(currentChar), 'normal');\n    } else if (currentChar === ' ') {\n      // La spațiu, citim ultimul cuvânt\n      this.readLastWordFromBuffer();\n    }\n\n    // Resetăm buffer-ul după o pauză\n    setTimeout(() => {\n      if (Date.now() - this.lastTypedTime > 1000) {\n        this.typingBuffer = '';\n      }\n    }, 1000);\n  }\n  handleCodeNavigation(e) {\n    // Pentru editor Monaco, tratăm special săgețile sus/jos\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n      // Așteaptă puțin pentru ca editorul să își actualizeze poziția\n      setTimeout(() => {\n        this.readCurrentCodeLine();\n      }, 50);\n    }\n  }\n  getCharacterName(char) {\n    // Caractere speciale\n    const specialChars = {\n      ' ': 'spațiu',\n      '.': 'punct',\n      ',': 'virgulă',\n      ';': 'punct și virgulă',\n      ':': 'două puncte',\n      '!': 'semnul exclamării',\n      '?': 'semnul întrebării',\n      '\"': 'ghilimele',\n      \"'\": 'apostrof',\n      '(': 'paranteză deschisă',\n      ')': 'paranteză închisă',\n      '[': 'paranteză pătrată deschisă',\n      ']': 'paranteză pătrată închisă',\n      '{': 'acoladă deschisă',\n      '}': 'acoladă închisă',\n      '+': 'plus',\n      '-': 'minus',\n      '*': 'asterisc',\n      '/': 'slash',\n      '\\\\': 'backslash',\n      '=': 'egal',\n      '<': 'mai mic',\n      '>': 'mai mare',\n      '@': 'arond',\n      '#': 'diez',\n      '$': 'dolar',\n      '%': 'procent',\n      '^': 'circumflex',\n      '&': 'ampersand',\n      '_': 'underscore',\n      '|': 'bară verticală',\n      '~': 'tildă',\n      '`': 'accent grav',\n      '\\n': 'linie nouă',\n      '\\t': 'tab'\n    };\n\n    // Pentru cifre\n    if (/\\d/.test(char)) {\n      return `cifra ${char}`;\n    }\n\n    // Pentru litere mari\n    if (/[A-Z]/.test(char)) {\n      return `${char} mare`;\n    }\n    return specialChars[char] || char;\n  }\n  readLastWordFromBuffer() {\n    const words = this.typingBuffer.trim().split(/\\s+/);\n    const lastWord = words[words.length - 1];\n    if (lastWord && lastWord.length > 0) {\n      this.speak(lastWord, 'normal');\n    }\n  }\n  readCurrentLine() {\n    const activeElement = document.activeElement;\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\n      const value = activeElement.value;\n      const cursorPosition = activeElement.selectionStart;\n\n      // Găsim începutul și sfârșitul liniei curente\n      let lineStart = value.lastIndexOf('\\n', cursorPosition - 1) + 1;\n      let lineEnd = value.indexOf('\\n', cursorPosition);\n      if (lineEnd === -1) lineEnd = value.length;\n      const currentLine = value.substring(lineStart, lineEnd);\n      if (currentLine.trim()) {\n        this.speak(`Linia curentă: ${currentLine}`, 'high');\n      } else {\n        this.speak('Linie goală', 'high');\n      }\n    }\n  }\n  readCurrentCodeLine() {\n    // Pentru Monaco Editor\n    const monacoEditor = document.querySelector('.monaco-editor');\n    if (monacoEditor) {\n      // Găsim linia activă în Monaco\n      const activeLine = monacoEditor.querySelector('.active-line');\n      if (activeLine) {\n        const lineContent = activeLine.textContent.trim();\n        const lineNumber = this.getMonacoLineNumber();\n        if (lineContent) {\n          this.speak(`Linia ${lineNumber}: ${lineContent}`, 'high');\n        } else {\n          this.speak(`Linia ${lineNumber}: goală`, 'high');\n        }\n      }\n    }\n  }\n  getMonacoLineNumber() {\n    // Găsim numărul liniei din Monaco\n    const lineNumbers = document.querySelector('.margin-view-overlays');\n    if (lineNumbers) {\n      const activeLineNumber = lineNumbers.querySelector('.active-line-number');\n      if (activeLineNumber) {\n        return activeLineNumber.textContent.trim();\n      }\n    }\n    return '1';\n  }\n  readLastWord() {\n    const activeElement = document.activeElement;\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\n      const value = activeElement.value;\n      const cursorPosition = activeElement.selectionStart;\n\n      // Găsim ultimul cuvânt înainte de cursor\n      const textBeforeCursor = value.substring(0, cursorPosition);\n      const words = textBeforeCursor.trim().split(/\\s+/);\n      const lastWord = words[words.length - 1];\n      if (lastWord) {\n        this.speak(`Ultimul cuvânt: ${lastWord}`, 'high');\n      } else {\n        this.speak('Niciun cuvânt', 'high');\n      }\n    }\n  }\n  readAllText() {\n    const activeElement = document.activeElement;\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\n      const value = activeElement.value;\n      if (value.trim()) {\n        this.speak(`Textul complet: ${value}`, 'high');\n      } else {\n        this.speak('Câmpul este gol', 'high');\n      }\n    }\n  }\n  exitTypingMode() {\n    const activeElement = document.activeElement;\n    if (activeElement) {\n      activeElement.blur();\n      this.speak('Mod editare dezactivat. Navigare reactivată', 'high');\n\n      // Re-focusăm elementul pentru navigare\n      setTimeout(() => {\n        this.setFocus(activeElement);\n      }, 100);\n    }\n  }\n  toggleAccessibilityMode() {\n    this.isAccessibilityMode = !this.isAccessibilityMode;\n    if (this.isAccessibilityMode) {\n      this.speak(\"Modul pentru nevăzători activat. Bine ai venit în JavaVerse!\", 'high');\n      this.addAccessibilityStyles();\n      this.updateFocusableElements();\n      setTimeout(() => {\n        this.readWelcomeMessage();\n      }, 2000);\n    } else {\n      this.speak(\"Modul pentru nevăzători dezactivat.\");\n      this.removeAccessibilityStyles();\n      this.stopReading();\n    }\n    document.dispatchEvent(new CustomEvent('accessibilityModeChanged', {\n      detail: {\n        isActive: this.isAccessibilityMode\n      }\n    }));\n  }\n  readWelcomeMessage() {\n    const welcomeText = `\n      Bine ai venit în modul pentru nevăzători JavaVerse!\n      \n      Comenzi principale:\n      - Tab și Shift Tab pentru navigare între elemente\n      - Enter pentru a activa elementul selectat\n      - Escape pentru a opri citirea\n      \n      Navigare rapidă:\n      - F1 pentru ajutor\n      - F2, F3, F4 pentru header, conținut principal, footer\n      - Control Shift C pentru cursuri\n      - Control Shift P pentru playground\n      - Control Shift R pentru profil\n      - Control Shift H pentru pagina principală\n      \n      Navigare prin elemente:\n      - Control B pentru următorul buton\n      - Control L pentru următorul link\n      - Control T pentru următorul titlu\n      \n      În câmpuri de text:\n      - Caracterele sunt citite în timp ce tastezi\n      - Spațiu citește ultimul cuvânt\n      - Control L pentru a citi linia curentă\n      - Control W pentru ultimul cuvânt\n      - Control Shift L pentru tot textul\n      - Control Enter pentru a ieși din editare\n      \n      În editor de cod:\n      - Săgețile sus și jos citesc automat linia curentă\n      - Control Shift E pentru execuție\n      - Control Shift F pentru feedback AI\n      \n      Apasă F1 oricând pentru ajutor contextual.\n    `;\n    this.speak(welcomeText, 'high');\n  }\n  updateFocusableElements() {\n    const selectors = ['a[href]:not([disabled])', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])', 'textarea:not([disabled])', '[tabindex]:not([tabindex=\"-1\"])', '.course-card', '.question-container li', '.feature-card', '.example-card', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', '[role=\"button\"]:not([disabled])', '[role=\"link\"]', '[role=\"navigation\"]', '[role=\"main\"]'];\n    this.focusableElements = Array.from(document.querySelectorAll(selectors.join(', '))).filter(el => {\n      // Verificăm dacă elementul este vizibil\n      const rect = el.getBoundingClientRect();\n      return rect.width > 0 && rect.height > 0 && el.offsetParent !== null;\n    }).sort((a, b) => {\n      // Sortăm elementele după poziția lor în pagină\n      const rectA = a.getBoundingClientRect();\n      const rectB = b.getBoundingClientRect();\n      if (Math.abs(rectA.top - rectB.top) < 10) {\n        return rectA.left - rectB.left;\n      }\n      return rectA.top - rectB.top;\n    });\n  }\n  navigateNext() {\n    this.updateFocusableElements();\n    if (this.focusableElements.length === 0) {\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\n      return;\n    }\n    this.currentFocusIndex = (this.currentFocusIndex + 1) % this.focusableElements.length;\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\n  }\n  navigatePrevious() {\n    this.updateFocusableElements();\n    if (this.focusableElements.length === 0) {\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\n      return;\n    }\n    this.currentFocusIndex = this.currentFocusIndex === 0 ? this.focusableElements.length - 1 : this.currentFocusIndex - 1;\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\n  }\n  setFocus(element) {\n    if (!element) return;\n\n    // Eliminăm focus-ul anterior\n    document.querySelectorAll('.accessibility-focus').forEach(el => {\n      el.classList.remove('accessibility-focus');\n    });\n\n    // Setăm noul focus\n    this.focusedElement = element;\n    element.classList.add('accessibility-focus');\n\n    // Scroll smooth în vedere\n    element.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n      inline: 'nearest'\n    });\n\n    // Focus real pentru inputuri\n    if (['INPUT', 'TEXTAREA', 'SELECT'].includes(element.tagName)) {\n      element.focus();\n    }\n\n    // Citim informații despre element\n    this.readElementInfo(element);\n  }\n  readElementInfo(element) {\n    var _element$textContent, _document$querySelect, _document$querySelect2, _element$options$elem, _document$querySelect3;\n    let description = '';\n    const tagName = element.tagName.toLowerCase();\n    const ariaLabel = element.getAttribute('aria-label');\n    const text = (_element$textContent = element.textContent) === null || _element$textContent === void 0 ? void 0 : _element$textContent.trim();\n\n    // Prioritizăm aria-label\n    if (ariaLabel) {\n      description = ariaLabel;\n    } else {\n      // Descrieri specifice pentru fiecare tip de element\n      switch (tagName) {\n        case 'button':\n          description = `Buton: ${text || 'Fără text'}`;\n          break;\n        case 'a':\n          description = `Link: ${text || 'Fără text'}`;\n          break;\n        case 'input':\n          const inputType = element.type;\n          const inputLabel = (_document$querySelect = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.textContent;\n          const inputValue = element.value;\n          if (inputType === 'text' || inputType === 'email' || inputType === 'password') {\n            description = `Câmp ${inputType}: ${inputLabel || element.placeholder || 'Fără etichetă'}`;\n            if (inputValue) {\n              description += `. Valoare curentă: ${inputType === 'password' ? 'parolă introdusă' : inputValue}`;\n            }\n          } else if (inputType === 'radio' || inputType === 'checkbox') {\n            description = `${inputType === 'radio' ? 'Opțiune' : 'Bifă'}: ${inputLabel || text}. ${element.checked ? 'Selectat' : 'Neselectat'}`;\n          }\n          break;\n        case 'select':\n          const selectLabel = (_document$querySelect2 = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.textContent;\n          const selectedOption = (_element$options$elem = element.options[element.selectedIndex]) === null || _element$options$elem === void 0 ? void 0 : _element$options$elem.text;\n          description = `Listă derulantă: ${selectLabel || 'Fără etichetă'}. Selectat: ${selectedOption || 'Nimic'}`;\n          break;\n        case 'textarea':\n          const textareaLabel = (_document$querySelect3 = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.textContent;\n          description = `Zonă de text: ${textareaLabel || element.placeholder || 'Fără etichetă'}`;\n          if (element.value) {\n            description += `. ${element.value.length} caractere introduse`;\n          }\n          break;\n        case 'h1':\n        case 'h2':\n        case 'h3':\n        case 'h4':\n        case 'h5':\n        case 'h6':\n          const level = tagName.charAt(1);\n          description = `Titlu nivel ${level}: ${text}`;\n          break;\n        default:\n          // Pentru elemente custom (carduri, etc.)\n          if (element.classList.contains('course-card')) {\n            var _element$querySelecto, _element$querySelecto2;\n            const title = (_element$querySelecto = element.querySelector('.course-title')) === null || _element$querySelecto === void 0 ? void 0 : _element$querySelecto.textContent;\n            const desc = (_element$querySelecto2 = element.querySelector('.course-description')) === null || _element$querySelecto2 === void 0 ? void 0 : _element$querySelecto2.textContent;\n            description = `Curs: ${title}. ${desc}`;\n          } else if (element.classList.contains('feature-card')) {\n            var _element$querySelecto3, _element$querySelecto4;\n            const title = (_element$querySelecto3 = element.querySelector('h3')) === null || _element$querySelecto3 === void 0 ? void 0 : _element$querySelecto3.textContent;\n            const desc = (_element$querySelecto4 = element.querySelector('p')) === null || _element$querySelecto4 === void 0 ? void 0 : _element$querySelecto4.textContent;\n            description = `Caracteristică: ${title}. ${desc}`;\n          } else if (element.classList.contains('example-card')) {\n            var _element$querySelecto5;\n            const title = ((_element$querySelecto5 = element.querySelector('.card-title')) === null || _element$querySelecto5 === void 0 ? void 0 : _element$querySelecto5.textContent) || text;\n            description = `Exemplu de cod: ${title}`;\n          } else {\n            description = text || `Element ${tagName}`;\n          }\n      }\n    }\n\n    // Adăugăm indicații pentru interacțiune\n    if (['button', 'a'].includes(tagName) || element.getAttribute('role') === 'button') {\n      description += \". Apasă Enter pentru a activa\";\n    } else if (['input', 'textarea', 'select'].includes(tagName)) {\n      description += \". Apasă Enter pentru a edita\";\n    }\n    this.speak(description, 'high');\n  }\n  activateElement() {\n    if (!this.focusedElement) {\n      this.speak(\"Niciun element selectat\", 'high');\n      return;\n    }\n    const tagName = this.focusedElement.tagName.toLowerCase();\n\n    // Pentru inputuri, permitem editarea\n    if (['input', 'textarea', 'select'].includes(tagName)) {\n      this.focusedElement.focus();\n      this.speak(\"Mod editare activat. Apasă Escape când termini\", 'high');\n\n      // Dezactivăm temporar navigarea pentru a permite tastarea\n      this.temporarilyDisableNavigation();\n      return;\n    }\n\n    // Pentru alte elemente, simulăm click\n    this.speak(\"Activez elementul\", 'normal');\n    if (this.focusedElement.click) {\n      this.focusedElement.click();\n    } else if (tagName === 'a') {\n      window.location.href = this.focusedElement.href;\n    }\n  }\n  temporarilyDisableNavigation() {\n    const handleEscape = e => {\n      if (e.key === 'Escape') {\n        e.preventDefault();\n        document.removeEventListener('keydown', handleEscape, true);\n\n        // Re-focusăm elementul și anunțăm\n        if (this.focusedElement) {\n          this.focusedElement.blur();\n          this.speak(\"Mod editare dezactivat. Navigare reactivată\", 'high');\n          this.setFocus(this.focusedElement);\n        }\n      }\n    };\n\n    // Captură pentru Escape cu prioritate mare\n    document.addEventListener('keydown', handleEscape, true);\n  }\n\n  // Navigare rapidă la secțiuni\n  navigateToSection(sectionName) {\n    let selector;\n    let announcement;\n    switch (sectionName) {\n      case 'header':\n        selector = 'header, [role=\"banner\"], .jv-header';\n        announcement = \"Navighez la header\";\n        break;\n      case 'main':\n        selector = 'main, [role=\"main\"], .body-content';\n        announcement = \"Navighez la conținutul principal\";\n        break;\n      case 'footer':\n        selector = 'footer, [role=\"contentinfo\"], .jv-footer';\n        announcement = \"Navighez la footer\";\n        break;\n    }\n    const section = document.querySelector(selector);\n    if (section) {\n      this.speak(announcement, 'high');\n\n      // Găsim primul element focusabil din secțiune\n      const firstFocusable = section.querySelector('a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n      if (firstFocusable) {\n        const index = this.focusableElements.indexOf(firstFocusable);\n        if (index !== -1) {\n          this.currentFocusIndex = index;\n          this.setFocus(firstFocusable);\n        }\n      } else {\n        section.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start'\n        });\n        this.speak(\"Secțiune fără elemente interactive\", 'normal');\n      }\n    } else {\n      this.speak(\"Secțiunea nu a fost găsită\", 'high');\n    }\n  }\n\n  // Navigare prin tipuri de elemente\n  nextButton() {\n    this.navigateToNextOfType('button, [role=\"button\"]', 'buton');\n  }\n  nextLink() {\n    this.navigateToNextOfType('a[href]', 'link');\n  }\n  nextInput() {\n    this.navigateToNextOfType('input, textarea, select', 'câmp de input');\n  }\n  nextHeading() {\n    this.navigateToNextOfType('h1, h2, h3, h4, h5, h6', 'titlu');\n  }\n  navigateToNextOfType(selector, typeName) {\n    const elements = Array.from(document.querySelectorAll(selector)).filter(el => el.offsetParent !== null);\n    if (elements.length === 0) {\n      this.speak(`Nu există ${typeName} pe această pagină`, 'high');\n      return;\n    }\n    let nextIndex = -1;\n    if (this.focusedElement) {\n      const currentTypeIndex = elements.indexOf(this.focusedElement);\n      if (currentTypeIndex !== -1) {\n        nextIndex = (currentTypeIndex + 1) % elements.length;\n      } else {\n        // Găsim următorul element de acest tip după elementul curent\n        const currentRect = this.focusedElement.getBoundingClientRect();\n        for (let i = 0; i < elements.length; i++) {\n          const rect = elements[i].getBoundingClientRect();\n          if (rect.top > currentRect.top || Math.abs(rect.top - currentRect.top) < 10 && rect.left > currentRect.left) {\n            nextIndex = i;\n            break;\n          }\n        }\n      }\n    }\n    if (nextIndex === -1) {\n      nextIndex = 0;\n    }\n    const targetElement = elements[nextIndex];\n    const globalIndex = this.focusableElements.indexOf(targetElement);\n    if (globalIndex !== -1) {\n      this.currentFocusIndex = globalIndex;\n      this.setFocus(targetElement);\n    }\n  }\n\n  // Ajustare viteză citire\n  adjustSpeed() {\n    const speeds = [0.7, 0.85, 1.0, 1.15, 1.3];\n    const currentIndex = speeds.indexOf(this.readingSpeed);\n    const nextIndex = (currentIndex + 1) % speeds.length;\n    this.readingSpeed = speeds[nextIndex];\n    this.speak(`Viteză de citire: ${Math.round(this.readingSpeed * 100)}%`, 'high');\n  }\n\n  // Îmbunătățire pentru speak cu viteză ajustabilă\n  speak(text, priority = 'normal') {\n    if (!text || text.trim() === '') return;\n    if (priority === 'high') {\n      this.stopReading();\n    }\n    const utterance = new SpeechSynthesisUtterance(text);\n    if (this.voice) {\n      utterance.voice = this.voice;\n    }\n    utterance.rate = this.readingSpeed;\n    utterance.pitch = 1.0;\n    utterance.volume = 1.0;\n    utterance.onstart = () => {\n      this.isReading = true;\n      this.currentUtterance = utterance;\n\n      // Trimitem event pentru UI\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n        detail: {\n          isSpeaking: true\n        }\n      }));\n    };\n    utterance.onend = () => {\n      this.isReading = false;\n      this.currentUtterance = null;\n      this.processQueue();\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n        detail: {\n          isSpeaking: false\n        }\n      }));\n    };\n    utterance.onerror = e => {\n      console.error('Speech synthesis error:', e);\n      this.isReading = false;\n      this.currentUtterance = null;\n    };\n    if (this.isReading && priority !== 'high') {\n      this.readingQueue.push(utterance);\n    } else {\n      this.speechSynthesis.speak(utterance);\n    }\n  }\n\n  // Navigare înapoi\n  navigateBack() {\n    if (this.navigationHistory.length > 0) {\n      const previousUrl = this.navigationHistory.pop();\n      this.speak(\"Navighez înapoi\", 'high');\n      window.location.href = previousUrl;\n    } else {\n      this.speak(\"Nu există istoric de navigare\", 'high');\n    }\n  }\n\n  // Listare elemente\n  listAllElements() {\n    this.updateFocusableElements();\n    const totalElements = this.focusableElements.length;\n    const currentPosition = this.currentFocusIndex + 1;\n    let summary = `Pagina conține ${totalElements} elemente interactive. `;\n    summary += `Ești la elementul ${currentPosition} din ${totalElements}. `;\n\n    // Numărăm tipurile de elemente\n    const counts = {\n      buttons: document.querySelectorAll('button, [role=\"button\"]').length,\n      links: document.querySelectorAll('a[href]').length,\n      inputs: document.querySelectorAll('input, textarea, select').length,\n      headings: document.querySelectorAll('h1, h2, h3, h4, h5, h6').length\n    };\n    summary += `Găsit: ${counts.buttons} butoane, ${counts.links} linkuri, `;\n    summary += `${counts.inputs} câmpuri de input, ${counts.headings} titluri.`;\n    this.speak(summary, 'high');\n  }\n\n  // Navigare rapidă pentru pagini\n  navigateToCourses() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la cursuri\", 'high');\n    window.location.href = '/courses';\n  }\n  navigateToPlayground() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la playground\", 'high');\n    window.location.href = '/playground';\n  }\n  navigateToProfile() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la profil\", 'high');\n    window.location.href = '/profile';\n  }\n  goHome() {\n    this.navigationHistory.push(window.location.href);\n    this.speak(\"Navighez la pagina principală\", 'high');\n    window.location.href = '/';\n  }\n\n  // Funcții pentru quiz\n  selectQuizOption(index) {\n    const options = document.querySelectorAll('.question-container li');\n    if (options[index]) {\n      options[index].click();\n      this.speak(`Selectat răspunsul ${index + 1}`, 'high');\n    } else {\n      this.speak(`Nu există răspunsul ${index + 1}`, 'high');\n    }\n  }\n\n  // Funcții pentru editor\n  executeCode() {\n    const runButton = document.querySelector('.editor-actions button[aria-label*=\"Execută\"]');\n    if (runButton) {\n      runButton.click();\n      this.speak(\"Execut codul\", 'high');\n    } else {\n      this.speak(\"Butonul de execuție nu a fost găsit\", 'high');\n    }\n  }\n  getFeedback() {\n    const feedbackButton = document.querySelector('.editor-actions button[aria-label*=\"feedback\"]');\n    if (feedbackButton) {\n      feedbackButton.click();\n      this.speak(\"Solicit feedback AI\", 'high');\n    } else {\n      this.speak(\"Butonul de feedback nu a fost găsit\", 'high');\n    }\n  }\n\n  // Citirea informațiilor despre pagina curentă\n  readNavigationInfo() {\n    const currentUrl = window.location.pathname;\n    const totalElements = this.focusableElements.length;\n    const position = this.currentFocusIndex + 1;\n    let info = `Ești pe ${this.getPageName(currentUrl)}. `;\n    info += `Elementul curent: ${position} din ${totalElements}. `;\n    info += `Folosește Tab pentru navigare sau apasă H pentru ajutor.`;\n    this.speak(info, 'high');\n  }\n  getPageName(url) {\n    if (url === '/' || url === '') return 'pagina principală';\n    if (url.includes('/courses')) return 'pagina de cursuri';\n    if (url.includes('/playground')) return 'playground-ul de cod';\n    if (url.includes('/profile')) return 'pagina de profil';\n    if (url.includes('/login')) return 'pagina de autentificare';\n    if (url.includes('/register')) return 'pagina de înregistrare';\n    if (url.includes('/quiz')) return 'pagina de test';\n    return 'pagina curentă';\n  }\n\n  // Metodă îmbunătățită pentru citirea help-ului\n  readHelp() {\n    const currentPage = this.getPageName(window.location.pathname);\n    const helpText = `\n      Ajutor pentru ${currentPage}.\n      \n      Comenzi esențiale:\n      - Tab și Shift Tab pentru navigare înainte și înapoi\n      - Enter pentru a activa elementul selectat\n      - Spațiu pentru pauză sau continuare citire\n      - Escape pentru oprire citire\n      \n      Navigare rapidă:\n      - Tastele 1, 2, 3 pentru header, conținut principal, footer\n      - C pentru cursuri, P pentru playground, R pentru profil, H pentru acasă\n      \n      Navigare prin tipuri:\n      - B pentru butoane, L pentru linkuri\n      - I pentru câmpuri input, T pentru titluri\n      \n      Comenzi speciale cu Alt:\n      - Alt H pentru acest ajutor\n      - Alt M pentru citirea paginii\n      - Alt N pentru informații navigare\n      - Alt S pentru viteză citire\n      - Alt B pentru înapoi\n      - Alt L pentru lista elementelor\n      \n      ${this.getPageSpecificHelp(currentPage)}\n    `;\n    this.speak(helpText, 'high');\n  }\n  getPageSpecificHelp(pageName) {\n    switch (pageName) {\n      case 'pagina de cursuri':\n        return 'În această pagină: Navighează prin cursuri cu Tab. Apasă Enter pentru a selecta un curs.';\n      case 'playground-ul de cod':\n        return 'În editor: Alt E pentru execuție, Alt F pentru feedback AI. Tab citește linia curentă.';\n      case 'pagina de test':\n        return 'În test: Alt 1-4 pentru răspunsuri. Enter pentru verificare sau următoarea întrebare.';\n      case 'pagina de profil':\n        return 'În profil: Navighează prin secțiuni cu Tab. Enter pentru a modifica setările.';\n      default:\n        return '';\n    }\n  }\n  handleAccessibilityShortcuts(e) {\n    const key = this.getShortcutKey(e);\n    const handler = this.shortcuts.get(key);\n    if (handler) {\n      e.preventDefault();\n      handler();\n    }\n  }\n  getShortcutKey(e) {\n    const parts = [];\n    if (e.ctrlKey) parts.push('ctrl');\n    if (e.altKey) parts.push('alt');\n    if (e.shiftKey) parts.push('Shift');\n\n    // Tratăm special anumite taste\n    let key = e.key;\n    if (key === ' ') key = ' ';\n    if (key.length === 1) key = key.toLowerCase();\n    parts.push(key);\n    return parts.join('+');\n  }\n  addAccessibilityStyles() {\n    const style = document.createElement('style');\n    style.id = 'accessibility-styles';\n    style.textContent = `\n      /* Stiluri pentru modul nevăzători */\n      body.accessibility-mode {\n        background: #000000 !important;\n        color: #ffffff !important;\n        font-size: 20px !important;\n        line-height: 1.8 !important;\n        font-family: Arial, sans-serif !important;\n      }\n      \n      body.accessibility-mode * {\n        animation: none !important;\n        transition: none !important;\n      }\n      \n      accessibility-focus {\n       outline: 4px solid #ffff00 !important;\n       outline-offset: 4px !important;\n       background-color: #000033 !important;\n       color: #ffffff !important;\n       box-shadow: 0 0 20px #ffff00 !important;\n       border-radius: 4px !important;\n       position: relative !important;\n       z-index: 9999 !important;\n     }\n     \n     /* Ascundem elementele decorative */\n     body.accessibility-mode .stars-background,\n     body.accessibility-mode .planet,\n     body.accessibility-mode .asteroid,\n     body.accessibility-mode .shooting-star,\n     body.accessibility-mode .code-snippet,\n     body.accessibility-mode .cosmic-dust,\n     body.accessibility-mode .twinkling-star {\n       display: none !important;\n     }\n     \n     /* Simplificăm layout-ul */\n     body.accessibility-mode .main-banner {\n       background: #000000 !important;\n       min-height: auto !important;\n       padding: 20px !important;\n     }\n     \n     /* Text mai vizibil */\n     body.accessibility-mode h1,\n     body.accessibility-mode h2,\n     body.accessibility-mode h3,\n     body.accessibility-mode h4,\n     body.accessibility-mode h5,\n     body.accessibility-mode h6 {\n       color: #ffffff !important;\n       text-decoration: underline !important;\n       margin: 20px 0 !important;\n     }\n     \n     body.accessibility-mode p,\n     body.accessibility-mode span,\n     body.accessibility-mode div {\n       color: #ffffff !important;\n     }\n     \n     /* Butoane mai vizibile */\n     body.accessibility-mode button,\n     body.accessibility-mode .button,\n     body.accessibility-mode [role=\"button\"] {\n       background: #333333 !important;\n       color: #ffffff !important;\n       border: 2px solid #ffffff !important;\n       padding: 15px 20px !important;\n       font-size: 18px !important;\n       font-weight: bold !important;\n       text-transform: uppercase !important;\n     }\n     \n     body.accessibility-mode button:hover,\n     body.accessibility-mode button:focus {\n       background: #555555 !important;\n     }\n     \n     /* Linkuri mai vizibile */\n     body.accessibility-mode a {\n       color: #00ffff !important;\n       text-decoration: underline !important;\n       font-weight: bold !important;\n     }\n     \n     body.accessibility-mode a:hover,\n     body.accessibility-mode a:focus {\n       background: #333333 !important;\n       padding: 2px 4px !important;\n     }\n     \n     /* Inputuri mai clare */\n     body.accessibility-mode input,\n     body.accessibility-mode textarea,\n     body.accessibility-mode select {\n       background: #111111 !important;\n       color: #ffffff !important;\n       border: 2px solid #ffffff !important;\n       padding: 10px !important;\n       font-size: 18px !important;\n     }\n     \n     body.accessibility-mode input:focus,\n     body.accessibility-mode textarea:focus,\n     body.accessibility-mode select:focus {\n       border-color: #ffff00 !important;\n       outline: 2px solid #ffff00 !important;\n     }\n     \n     /* Simplificăm cardurile */\n     body.accessibility-mode .course-card,\n     body.accessibility-mode .feature-card,\n     body.accessibility-mode .example-card {\n       background: #111111 !important;\n       border: 2px solid #ffffff !important;\n       margin: 10px 0 !important;\n       padding: 20px !important;\n     }\n     \n     /* Eliminăm gradiente și efecte */\n     body.accessibility-mode [class*=\"gradient\"] {\n       background: #000000 !important;\n     }\n     \n     /* Indicator pentru elementul curent citit */\n     .accessibility-reading {\n       background-color: #333300 !important;\n       outline: 2px dashed #ffff00 !important;\n     }\n     \n     /* Mesaje de ajutor vizibile */\n     .accessibility-help-popup {\n       position: fixed;\n       bottom: 20px;\n       right: 20px;\n       background: #000000;\n       color: #ffffff;\n       border: 2px solid #ffff00;\n       padding: 20px;\n       max-width: 400px;\n       font-size: 16px;\n       z-index: 10000;\n       border-radius: 8px;\n     }\n     \n     /* Simplificăm navigarea */\n     body.accessibility-mode nav {\n       background: #000000 !important;\n       border: 2px solid #ffffff !important;\n       padding: 10px !important;\n     }\n     \n     /* Lista de elemente focusabile */\n     .accessibility-element-list {\n       position: fixed;\n       left: 0;\n       top: 0;\n       width: 300px;\n       height: 100%;\n       background: #000000;\n       border-right: 2px solid #ffffff;\n       padding: 20px;\n       overflow-y: auto;\n       z-index: 9998;\n       display: none;\n     }\n     \n     body.accessibility-mode.show-element-list .accessibility-element-list {\n       display: block;\n     }\n   `;\n    document.head.appendChild(style);\n    document.body.classList.add('accessibility-mode');\n  }\n  removeAccessibilityStyles() {\n    const style = document.getElementById('accessibility-styles');\n    if (style) style.remove();\n    document.body.classList.remove('accessibility-mode');\n\n    // Eliminăm toate clasele de focus\n    document.querySelectorAll('.accessibility-focus, .accessibility-reading').forEach(el => {\n      el.classList.remove('accessibility-focus', 'accessibility-reading');\n    });\n  }\n\n  // Adaugă aceste metode în clasa AccessibilityManager (în src/utils/AccessibilityManager.js)\n\n  stopReading() {\n    if (this.speechSynthesis.speaking) {\n      this.speechSynthesis.cancel();\n    }\n    this.isReading = false;\n    this.currentUtterance = null;\n    this.readingQueue = [];\n\n    // Trimitem event pentru UI\n    document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n      detail: {\n        isSpeaking: false\n      }\n    }));\n  }\n  processQueue() {\n    if (this.readingQueue.length > 0 && !this.isReading) {\n      const nextUtterance = this.readingQueue.shift();\n      this.speechSynthesis.speak(nextUtterance);\n    }\n  }\n  toggleReading() {\n    if (this.isReading && this.currentUtterance) {\n      if (this.speechSynthesis.paused) {\n        this.speechSynthesis.resume();\n        this.speak(\"Reluare citire\", 'normal');\n      } else {\n        this.speechSynthesis.pause();\n        this.speak(\"Pauză citire\", 'normal');\n      }\n    } else {\n      this.readCurrentPage();\n    }\n  }\n  readCurrentPage() {\n    const pageContent = this.extractPageContent();\n    if (pageContent) {\n      this.speak(pageContent, 'high');\n    } else {\n      this.speak(\"Nu există conținut de citit pe această pagină\", 'high');\n    }\n  }\n  extractPageContent() {\n    let content = '';\n\n    // Extragem titlul paginii\n    const title = document.querySelector('h1');\n    if (title) {\n      content += `Titlu: ${title.textContent.trim()}. `;\n    }\n\n    // Extragem descrierea sau subtitlul\n    const description = document.querySelector('.page-description, .course-detail-description, .code-playground-description');\n    if (description) {\n      content += `${description.textContent.trim()}. `;\n    }\n\n    // Extragem conținutul principal\n    const mainContent = document.querySelector('main, .body-content, .course-detail-content');\n    if (mainContent) {\n      // Extragem doar textul relevant, ignorând butoanele și alte elemente interactive\n      const paragraphs = mainContent.querySelectorAll('p, h2, h3, h4, li');\n      paragraphs.forEach(p => {\n        const text = p.textContent.trim();\n        if (text && text.length > 0) {\n          content += `${text}. `;\n        }\n      });\n    }\n\n    // Dacă suntem pe o pagină de curs, citim și lecțiile\n    const lessons = document.querySelectorAll('.course-preview-item, .lesson-title');\n    if (lessons.length > 0) {\n      content += 'Lecții disponibile: ';\n      lessons.forEach((lesson, index) => {\n        content += `${index + 1}. ${lesson.textContent.trim()}. `;\n      });\n    }\n\n    // Dacă suntem pe o pagină de test, citim întrebarea curentă\n    const currentQuestion = document.querySelector('.question-container h3');\n    if (currentQuestion) {\n      content += `Întrebare: ${currentQuestion.textContent.trim()}. `;\n      const options = document.querySelectorAll('.question-container li label');\n      if (options.length > 0) {\n        content += 'Opțiuni: ';\n        options.forEach((option, index) => {\n          content += `${index + 1}. ${option.textContent.trim()}. `;\n        });\n      }\n    }\n    return content.trim();\n  }\n\n  // Adaugă și această metodă pentru anunțuri\n  announce(message, priority = 'normal') {\n    this.speak(message, priority);\n  }\n\n  // Adaugă getter pentru proprietatea isSpeaking\n  get isSpeaking() {\n    return this.isReading || this.speechSynthesis.speaking;\n  }\n\n  // Adaugă getter pentru proprietatea isActive\n  get isActive() {\n    return this.isAccessibilityMode;\n  }\n\n  // Metodă pentru citirea întrebărilor de quiz\n  readQuizQuestion(question, options) {\n    let text = `Întrebare: ${question}. `;\n    if (options && options.length > 0) {\n      text += 'Variantele de răspuns sunt: ';\n      options.forEach((option, index) => {\n        text += `${index + 1}: ${option}. `;\n      });\n    }\n    this.speak(text, 'high');\n  }\n\n  // Metodă pentru anunțarea rezultatului quiz-ului\n  announceQuizResult(score, totalQuestions) {\n    const percentage = Math.round(score / totalQuestions * 100);\n    const text = `Test finalizat! Ai răspuns corect la ${score} din ${totalQuestions} întrebări. ` + `Scorul tău este ${percentage}%. ` + (percentage >= 80 ? 'Felicitări! Rezultat excelent!' : percentage >= 60 ? 'Rezultat bun! Continuă să înveți.' : 'Nu te descuraja! Încearcă din nou pentru un rezultat mai bun.');\n    this.speak(text, 'high');\n  }\n\n  // Metodă pentru citirea liniilor de cod\n  readCodeLine(lineNumber) {\n    const editor = document.querySelector('.monaco-editor');\n    if (editor) {\n      // Implementare simplificată - în practică ar trebui să accesăm API-ul Monaco\n      this.speak(`Linia ${lineNumber} din editor`, 'normal');\n    }\n  }\n\n  // Metodă pentru anunțarea schimbărilor în cod\n  announceCodeChange(newCode, position) {\n    if (position && position.line) {\n      this.speak(`Cod modificat la linia ${position.line}`, 'normal');\n    }\n  }\n}\n\n// Exportăm o instanță singleton\nconst accessibilityManager = new AccessibilityManager();\nexport default accessibilityManager;","map":{"version":3,"names":["AccessibilityManager","constructor","isAccessibilityMode","speechSynthesis","window","currentUtterance","voice","isReading","readingQueue","shortcuts","Map","focusedElement","navigationMode","currentFocusIndex","focusableElements","navigationHistory","readingSpeed","isTyping","typingBuffer","lastTypedTime","currentLineContent","initializeVoice","setupGlobalListeners","registerShortcuts","setVoice","_this$voice","voices","getVoices","find","lang","startsWith","console","log","name","length","addEventListener","document","e","altKey","key","preventDefault","stopPropagation","toggleAccessibilityMode","includes","handleAccessibilityShortcuts","observer","MutationObserver","updateFocusableElements","observe","body","childList","subtree","navigationShortcuts","set","navigateNext","navigatePrevious","activateElement","stopReading","readHelp","navigateToSection","navigateToCourses","navigateToPlayground","navigateToProfile","goHome","nextButton","nextLink","nextHeading","readCurrentPage","readNavigationInfo","adjustSpeed","listAllElements","typingShortcuts","exitTypingMode","readCurrentLine","readLastWord","readAllText","executeCode","getFeedback","handleNavigationMode","getShortcutKey","handler","get","handleTypingMode","target","classList","contains","closest","handleCodeNavigation","handleTextInput","value","cursorPosition","selectionStart","currentChar","charAt","Date","now","speak","getCharacterName","readLastWordFromBuffer","setTimeout","readCurrentCodeLine","char","specialChars","test","words","trim","split","lastWord","activeElement","tagName","lineStart","lastIndexOf","lineEnd","indexOf","currentLine","substring","monacoEditor","querySelector","activeLine","lineContent","textContent","lineNumber","getMonacoLineNumber","lineNumbers","activeLineNumber","textBeforeCursor","blur","setFocus","addAccessibilityStyles","readWelcomeMessage","removeAccessibilityStyles","dispatchEvent","CustomEvent","detail","isActive","welcomeText","selectors","Array","from","querySelectorAll","join","filter","el","rect","getBoundingClientRect","width","height","offsetParent","sort","a","b","rectA","rectB","Math","abs","top","left","element","forEach","remove","add","scrollIntoView","behavior","block","inline","focus","readElementInfo","_element$textContent","_document$querySelect","_document$querySelect2","_element$options$elem","_document$querySelect3","description","toLowerCase","ariaLabel","getAttribute","text","inputType","type","inputLabel","id","inputValue","placeholder","checked","selectLabel","selectedOption","options","selectedIndex","textareaLabel","level","_element$querySelecto","_element$querySelecto2","title","desc","_element$querySelecto3","_element$querySelecto4","_element$querySelecto5","temporarilyDisableNavigation","click","location","href","handleEscape","removeEventListener","sectionName","selector","announcement","section","firstFocusable","index","navigateToNextOfType","nextInput","typeName","elements","nextIndex","currentTypeIndex","currentRect","i","targetElement","globalIndex","speeds","currentIndex","round","priority","utterance","SpeechSynthesisUtterance","rate","pitch","volume","onstart","isSpeaking","onend","processQueue","onerror","error","push","navigateBack","previousUrl","pop","totalElements","currentPosition","summary","counts","buttons","links","inputs","headings","selectQuizOption","runButton","feedbackButton","currentUrl","pathname","position","info","getPageName","url","currentPage","helpText","getPageSpecificHelp","pageName","parts","ctrlKey","shiftKey","style","createElement","head","appendChild","getElementById","speaking","cancel","nextUtterance","shift","toggleReading","paused","resume","pause","pageContent","extractPageContent","content","mainContent","paragraphs","p","lessons","lesson","currentQuestion","option","announce","message","readQuizQuestion","question","announceQuizResult","score","totalQuestions","percentage","readCodeLine","editor","announceCodeChange","newCode","line","accessibilityManager"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/utils/AccessibilityManager.js"],"sourcesContent":["// src/utils/AccessibilityManager.js\r\nclass AccessibilityManager {\r\n  constructor() {\r\n    this.isAccessibilityMode = false;\r\n    this.speechSynthesis = window.speechSynthesis;\r\n    this.currentUtterance = null;\r\n    this.voice = null;\r\n    this.isReading = false;\r\n    this.readingQueue = [];\r\n    this.shortcuts = new Map();\r\n    this.focusedElement = null;\r\n    this.navigationMode = 'normal';\r\n    this.currentFocusIndex = 0;\r\n    this.focusableElements = [];\r\n    this.navigationHistory = [];\r\n    this.readingSpeed = 1.0;\r\n    this.isTyping = false; // Flag pentru modul de tastare\r\n    this.typingBuffer = ''; // Buffer pentru caractere tastate\r\n    this.lastTypedTime = 0; // Timestamp pentru ultimul caracter\r\n    this.currentLineContent = ''; // Conținutul liniei curente\r\n    \r\n    this.initializeVoice();\r\n    this.setupGlobalListeners();\r\n    this.registerShortcuts();\r\n  }\r\n\r\n  initializeVoice() {\r\n    const setVoice = () => {\r\n      const voices = this.speechSynthesis.getVoices();\r\n      // Prioritizăm vocile în română\r\n      this.voice = voices.find(voice => voice.lang.startsWith('ro-RO')) || \r\n                   voices.find(voice => voice.lang.startsWith('ro')) || \r\n                   voices[0];\r\n      console.log('Voice initialized:', this.voice?.name || 'Default');\r\n    };\r\n\r\n    if (this.speechSynthesis.getVoices().length > 0) {\r\n      setVoice();\r\n    } else {\r\n      this.speechSynthesis.addEventListener('voiceschanged', setVoice);\r\n    }\r\n  }\r\n\r\n  setupGlobalListeners() {\r\n    document.addEventListener('keydown', (e) => {\r\n      // Alt + A pentru activarea modului (evităm Ctrl+Shift care poate avea conflicte)\r\n      if (e.altKey && e.key === 'a') {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.toggleAccessibilityMode();\r\n        return;\r\n      }\r\n\r\n      if (!this.isAccessibilityMode) return;\r\n\r\n      // Prevenim comportamentul default pentru taste speciale\r\n      if (['Tab', 'Enter', ' ', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      }\r\n\r\n      this.handleAccessibilityShortcuts(e);\r\n    });\r\n\r\n    // Actualizăm lista de elemente focusabile când se schimbă DOM-ul\r\n    const observer = new MutationObserver(() => {\r\n      if (this.isAccessibilityMode) {\r\n        this.updateFocusableElements();\r\n      }\r\n    });\r\n\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  registerShortcuts() {\r\n    // Comenzi pentru modul NAVIGARE (când NU suntem în input)\r\n    this.navigationShortcuts = new Map();\r\n    \r\n    // Navigare principală\r\n    this.navigationShortcuts.set('Tab', () => this.navigateNext());\r\n    this.navigationShortcuts.set('Shift+Tab', () => this.navigatePrevious());\r\n    this.navigationShortcuts.set('Enter', () => this.activateElement());\r\n    this.navigationShortcuts.set('Escape', () => this.stopReading());\r\n    \r\n    // Navigare rapidă cu F-keys pentru a evita conflictele\r\n    this.navigationShortcuts.set('F1', () => this.readHelp());\r\n    this.navigationShortcuts.set('F2', () => this.navigateToSection('header'));\r\n    this.navigationShortcuts.set('F3', () => this.navigateToSection('main'));\r\n    this.navigationShortcuts.set('F4', () => this.navigateToSection('footer'));\r\n    \r\n    // Navigare cu Ctrl+ pentru pagini\r\n    this.navigationShortcuts.set('Ctrl+Shift+C', () => this.navigateToCourses());\r\n    this.navigationShortcuts.set('Ctrl+Shift+P', () => this.navigateToPlayground());\r\n    this.navigationShortcuts.set('Ctrl+Shift+R', () => this.navigateToProfile());\r\n    this.navigationShortcuts.set('Ctrl+Shift+H', () => this.goHome());\r\n    \r\n    // Navigare prin elemente cu Ctrl+\r\n    this.navigationShortcuts.set('Ctrl+B', () => this.nextButton());\r\n    this.navigationShortcuts.set('Ctrl+L', () => this.nextLink());\r\n    this.navigationShortcuts.set('Ctrl+T', () => this.nextHeading());\r\n    \r\n    // Comenzi utilitare\r\n    this.navigationShortcuts.set('Ctrl+M', () => this.readCurrentPage());\r\n    this.navigationShortcuts.set('Ctrl+N', () => this.readNavigationInfo());\r\n    this.navigationShortcuts.set('Ctrl+Shift+S', () => this.adjustSpeed());\r\n    this.navigationShortcuts.set('Ctrl+Shift+L', () => this.listAllElements());\r\n    \r\n    // Comenzi pentru modul TASTARE (când suntem în input)\r\n    this.typingShortcuts = new Map();\r\n    \r\n    // Ctrl+Enter pentru a ieși din modul editare\r\n    this.typingShortcuts.set('Ctrl+Enter', () => this.exitTypingMode());\r\n    \r\n    // Ctrl+L pentru a citi linia curentă\r\n    this.typingShortcuts.set('Ctrl+L', () => this.readCurrentLine());\r\n    \r\n    // Ctrl+W pentru a citi ultimul cuvânt\r\n    this.typingShortcuts.set('Ctrl+W', () => this.readLastWord());\r\n    \r\n    // Ctrl+Shift+L pentru a citi tot textul\r\n    this.typingShortcuts.set('Ctrl+Shift+L', () => this.readAllText());\r\n    \r\n    // Pentru editor de cod\r\n    this.typingShortcuts.set('Ctrl+Shift+E', () => this.executeCode());\r\n    this.typingShortcuts.set('Ctrl+Shift+F', () => this.getFeedback());\r\n  }\r\n\r\n  handleNavigationMode(e) {\r\n    const key = this.getShortcutKey(e);\r\n    const handler = this.navigationShortcuts.get(key);\r\n    \r\n    if (handler) {\r\n      e.preventDefault();\r\n      handler();\r\n    }\r\n  }\r\n\r\n    handleTypingMode(e) {\r\n    const key = this.getShortcutKey(e);\r\n    const handler = this.typingShortcuts.get(key);\r\n    \r\n    if (handler) {\r\n      e.preventDefault();\r\n      handler();\r\n      return;\r\n    }\r\n\r\n    // Pentru navigare în editor cu săgeți\r\n    if (e.target.classList.contains('monaco-editor') || \r\n        e.target.closest('.monaco-editor')) {\r\n      this.handleCodeNavigation(e);\r\n    }\r\n  }\r\n\r\n  handleTextInput(e) {\r\n    const target = e.target;\r\n    const value = target.value;\r\n    const cursorPosition = target.selectionStart;\r\n    \r\n    // Determinăm ce a fost tastat\r\n    const currentChar = value.charAt(cursorPosition - 1);\r\n    \r\n    // Adăugăm la buffer pentru citire\r\n    this.typingBuffer += currentChar;\r\n    this.lastTypedTime = Date.now();\r\n    \r\n    // Citim caracterul imediat\r\n    if (currentChar && currentChar !== ' ') {\r\n      this.speak(this.getCharacterName(currentChar), 'normal');\r\n    } else if (currentChar === ' ') {\r\n      // La spațiu, citim ultimul cuvânt\r\n      this.readLastWordFromBuffer();\r\n    }\r\n    \r\n    // Resetăm buffer-ul după o pauză\r\n    setTimeout(() => {\r\n      if (Date.now() - this.lastTypedTime > 1000) {\r\n        this.typingBuffer = '';\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  handleCodeNavigation(e) {\r\n    // Pentru editor Monaco, tratăm special săgețile sus/jos\r\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\r\n      // Așteaptă puțin pentru ca editorul să își actualizeze poziția\r\n      setTimeout(() => {\r\n        this.readCurrentCodeLine();\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  getCharacterName(char) {\r\n    // Caractere speciale\r\n    const specialChars = {\r\n      ' ': 'spațiu',\r\n      '.': 'punct',\r\n      ',': 'virgulă',\r\n      ';': 'punct și virgulă',\r\n      ':': 'două puncte',\r\n      '!': 'semnul exclamării',\r\n      '?': 'semnul întrebării',\r\n      '\"': 'ghilimele',\r\n      \"'\": 'apostrof',\r\n      '(': 'paranteză deschisă',\r\n      ')': 'paranteză închisă',\r\n      '[': 'paranteză pătrată deschisă',\r\n      ']': 'paranteză pătrată închisă',\r\n      '{': 'acoladă deschisă',\r\n      '}': 'acoladă închisă',\r\n      '+': 'plus',\r\n      '-': 'minus',\r\n      '*': 'asterisc',\r\n      '/': 'slash',\r\n      '\\\\': 'backslash',\r\n      '=': 'egal',\r\n      '<': 'mai mic',\r\n      '>': 'mai mare',\r\n      '@': 'arond',\r\n      '#': 'diez',\r\n      '$': 'dolar',\r\n      '%': 'procent',\r\n      '^': 'circumflex',\r\n      '&': 'ampersand',\r\n      '_': 'underscore',\r\n      '|': 'bară verticală',\r\n      '~': 'tildă',\r\n      '`': 'accent grav',\r\n      '\\n': 'linie nouă',\r\n      '\\t': 'tab'\r\n    };\r\n    \r\n    // Pentru cifre\r\n    if (/\\d/.test(char)) {\r\n      return `cifra ${char}`;\r\n    }\r\n    \r\n    // Pentru litere mari\r\n    if (/[A-Z]/.test(char)) {\r\n      return `${char} mare`;\r\n    }\r\n    \r\n    return specialChars[char] || char;\r\n  }\r\n\r\n  readLastWordFromBuffer() {\r\n    const words = this.typingBuffer.trim().split(/\\s+/);\r\n    const lastWord = words[words.length - 1];\r\n    \r\n    if (lastWord && lastWord.length > 0) {\r\n      this.speak(lastWord, 'normal');\r\n    }\r\n  }\r\n\r\n  readCurrentLine() {\r\n    const activeElement = document.activeElement;\r\n    \r\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\r\n      const value = activeElement.value;\r\n      const cursorPosition = activeElement.selectionStart;\r\n      \r\n      // Găsim începutul și sfârșitul liniei curente\r\n      let lineStart = value.lastIndexOf('\\n', cursorPosition - 1) + 1;\r\n      let lineEnd = value.indexOf('\\n', cursorPosition);\r\n      if (lineEnd === -1) lineEnd = value.length;\r\n      \r\n      const currentLine = value.substring(lineStart, lineEnd);\r\n      \r\n      if (currentLine.trim()) {\r\n        this.speak(`Linia curentă: ${currentLine}`, 'high');\r\n      } else {\r\n        this.speak('Linie goală', 'high');\r\n      }\r\n    }\r\n  }\r\n\r\n  readCurrentCodeLine() {\r\n    // Pentru Monaco Editor\r\n    const monacoEditor = document.querySelector('.monaco-editor');\r\n    if (monacoEditor) {\r\n      // Găsim linia activă în Monaco\r\n      const activeLine = monacoEditor.querySelector('.active-line');\r\n      if (activeLine) {\r\n        const lineContent = activeLine.textContent.trim();\r\n        const lineNumber = this.getMonacoLineNumber();\r\n        \r\n        if (lineContent) {\r\n          this.speak(`Linia ${lineNumber}: ${lineContent}`, 'high');\r\n        } else {\r\n          this.speak(`Linia ${lineNumber}: goală`, 'high');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getMonacoLineNumber() {\r\n    // Găsim numărul liniei din Monaco\r\n    const lineNumbers = document.querySelector('.margin-view-overlays');\r\n    if (lineNumbers) {\r\n      const activeLineNumber = lineNumbers.querySelector('.active-line-number');\r\n      if (activeLineNumber) {\r\n        return activeLineNumber.textContent.trim();\r\n      }\r\n    }\r\n    return '1';\r\n  }\r\n\r\n  readLastWord() {\r\n    const activeElement = document.activeElement;\r\n    \r\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\r\n      const value = activeElement.value;\r\n      const cursorPosition = activeElement.selectionStart;\r\n      \r\n      // Găsim ultimul cuvânt înainte de cursor\r\n      const textBeforeCursor = value.substring(0, cursorPosition);\r\n      const words = textBeforeCursor.trim().split(/\\s+/);\r\n      const lastWord = words[words.length - 1];\r\n      \r\n      if (lastWord) {\r\n        this.speak(`Ultimul cuvânt: ${lastWord}`, 'high');\r\n      } else {\r\n        this.speak('Niciun cuvânt', 'high');\r\n      }\r\n    }\r\n  }\r\n\r\n  readAllText() {\r\n    const activeElement = document.activeElement;\r\n    \r\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\r\n      const value = activeElement.value;\r\n      \r\n      if (value.trim()) {\r\n        this.speak(`Textul complet: ${value}`, 'high');\r\n      } else {\r\n        this.speak('Câmpul este gol', 'high');\r\n      }\r\n    }\r\n  }\r\n\r\n  exitTypingMode() {\r\n    const activeElement = document.activeElement;\r\n    \r\n    if (activeElement) {\r\n      activeElement.blur();\r\n      this.speak('Mod editare dezactivat. Navigare reactivată', 'high');\r\n      \r\n      // Re-focusăm elementul pentru navigare\r\n      setTimeout(() => {\r\n        this.setFocus(activeElement);\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  toggleAccessibilityMode() {\r\n    this.isAccessibilityMode = !this.isAccessibilityMode;\r\n    \r\n    if (this.isAccessibilityMode) {\r\n      this.speak(\"Modul pentru nevăzători activat. Bine ai venit în JavaVerse!\", 'high');\r\n      this.addAccessibilityStyles();\r\n      this.updateFocusableElements();\r\n      \r\n      setTimeout(() => {\r\n        this.readWelcomeMessage();\r\n      }, 2000);\r\n    } else {\r\n      this.speak(\"Modul pentru nevăzători dezactivat.\");\r\n      this.removeAccessibilityStyles();\r\n      this.stopReading();\r\n    }\r\n    \r\n    document.dispatchEvent(new CustomEvent('accessibilityModeChanged', {\r\n      detail: { isActive: this.isAccessibilityMode }\r\n    }));\r\n  }\r\n\r\n  readWelcomeMessage() {\r\n    const welcomeText = `\r\n      Bine ai venit în modul pentru nevăzători JavaVerse!\r\n      \r\n      Comenzi principale:\r\n      - Tab și Shift Tab pentru navigare între elemente\r\n      - Enter pentru a activa elementul selectat\r\n      - Escape pentru a opri citirea\r\n      \r\n      Navigare rapidă:\r\n      - F1 pentru ajutor\r\n      - F2, F3, F4 pentru header, conținut principal, footer\r\n      - Control Shift C pentru cursuri\r\n      - Control Shift P pentru playground\r\n      - Control Shift R pentru profil\r\n      - Control Shift H pentru pagina principală\r\n      \r\n      Navigare prin elemente:\r\n      - Control B pentru următorul buton\r\n      - Control L pentru următorul link\r\n      - Control T pentru următorul titlu\r\n      \r\n      În câmpuri de text:\r\n      - Caracterele sunt citite în timp ce tastezi\r\n      - Spațiu citește ultimul cuvânt\r\n      - Control L pentru a citi linia curentă\r\n      - Control W pentru ultimul cuvânt\r\n      - Control Shift L pentru tot textul\r\n      - Control Enter pentru a ieși din editare\r\n      \r\n      În editor de cod:\r\n      - Săgețile sus și jos citesc automat linia curentă\r\n      - Control Shift E pentru execuție\r\n      - Control Shift F pentru feedback AI\r\n      \r\n      Apasă F1 oricând pentru ajutor contextual.\r\n    `;\r\n    \r\n    this.speak(welcomeText, 'high');\r\n  }\r\n\r\n  updateFocusableElements() {\r\n    const selectors = [\r\n      'a[href]:not([disabled])',\r\n      'button:not([disabled])',\r\n      'input:not([disabled]):not([type=\"hidden\"])',\r\n      'select:not([disabled])',\r\n      'textarea:not([disabled])',\r\n      '[tabindex]:not([tabindex=\"-1\"])',\r\n      '.course-card',\r\n      '.question-container li',\r\n      '.feature-card',\r\n      '.example-card',\r\n      'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\r\n      '[role=\"button\"]:not([disabled])',\r\n      '[role=\"link\"]',\r\n      '[role=\"navigation\"]',\r\n      '[role=\"main\"]'\r\n    ];\r\n    \r\n    this.focusableElements = Array.from(document.querySelectorAll(selectors.join(', ')))\r\n      .filter(el => {\r\n        // Verificăm dacă elementul este vizibil\r\n        const rect = el.getBoundingClientRect();\r\n        return rect.width > 0 && rect.height > 0 && el.offsetParent !== null;\r\n      })\r\n      .sort((a, b) => {\r\n        // Sortăm elementele după poziția lor în pagină\r\n        const rectA = a.getBoundingClientRect();\r\n        const rectB = b.getBoundingClientRect();\r\n        \r\n        if (Math.abs(rectA.top - rectB.top) < 10) {\r\n          return rectA.left - rectB.left;\r\n        }\r\n        return rectA.top - rectB.top;\r\n      });\r\n  }\r\n\r\n  navigateNext() {\r\n    this.updateFocusableElements();\r\n    \r\n    if (this.focusableElements.length === 0) {\r\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\r\n      return;\r\n    }\r\n    \r\n    this.currentFocusIndex = (this.currentFocusIndex + 1) % this.focusableElements.length;\r\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\r\n  }\r\n\r\n  navigatePrevious() {\r\n    this.updateFocusableElements();\r\n    \r\n    if (this.focusableElements.length === 0) {\r\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\r\n      return;\r\n    }\r\n    \r\n    this.currentFocusIndex = this.currentFocusIndex === 0 \r\n      ? this.focusableElements.length - 1 \r\n      : this.currentFocusIndex - 1;\r\n      \r\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\r\n  }\r\n\r\n  setFocus(element) {\r\n    if (!element) return;\r\n    \r\n    // Eliminăm focus-ul anterior\r\n    document.querySelectorAll('.accessibility-focus').forEach(el => {\r\n      el.classList.remove('accessibility-focus');\r\n    });\r\n    \r\n    // Setăm noul focus\r\n    this.focusedElement = element;\r\n    element.classList.add('accessibility-focus');\r\n    \r\n    // Scroll smooth în vedere\r\n    element.scrollIntoView({ \r\n      behavior: 'smooth', \r\n      block: 'center',\r\n      inline: 'nearest'\r\n    });\r\n    \r\n    // Focus real pentru inputuri\r\n    if (['INPUT', 'TEXTAREA', 'SELECT'].includes(element.tagName)) {\r\n      element.focus();\r\n    }\r\n    \r\n    // Citim informații despre element\r\n    this.readElementInfo(element);\r\n  }\r\n\r\n  readElementInfo(element) {\r\n    let description = '';\r\n    const tagName = element.tagName.toLowerCase();\r\n    const ariaLabel = element.getAttribute('aria-label');\r\n    const text = element.textContent?.trim();\r\n    \r\n    // Prioritizăm aria-label\r\n    if (ariaLabel) {\r\n      description = ariaLabel;\r\n    } else {\r\n      // Descrieri specifice pentru fiecare tip de element\r\n      switch (tagName) {\r\n        case 'button':\r\n          description = `Buton: ${text || 'Fără text'}`;\r\n          break;\r\n          \r\n        case 'a':\r\n          description = `Link: ${text || 'Fără text'}`;\r\n          break;\r\n          \r\n        case 'input':\r\n          const inputType = element.type;\r\n          const inputLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          const inputValue = element.value;\r\n          \r\n          if (inputType === 'text' || inputType === 'email' || inputType === 'password') {\r\n            description = `Câmp ${inputType}: ${inputLabel || element.placeholder || 'Fără etichetă'}`;\r\n            if (inputValue) {\r\n              description += `. Valoare curentă: ${inputType === 'password' ? 'parolă introdusă' : inputValue}`;\r\n            }\r\n          } else if (inputType === 'radio' || inputType === 'checkbox') {\r\n            description = `${inputType === 'radio' ? 'Opțiune' : 'Bifă'}: ${inputLabel || text}. ${element.checked ? 'Selectat' : 'Neselectat'}`;\r\n          }\r\n          break;\r\n          \r\n        case 'select':\r\n          const selectLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          const selectedOption = element.options[element.selectedIndex]?.text;\r\n          description = `Listă derulantă: ${selectLabel || 'Fără etichetă'}. Selectat: ${selectedOption || 'Nimic'}`;\r\n          break;\r\n          \r\n        case 'textarea':\r\n          const textareaLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          description = `Zonă de text: ${textareaLabel || element.placeholder || 'Fără etichetă'}`;\r\n          if (element.value) {\r\n            description += `. ${element.value.length} caractere introduse`;\r\n          }\r\n          break;\r\n          \r\n        case 'h1':\r\n        case 'h2':\r\n        case 'h3':\r\n        case 'h4':\r\n        case 'h5':\r\n        case 'h6':\r\n          const level = tagName.charAt(1);\r\n          description = `Titlu nivel ${level}: ${text}`;\r\n          break;\r\n          \r\n        default:\r\n          // Pentru elemente custom (carduri, etc.)\r\n          if (element.classList.contains('course-card')) {\r\n            const title = element.querySelector('.course-title')?.textContent;\r\n            const desc = element.querySelector('.course-description')?.textContent;\r\n            description = `Curs: ${title}. ${desc}`;\r\n          } else if (element.classList.contains('feature-card')) {\r\n            const title = element.querySelector('h3')?.textContent;\r\n            const desc = element.querySelector('p')?.textContent;\r\n            description = `Caracteristică: ${title}. ${desc}`;\r\n          } else if (element.classList.contains('example-card')) {\r\n            const title = element.querySelector('.card-title')?.textContent || text;\r\n            description = `Exemplu de cod: ${title}`;\r\n          } else {\r\n            description = text || `Element ${tagName}`;\r\n          }\r\n      }\r\n    }\r\n    \r\n    // Adăugăm indicații pentru interacțiune\r\n    if (['button', 'a'].includes(tagName) || element.getAttribute('role') === 'button') {\r\n      description += \". Apasă Enter pentru a activa\";\r\n    } else if (['input', 'textarea', 'select'].includes(tagName)) {\r\n      description += \". Apasă Enter pentru a edita\";\r\n    }\r\n    \r\n    this.speak(description, 'high');\r\n  }\r\n\r\n  activateElement() {\r\n    if (!this.focusedElement) {\r\n      this.speak(\"Niciun element selectat\", 'high');\r\n      return;\r\n    }\r\n    \r\n    const tagName = this.focusedElement.tagName.toLowerCase();\r\n    \r\n    // Pentru inputuri, permitem editarea\r\n    if (['input', 'textarea', 'select'].includes(tagName)) {\r\n      this.focusedElement.focus();\r\n      this.speak(\"Mod editare activat. Apasă Escape când termini\", 'high');\r\n      \r\n      // Dezactivăm temporar navigarea pentru a permite tastarea\r\n      this.temporarilyDisableNavigation();\r\n      return;\r\n    }\r\n    \r\n    // Pentru alte elemente, simulăm click\r\n    this.speak(\"Activez elementul\", 'normal');\r\n    \r\n    if (this.focusedElement.click) {\r\n      this.focusedElement.click();\r\n    } else if (tagName === 'a') {\r\n      window.location.href = this.focusedElement.href;\r\n    }\r\n  }\r\n\r\n  temporarilyDisableNavigation() {\r\n    const handleEscape = (e) => {\r\n      if (e.key === 'Escape') {\r\n        e.preventDefault();\r\n        document.removeEventListener('keydown', handleEscape, true);\r\n        \r\n        // Re-focusăm elementul și anunțăm\r\n        if (this.focusedElement) {\r\n          this.focusedElement.blur();\r\n          this.speak(\"Mod editare dezactivat. Navigare reactivată\", 'high');\r\n          this.setFocus(this.focusedElement);\r\n        }\r\n      }\r\n    };\r\n    \r\n    // Captură pentru Escape cu prioritate mare\r\n    document.addEventListener('keydown', handleEscape, true);\r\n  }\r\n\r\n  // Navigare rapidă la secțiuni\r\n  navigateToSection(sectionName) {\r\n    let selector;\r\n    let announcement;\r\n    \r\n    switch (sectionName) {\r\n      case 'header':\r\n        selector = 'header, [role=\"banner\"], .jv-header';\r\n        announcement = \"Navighez la header\";\r\n        break;\r\n      case 'main':\r\n        selector = 'main, [role=\"main\"], .body-content';\r\n        announcement = \"Navighez la conținutul principal\";\r\n        break;\r\n      case 'footer':\r\n        selector = 'footer, [role=\"contentinfo\"], .jv-footer';\r\n        announcement = \"Navighez la footer\";\r\n        break;\r\n    }\r\n    \r\n    const section = document.querySelector(selector);\r\n    if (section) {\r\n      this.speak(announcement, 'high');\r\n      \r\n      // Găsim primul element focusabil din secțiune\r\n      const firstFocusable = section.querySelector(\r\n        'a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n      );\r\n      \r\n      if (firstFocusable) {\r\n        const index = this.focusableElements.indexOf(firstFocusable);\r\n        if (index !== -1) {\r\n          this.currentFocusIndex = index;\r\n          this.setFocus(firstFocusable);\r\n        }\r\n      } else {\r\n        section.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        this.speak(\"Secțiune fără elemente interactive\", 'normal');\r\n      }\r\n    } else {\r\n      this.speak(\"Secțiunea nu a fost găsită\", 'high');\r\n    }\r\n  }\r\n\r\n  // Navigare prin tipuri de elemente\r\n  nextButton() {\r\n    this.navigateToNextOfType('button, [role=\"button\"]', 'buton');\r\n  }\r\n\r\n  nextLink() {\r\n    this.navigateToNextOfType('a[href]', 'link');\r\n  }\r\n\r\n  nextInput() {\r\n    this.navigateToNextOfType('input, textarea, select', 'câmp de input');\r\n  }\r\n\r\n  nextHeading() {\r\n    this.navigateToNextOfType('h1, h2, h3, h4, h5, h6', 'titlu');\r\n  }\r\n\r\n  navigateToNextOfType(selector, typeName) {\r\n    const elements = Array.from(document.querySelectorAll(selector))\r\n      .filter(el => el.offsetParent !== null);\r\n    \r\n    if (elements.length === 0) {\r\n      this.speak(`Nu există ${typeName} pe această pagină`, 'high');\r\n      return;\r\n    }\r\n    \r\n    let nextIndex = -1;\r\n    \r\n    if (this.focusedElement) {\r\n      const currentTypeIndex = elements.indexOf(this.focusedElement);\r\n      if (currentTypeIndex !== -1) {\r\n        nextIndex = (currentTypeIndex + 1) % elements.length;\r\n      } else {\r\n        // Găsim următorul element de acest tip după elementul curent\r\n        const currentRect = this.focusedElement.getBoundingClientRect();\r\n        for (let i = 0; i < elements.length; i++) {\r\n          const rect = elements[i].getBoundingClientRect();\r\n          if (rect.top > currentRect.top || \r\n              (Math.abs(rect.top - currentRect.top) < 10 && rect.left > currentRect.left)) {\r\n            nextIndex = i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (nextIndex === -1) {\r\n      nextIndex = 0;\r\n    }\r\n    \r\n    const targetElement = elements[nextIndex];\r\n    const globalIndex = this.focusableElements.indexOf(targetElement);\r\n    \r\n    if (globalIndex !== -1) {\r\n      this.currentFocusIndex = globalIndex;\r\n      this.setFocus(targetElement);\r\n    }\r\n  }\r\n\r\n  // Ajustare viteză citire\r\n  adjustSpeed() {\r\n    const speeds = [0.7, 0.85, 1.0, 1.15, 1.3];\r\n    const currentIndex = speeds.indexOf(this.readingSpeed);\r\n    const nextIndex = (currentIndex + 1) % speeds.length;\r\n    \r\n    this.readingSpeed = speeds[nextIndex];\r\n    this.speak(`Viteză de citire: ${Math.round(this.readingSpeed * 100)}%`, 'high');\r\n  }\r\n\r\n  // Îmbunătățire pentru speak cu viteză ajustabilă\r\n  speak(text, priority = 'normal') {\r\n    if (!text || text.trim() === '') return;\r\n\r\n    if (priority === 'high') {\r\n      this.stopReading();\r\n    }\r\n\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    if (this.voice) {\r\n      utterance.voice = this.voice;\r\n    }\r\n    \r\n    utterance.rate = this.readingSpeed;\r\n    utterance.pitch = 1.0;\r\n    utterance.volume = 1.0;\r\n\r\n    utterance.onstart = () => {\r\n      this.isReading = true;\r\n      this.currentUtterance = utterance;\r\n      \r\n      // Trimitem event pentru UI\r\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n        detail: { isSpeaking: true }\r\n      }));\r\n    };\r\n\r\n    utterance.onend = () => {\r\n      this.isReading = false;\r\n      this.currentUtterance = null;\r\n      this.processQueue();\r\n      \r\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n        detail: { isSpeaking: false }\r\n      }));\r\n    };\r\n\r\n    utterance.onerror = (e) => {\r\n      console.error('Speech synthesis error:', e);\r\n      this.isReading = false;\r\n      this.currentUtterance = null;\r\n    };\r\n\r\n    if (this.isReading && priority !== 'high') {\r\n      this.readingQueue.push(utterance);\r\n    } else {\r\n      this.speechSynthesis.speak(utterance);\r\n    }\r\n  }\r\n\r\n  // Navigare înapoi\r\n  navigateBack() {\r\n    if (this.navigationHistory.length > 0) {\r\n      const previousUrl = this.navigationHistory.pop();\r\n      this.speak(\"Navighez înapoi\", 'high');\r\n      window.location.href = previousUrl;\r\n    } else {\r\n      this.speak(\"Nu există istoric de navigare\", 'high');\r\n    }\r\n  }\r\n\r\n  // Listare elemente\r\n  listAllElements() {\r\n    this.updateFocusableElements();\r\n    \r\n    const totalElements = this.focusableElements.length;\r\n    const currentPosition = this.currentFocusIndex + 1;\r\n    \r\n    let summary = `Pagina conține ${totalElements} elemente interactive. `;\r\n    summary += `Ești la elementul ${currentPosition} din ${totalElements}. `;\r\n    \r\n    // Numărăm tipurile de elemente\r\n    const counts = {\r\n      buttons: document.querySelectorAll('button, [role=\"button\"]').length,\r\n      links: document.querySelectorAll('a[href]').length,\r\n      inputs: document.querySelectorAll('input, textarea, select').length,\r\n      headings: document.querySelectorAll('h1, h2, h3, h4, h5, h6').length\r\n    };\r\n    \r\n    summary += `Găsit: ${counts.buttons} butoane, ${counts.links} linkuri, `;\r\n    summary += `${counts.inputs} câmpuri de input, ${counts.headings} titluri.`;\r\n    \r\n    this.speak(summary, 'high');\r\n  }\r\n\r\n  // Navigare rapidă pentru pagini\r\n  navigateToCourses() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la cursuri\", 'high');\r\n    window.location.href = '/courses';\r\n  }\r\n\r\n  navigateToPlayground() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la playground\", 'high');\r\n    window.location.href = '/playground';\r\n  }\r\n\r\n  navigateToProfile() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la profil\", 'high');\r\n    window.location.href = '/profile';\r\n  }\r\n\r\n  goHome() {\r\n    this.navigationHistory.push(window.location.href);\r\n    this.speak(\"Navighez la pagina principală\", 'high');\r\n    window.location.href = '/';\r\n  }\r\n\r\n  // Funcții pentru quiz\r\n  selectQuizOption(index) {\r\n    const options = document.querySelectorAll('.question-container li');\r\n    if (options[index]) {\r\n      options[index].click();\r\n      this.speak(`Selectat răspunsul ${index + 1}`, 'high');\r\n    } else {\r\n      this.speak(`Nu există răspunsul ${index + 1}`, 'high');\r\n    }\r\n  }\r\n\r\n  // Funcții pentru editor\r\n  executeCode() {\r\n    const runButton = document.querySelector('.editor-actions button[aria-label*=\"Execută\"]');\r\n    if (runButton) {\r\n      runButton.click();\r\n      this.speak(\"Execut codul\", 'high');\r\n    } else {\r\n      this.speak(\"Butonul de execuție nu a fost găsit\", 'high');\r\n    }\r\n  }\r\n\r\n  getFeedback() {\r\n    const feedbackButton = document.querySelector('.editor-actions button[aria-label*=\"feedback\"]');\r\n    if (feedbackButton) {\r\n      feedbackButton.click();\r\n      this.speak(\"Solicit feedback AI\", 'high');\r\n    } else {\r\n      this.speak(\"Butonul de feedback nu a fost găsit\", 'high');\r\n    }\r\n  }\r\n\r\n  // Citirea informațiilor despre pagina curentă\r\n  readNavigationInfo() {\r\n    const currentUrl = window.location.pathname;\r\n    const totalElements = this.focusableElements.length;\r\n    const position = this.currentFocusIndex + 1;\r\n    \r\n    let info = `Ești pe ${this.getPageName(currentUrl)}. `;\r\n    info += `Elementul curent: ${position} din ${totalElements}. `;\r\n    info += `Folosește Tab pentru navigare sau apasă H pentru ajutor.`;\r\n    \r\n    this.speak(info, 'high');\r\n  }\r\n\r\n  getPageName(url) {\r\n    if (url === '/' || url === '') return 'pagina principală';\r\n    if (url.includes('/courses')) return 'pagina de cursuri';\r\n    if (url.includes('/playground')) return 'playground-ul de cod';\r\n    if (url.includes('/profile')) return 'pagina de profil';\r\n    if (url.includes('/login')) return 'pagina de autentificare';\r\n    if (url.includes('/register')) return 'pagina de înregistrare';\r\n    if (url.includes('/quiz')) return 'pagina de test';\r\n    return 'pagina curentă';\r\n  }\r\n\r\n  // Metodă îmbunătățită pentru citirea help-ului\r\n  readHelp() {\r\n    const currentPage = this.getPageName(window.location.pathname);\r\n    \r\n    const helpText = `\r\n      Ajutor pentru ${currentPage}.\r\n      \r\n      Comenzi esențiale:\r\n      - Tab și Shift Tab pentru navigare înainte și înapoi\r\n      - Enter pentru a activa elementul selectat\r\n      - Spațiu pentru pauză sau continuare citire\r\n      - Escape pentru oprire citire\r\n      \r\n      Navigare rapidă:\r\n      - Tastele 1, 2, 3 pentru header, conținut principal, footer\r\n      - C pentru cursuri, P pentru playground, R pentru profil, H pentru acasă\r\n      \r\n      Navigare prin tipuri:\r\n      - B pentru butoane, L pentru linkuri\r\n      - I pentru câmpuri input, T pentru titluri\r\n      \r\n      Comenzi speciale cu Alt:\r\n      - Alt H pentru acest ajutor\r\n      - Alt M pentru citirea paginii\r\n      - Alt N pentru informații navigare\r\n      - Alt S pentru viteză citire\r\n      - Alt B pentru înapoi\r\n      - Alt L pentru lista elementelor\r\n      \r\n      ${this.getPageSpecificHelp(currentPage)}\r\n    `;\r\n    \r\n    this.speak(helpText, 'high');\r\n  }\r\n\r\n  getPageSpecificHelp(pageName) {\r\n    switch (pageName) {\r\n      case 'pagina de cursuri':\r\n        return 'În această pagină: Navighează prin cursuri cu Tab. Apasă Enter pentru a selecta un curs.';\r\n        \r\n      case 'playground-ul de cod':\r\n        return 'În editor: Alt E pentru execuție, Alt F pentru feedback AI. Tab citește linia curentă.';\r\n        \r\n      case 'pagina de test':\r\n        return 'În test: Alt 1-4 pentru răspunsuri. Enter pentru verificare sau următoarea întrebare.';\r\n        \r\n      case 'pagina de profil':\r\n        return 'În profil: Navighează prin secțiuni cu Tab. Enter pentru a modifica setările.';\r\n        \r\n      default:\r\n        return '';\r\n    }\r\n  }\r\n\r\n  handleAccessibilityShortcuts(e) {\r\n    const key = this.getShortcutKey(e);\r\n    const handler = this.shortcuts.get(key);\r\n    \r\n    if (handler) {\r\n      e.preventDefault();\r\n      handler();\r\n    }\r\n  }\r\n\r\n  getShortcutKey(e) {\r\n    const parts = [];\r\n    \r\n    if (e.ctrlKey) parts.push('ctrl');\r\n    if (e.altKey) parts.push('alt');\r\n    if (e.shiftKey) parts.push('Shift');\r\n    \r\n    // Tratăm special anumite taste\r\n    let key = e.key;\r\n    if (key === ' ') key = ' ';\r\n    if (key.length === 1) key = key.toLowerCase();\r\n    \r\n    parts.push(key);\r\n    \r\n    return parts.join('+');\r\n  }\r\n\r\n  addAccessibilityStyles() {\r\n    const style = document.createElement('style');\r\n    style.id = 'accessibility-styles';\r\n    style.textContent = `\r\n      /* Stiluri pentru modul nevăzători */\r\n      body.accessibility-mode {\r\n        background: #000000 !important;\r\n        color: #ffffff !important;\r\n        font-size: 20px !important;\r\n        line-height: 1.8 !important;\r\n        font-family: Arial, sans-serif !important;\r\n      }\r\n      \r\n      body.accessibility-mode * {\r\n        animation: none !important;\r\n        transition: none !important;\r\n      }\r\n      \r\n      accessibility-focus {\r\n       outline: 4px solid #ffff00 !important;\r\n       outline-offset: 4px !important;\r\n       background-color: #000033 !important;\r\n       color: #ffffff !important;\r\n       box-shadow: 0 0 20px #ffff00 !important;\r\n       border-radius: 4px !important;\r\n       position: relative !important;\r\n       z-index: 9999 !important;\r\n     }\r\n     \r\n     /* Ascundem elementele decorative */\r\n     body.accessibility-mode .stars-background,\r\n     body.accessibility-mode .planet,\r\n     body.accessibility-mode .asteroid,\r\n     body.accessibility-mode .shooting-star,\r\n     body.accessibility-mode .code-snippet,\r\n     body.accessibility-mode .cosmic-dust,\r\n     body.accessibility-mode .twinkling-star {\r\n       display: none !important;\r\n     }\r\n     \r\n     /* Simplificăm layout-ul */\r\n     body.accessibility-mode .main-banner {\r\n       background: #000000 !important;\r\n       min-height: auto !important;\r\n       padding: 20px !important;\r\n     }\r\n     \r\n     /* Text mai vizibil */\r\n     body.accessibility-mode h1,\r\n     body.accessibility-mode h2,\r\n     body.accessibility-mode h3,\r\n     body.accessibility-mode h4,\r\n     body.accessibility-mode h5,\r\n     body.accessibility-mode h6 {\r\n       color: #ffffff !important;\r\n       text-decoration: underline !important;\r\n       margin: 20px 0 !important;\r\n     }\r\n     \r\n     body.accessibility-mode p,\r\n     body.accessibility-mode span,\r\n     body.accessibility-mode div {\r\n       color: #ffffff !important;\r\n     }\r\n     \r\n     /* Butoane mai vizibile */\r\n     body.accessibility-mode button,\r\n     body.accessibility-mode .button,\r\n     body.accessibility-mode [role=\"button\"] {\r\n       background: #333333 !important;\r\n       color: #ffffff !important;\r\n       border: 2px solid #ffffff !important;\r\n       padding: 15px 20px !important;\r\n       font-size: 18px !important;\r\n       font-weight: bold !important;\r\n       text-transform: uppercase !important;\r\n     }\r\n     \r\n     body.accessibility-mode button:hover,\r\n     body.accessibility-mode button:focus {\r\n       background: #555555 !important;\r\n     }\r\n     \r\n     /* Linkuri mai vizibile */\r\n     body.accessibility-mode a {\r\n       color: #00ffff !important;\r\n       text-decoration: underline !important;\r\n       font-weight: bold !important;\r\n     }\r\n     \r\n     body.accessibility-mode a:hover,\r\n     body.accessibility-mode a:focus {\r\n       background: #333333 !important;\r\n       padding: 2px 4px !important;\r\n     }\r\n     \r\n     /* Inputuri mai clare */\r\n     body.accessibility-mode input,\r\n     body.accessibility-mode textarea,\r\n     body.accessibility-mode select {\r\n       background: #111111 !important;\r\n       color: #ffffff !important;\r\n       border: 2px solid #ffffff !important;\r\n       padding: 10px !important;\r\n       font-size: 18px !important;\r\n     }\r\n     \r\n     body.accessibility-mode input:focus,\r\n     body.accessibility-mode textarea:focus,\r\n     body.accessibility-mode select:focus {\r\n       border-color: #ffff00 !important;\r\n       outline: 2px solid #ffff00 !important;\r\n     }\r\n     \r\n     /* Simplificăm cardurile */\r\n     body.accessibility-mode .course-card,\r\n     body.accessibility-mode .feature-card,\r\n     body.accessibility-mode .example-card {\r\n       background: #111111 !important;\r\n       border: 2px solid #ffffff !important;\r\n       margin: 10px 0 !important;\r\n       padding: 20px !important;\r\n     }\r\n     \r\n     /* Eliminăm gradiente și efecte */\r\n     body.accessibility-mode [class*=\"gradient\"] {\r\n       background: #000000 !important;\r\n     }\r\n     \r\n     /* Indicator pentru elementul curent citit */\r\n     .accessibility-reading {\r\n       background-color: #333300 !important;\r\n       outline: 2px dashed #ffff00 !important;\r\n     }\r\n     \r\n     /* Mesaje de ajutor vizibile */\r\n     .accessibility-help-popup {\r\n       position: fixed;\r\n       bottom: 20px;\r\n       right: 20px;\r\n       background: #000000;\r\n       color: #ffffff;\r\n       border: 2px solid #ffff00;\r\n       padding: 20px;\r\n       max-width: 400px;\r\n       font-size: 16px;\r\n       z-index: 10000;\r\n       border-radius: 8px;\r\n     }\r\n     \r\n     /* Simplificăm navigarea */\r\n     body.accessibility-mode nav {\r\n       background: #000000 !important;\r\n       border: 2px solid #ffffff !important;\r\n       padding: 10px !important;\r\n     }\r\n     \r\n     /* Lista de elemente focusabile */\r\n     .accessibility-element-list {\r\n       position: fixed;\r\n       left: 0;\r\n       top: 0;\r\n       width: 300px;\r\n       height: 100%;\r\n       background: #000000;\r\n       border-right: 2px solid #ffffff;\r\n       padding: 20px;\r\n       overflow-y: auto;\r\n       z-index: 9998;\r\n       display: none;\r\n     }\r\n     \r\n     body.accessibility-mode.show-element-list .accessibility-element-list {\r\n       display: block;\r\n     }\r\n   `;\r\n   document.head.appendChild(style);\r\n   document.body.classList.add('accessibility-mode');\r\n }\r\n\r\n removeAccessibilityStyles() {\r\n   const style = document.getElementById('accessibility-styles');\r\n   if (style) style.remove();\r\n   document.body.classList.remove('accessibility-mode');\r\n   \r\n   // Eliminăm toate clasele de focus\r\n   document.querySelectorAll('.accessibility-focus, .accessibility-reading').forEach(el => {\r\n     el.classList.remove('accessibility-focus', 'accessibility-reading');\r\n   });\r\n }\r\n\r\n// Adaugă aceste metode în clasa AccessibilityManager (în src/utils/AccessibilityManager.js)\r\n\r\nstopReading() {\r\n  if (this.speechSynthesis.speaking) {\r\n    this.speechSynthesis.cancel();\r\n  }\r\n  \r\n  this.isReading = false;\r\n  this.currentUtterance = null;\r\n  this.readingQueue = [];\r\n  \r\n  // Trimitem event pentru UI\r\n  document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n    detail: { isSpeaking: false }\r\n  }));\r\n}\r\n\r\nprocessQueue() {\r\n  if (this.readingQueue.length > 0 && !this.isReading) {\r\n    const nextUtterance = this.readingQueue.shift();\r\n    this.speechSynthesis.speak(nextUtterance);\r\n  }\r\n}\r\n\r\ntoggleReading() {\r\n  if (this.isReading && this.currentUtterance) {\r\n    if (this.speechSynthesis.paused) {\r\n      this.speechSynthesis.resume();\r\n      this.speak(\"Reluare citire\", 'normal');\r\n    } else {\r\n      this.speechSynthesis.pause();\r\n      this.speak(\"Pauză citire\", 'normal');\r\n    }\r\n  } else {\r\n    this.readCurrentPage();\r\n  }\r\n}\r\n\r\nreadCurrentPage() {\r\n  const pageContent = this.extractPageContent();\r\n  if (pageContent) {\r\n    this.speak(pageContent, 'high');\r\n  } else {\r\n    this.speak(\"Nu există conținut de citit pe această pagină\", 'high');\r\n  }\r\n}\r\n\r\nextractPageContent() {\r\n  let content = '';\r\n  \r\n  // Extragem titlul paginii\r\n  const title = document.querySelector('h1');\r\n  if (title) {\r\n    content += `Titlu: ${title.textContent.trim()}. `;\r\n  }\r\n  \r\n  // Extragem descrierea sau subtitlul\r\n  const description = document.querySelector('.page-description, .course-detail-description, .code-playground-description');\r\n  if (description) {\r\n    content += `${description.textContent.trim()}. `;\r\n  }\r\n  \r\n  // Extragem conținutul principal\r\n  const mainContent = document.querySelector('main, .body-content, .course-detail-content');\r\n  if (mainContent) {\r\n    // Extragem doar textul relevant, ignorând butoanele și alte elemente interactive\r\n    const paragraphs = mainContent.querySelectorAll('p, h2, h3, h4, li');\r\n    paragraphs.forEach(p => {\r\n      const text = p.textContent.trim();\r\n      if (text && text.length > 0) {\r\n        content += `${text}. `;\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Dacă suntem pe o pagină de curs, citim și lecțiile\r\n  const lessons = document.querySelectorAll('.course-preview-item, .lesson-title');\r\n  if (lessons.length > 0) {\r\n    content += 'Lecții disponibile: ';\r\n    lessons.forEach((lesson, index) => {\r\n      content += `${index + 1}. ${lesson.textContent.trim()}. `;\r\n    });\r\n  }\r\n  \r\n  // Dacă suntem pe o pagină de test, citim întrebarea curentă\r\n  const currentQuestion = document.querySelector('.question-container h3');\r\n  if (currentQuestion) {\r\n    content += `Întrebare: ${currentQuestion.textContent.trim()}. `;\r\n    \r\n    const options = document.querySelectorAll('.question-container li label');\r\n    if (options.length > 0) {\r\n      content += 'Opțiuni: ';\r\n      options.forEach((option, index) => {\r\n        content += `${index + 1}. ${option.textContent.trim()}. `;\r\n      });\r\n    }\r\n  }\r\n  \r\n  return content.trim();\r\n}\r\n\r\n// Adaugă și această metodă pentru anunțuri\r\nannounce(message, priority = 'normal') {\r\n  this.speak(message, priority);\r\n}\r\n\r\n// Adaugă getter pentru proprietatea isSpeaking\r\nget isSpeaking() {\r\n  return this.isReading || this.speechSynthesis.speaking;\r\n}\r\n\r\n// Adaugă getter pentru proprietatea isActive\r\nget isActive() {\r\n  return this.isAccessibilityMode;\r\n}\r\n\r\n// Metodă pentru citirea întrebărilor de quiz\r\nreadQuizQuestion(question, options) {\r\n  let text = `Întrebare: ${question}. `;\r\n  if (options && options.length > 0) {\r\n    text += 'Variantele de răspuns sunt: ';\r\n    options.forEach((option, index) => {\r\n      text += `${index + 1}: ${option}. `;\r\n    });\r\n  }\r\n  this.speak(text, 'high');\r\n}\r\n\r\n// Metodă pentru anunțarea rezultatului quiz-ului\r\nannounceQuizResult(score, totalQuestions) {\r\n  const percentage = Math.round((score / totalQuestions) * 100);\r\n  const text = `Test finalizat! Ai răspuns corect la ${score} din ${totalQuestions} întrebări. ` +\r\n               `Scorul tău este ${percentage}%. ` +\r\n               (percentage >= 80 ? 'Felicitări! Rezultat excelent!' : \r\n                percentage >= 60 ? 'Rezultat bun! Continuă să înveți.' : \r\n                'Nu te descuraja! Încearcă din nou pentru un rezultat mai bun.');\r\n  this.speak(text, 'high');\r\n}\r\n\r\n// Metodă pentru citirea liniilor de cod\r\nreadCodeLine(lineNumber) {\r\n  const editor = document.querySelector('.monaco-editor');\r\n  if (editor) {\r\n    // Implementare simplificată - în practică ar trebui să accesăm API-ul Monaco\r\n    this.speak(`Linia ${lineNumber} din editor`, 'normal');\r\n  }\r\n}\r\n\r\n// Metodă pentru anunțarea schimbărilor în cod\r\nannounceCodeChange(newCode, position) {\r\n  if (position && position.line) {\r\n    this.speak(`Cod modificat la linia ${position.line}`, 'normal');\r\n  }\r\n}\r\n\r\n}\r\n\r\n// Exportăm o instanță singleton\r\nconst accessibilityManager = new AccessibilityManager();\r\nexport default accessibilityManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}