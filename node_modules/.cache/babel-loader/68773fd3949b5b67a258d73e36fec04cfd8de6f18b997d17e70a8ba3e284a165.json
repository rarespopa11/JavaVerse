{"ast":null,"code":"// src/utils/AccessibilityManager.js\nclass AccessibilityManager {\n  constructor() {\n    this.isAccessibilityMode = false;\n    this.speechSynthesis = window.speechSynthesis;\n    this.currentUtterance = null;\n    this.voice = null;\n    this.isReading = false;\n    this.readingQueue = [];\n    this.shortcuts = new Map();\n    this.focusedElement = null;\n    this.navigationMode = 'normal';\n    this.currentFocusIndex = 0;\n    this.focusableElements = [];\n    this.navigationHistory = [];\n    this.readingSpeed = 1.0;\n    this.isTyping = false;\n    this.typingBuffer = '';\n    this.lastTypedTime = 0;\n    this.currentLineContent = '';\n    this.initializeVoice();\n    this.setupGlobalListeners();\n    this.registerShortcuts();\n  }\n  initializeVoice() {\n    const setVoice = () => {\n      var _this$voice;\n      const voices = this.speechSynthesis.getVoices();\n      // Prioritizăm vocile în română\n      this.voice = voices.find(voice => voice.lang.startsWith('ro-RO')) || voices.find(voice => voice.lang.startsWith('ro')) || voices[0];\n      console.log('Voice initialized:', ((_this$voice = this.voice) === null || _this$voice === void 0 ? void 0 : _this$voice.name) || 'Default');\n    };\n    if (this.speechSynthesis.getVoices().length > 0) {\n      setVoice();\n    } else {\n      this.speechSynthesis.addEventListener('voiceschanged', setVoice);\n    }\n  }\n  setupGlobalListeners() {\n    document.addEventListener('keydown', e => {\n      // Ctrl+Shift+A pentru activarea modului\n      if (e.ctrlKey && e.shiftKey && e.key === 'A') {\n        e.preventDefault();\n        e.stopPropagation();\n        this.toggleAccessibilityMode();\n        return;\n      }\n      if (!this.isAccessibilityMode) return;\n\n      // Detectăm dacă suntem într-un câmp de input\n      const activeElement = document.activeElement;\n      const isInputField = ['INPUT', 'TEXTAREA'].includes(activeElement.tagName) || activeElement.classList.contains('monaco-editor');\n\n      // Dacă suntem în câmp de input, tratăm diferit\n      if (isInputField) {\n        this.handleTypingMode(e);\n        return;\n      }\n\n      // Pentru navigare normală (când NU suntem în input)\n      this.handleNavigationMode(e);\n    });\n\n    // Listener pentru citirea live a textului tastat\n    document.addEventListener('input', e => {\n      if (!this.isAccessibilityMode) return;\n      const target = e.target;\n      if (['INPUT', 'TEXTAREA'].includes(target.tagName)) {\n        this.handleTextInput(e);\n      }\n    });\n\n    // Actualizăm lista de elemente focusabile când se schimbă DOM-ul\n    const observer = new MutationObserver(() => {\n      if (this.isAccessibilityMode) {\n        this.updateFocusableElements();\n      }\n    });\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n  registerShortcuts() {\n    // Comenzi pentru modul NAVIGARE (când NU suntem în input)\n    this.navigationShortcuts = new Map();\n\n    // Navigare principală\n    this.navigationShortcuts.set('Tab', () => this.navigateNext());\n    this.navigationShortcuts.set('Shift+Tab', () => this.navigatePrevious());\n    this.navigationShortcuts.set('Enter', () => this.activateElement());\n    this.navigationShortcuts.set('Escape', () => this.stopReading());\n\n    // Navigare rapidă cu F-keys pentru a evita conflictele\n    this.navigationShortcuts.set('F1', () => this.readHelp());\n    this.navigationShortcuts.set('F2', () => this.navigateToSection('header'));\n    this.navigationShortcuts.set('F3', () => this.navigateToSection('main'));\n    this.navigationShortcuts.set('F4', () => this.navigateToSection('footer'));\n\n    // Navigare cu Ctrl+Shift pentru pagini\n    this.navigationShortcuts.set('Ctrl+Shift+C', () => this.navigateToCourses());\n    this.navigationShortcuts.set('Ctrl+Shift+P', () => this.navigateToPlayground());\n    this.navigationShortcuts.set('Ctrl+Shift+R', () => this.navigateToProfile());\n    this.navigationShortcuts.set('Ctrl+Shift+H', () => this.goHome());\n\n    // Navigare prin elemente cu Ctrl+\n    this.navigationShortcuts.set('Ctrl+B', () => this.nextButton());\n    this.navigationShortcuts.set('Ctrl+L', () => this.nextLink());\n    this.navigationShortcuts.set('Ctrl+T', () => this.nextHeading());\n\n    // Comenzi utilitare\n    this.navigationShortcuts.set('Ctrl+M', () => this.readCurrentPage());\n    this.navigationShortcuts.set('Ctrl+N', () => this.readNavigationInfo());\n    this.navigationShortcuts.set('Ctrl+Shift+S', () => this.adjustSpeed());\n    this.navigationShortcuts.set('Ctrl+Shift+L', () => this.listAllElements());\n\n    // Comenzi pentru modul TASTARE (când suntem în input)\n    this.typingShortcuts = new Map();\n\n    // Ctrl+Enter pentru a ieși din modul editare\n    this.typingShortcuts.set('Ctrl+Enter', () => this.exitTypingMode());\n\n    // Ctrl+L pentru a citi linia curentă\n    this.typingShortcuts.set('Ctrl+L', () => this.readCurrentLine());\n\n    // Ctrl+W pentru a citi ultimul cuvânt\n    this.typingShortcuts.set('Ctrl+W', () => this.readLastWord());\n\n    // Ctrl+Shift+L pentru a citi tot textul\n    this.typingShortcuts.set('Ctrl+Shift+L', () => this.readAllText());\n\n    // Pentru editor de cod\n    this.typingShortcuts.set('Ctrl+Shift+E', () => this.executeCode());\n    this.typingShortcuts.set('Ctrl+Shift+F', () => this.getFeedback());\n  }\n  handleNavigationMode(e) {\n    const key = this.getShortcutKey(e);\n    const handler = this.navigationShortcuts.get(key);\n    if (handler) {\n      e.preventDefault();\n      handler();\n    }\n  }\n  handleTypingMode(e) {\n    const key = this.getShortcutKey(e);\n    const handler = this.typingShortcuts.get(key);\n    if (handler) {\n      e.preventDefault();\n      handler();\n      return;\n    }\n\n    // Pentru navigare în editor cu săgeți\n    if (e.target.classList.contains('monaco-editor') || e.target.closest('.monaco-editor')) {\n      this.handleCodeNavigation(e);\n    }\n  }\n  handleTextInput(e) {\n    const target = e.target;\n    const value = target.value;\n    const cursorPosition = target.selectionStart;\n\n    // Determinăm ce a fost tastat\n    const currentChar = value.charAt(cursorPosition - 1);\n\n    // Adăugăm la buffer pentru citire\n    this.typingBuffer += currentChar;\n    this.lastTypedTime = Date.now();\n\n    // Citim caracterul imediat\n    if (currentChar && currentChar !== ' ') {\n      this.speak(this.getCharacterName(currentChar), 'normal');\n    } else if (currentChar === ' ') {\n      // La spațiu, citim ultimul cuvânt\n      this.readLastWordFromBuffer();\n    }\n\n    // Resetăm buffer-ul după o pauză\n    setTimeout(() => {\n      if (Date.now() - this.lastTypedTime > 1000) {\n        this.typingBuffer = '';\n      }\n    }, 1000);\n  }\n  handleCodeNavigation(e) {\n    // Pentru editor Monaco, tratăm special săgețile sus/jos\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n      // Așteaptă puțin pentru ca editorul să își actualizeze poziția\n      setTimeout(() => {\n        this.readCurrentCodeLine();\n      }, 50);\n    }\n  }\n  getCharacterName(char) {\n    // Caractere speciale\n    const specialChars = {\n      ' ': 'spațiu',\n      '.': 'punct',\n      ',': 'virgulă',\n      ';': 'punct și virgulă',\n      ':': 'două puncte',\n      '!': 'semnul exclamării',\n      '?': 'semnul întrebării',\n      '\"': 'ghilimele',\n      \"'\": 'apostrof',\n      '(': 'paranteză deschisă',\n      ')': 'paranteză închisă',\n      '[': 'paranteză pătrată deschisă',\n      ']': 'paranteză pătrată închisă',\n      '{': 'acoladă deschisă',\n      '}': 'acoladă închisă',\n      '+': 'plus',\n      '-': 'minus',\n      '*': 'asterisc',\n      '/': 'slash',\n      '\\\\': 'backslash',\n      '=': 'egal',\n      '<': 'mai mic',\n      '>': 'mai mare',\n      '@': 'arond',\n      '#': 'diez',\n      '$': 'dolar',\n      '%': 'procent',\n      '^': 'circumflex',\n      '&': 'ampersand',\n      '_': 'underscore',\n      '|': 'bară verticală',\n      '~': 'tildă',\n      '`': 'accent grav',\n      '\\n': 'linie nouă',\n      '\\t': 'tab'\n    };\n\n    // Pentru cifre\n    if (/\\d/.test(char)) {\n      return `cifra ${char}`;\n    }\n\n    // Pentru litere mari\n    if (/[A-Z]/.test(char)) {\n      return `${char} mare`;\n    }\n    return specialChars[char] || char;\n  }\n  readLastWordFromBuffer() {\n    const words = this.typingBuffer.trim().split(/\\s+/);\n    const lastWord = words[words.length - 1];\n    if (lastWord && lastWord.length > 0) {\n      this.speak(lastWord, 'normal');\n    }\n  }\n  readCurrentLine() {\n    const activeElement = document.activeElement;\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\n      const value = activeElement.value;\n      const cursorPosition = activeElement.selectionStart;\n\n      // Găsim începutul și sfârșitul liniei curente\n      let lineStart = value.lastIndexOf('\\n', cursorPosition - 1) + 1;\n      let lineEnd = value.indexOf('\\n', cursorPosition);\n      if (lineEnd === -1) lineEnd = value.length;\n      const currentLine = value.substring(lineStart, lineEnd);\n      if (currentLine.trim()) {\n        this.speak(`Linia curentă: ${currentLine}`, 'high');\n      } else {\n        this.speak('Linie goală', 'high');\n      }\n    }\n  }\n  readCurrentCodeLine() {\n    // Pentru Monaco Editor\n    const monacoEditor = document.querySelector('.monaco-editor');\n    if (monacoEditor) {\n      // Găsim linia activă în Monaco\n      const activeLine = monacoEditor.querySelector('.active-line');\n      if (activeLine) {\n        const lineContent = activeLine.textContent.trim();\n        const lineNumber = this.getMonacoLineNumber();\n        if (lineContent) {\n          this.speak(`Linia ${lineNumber}: ${lineContent}`, 'high');\n        } else {\n          this.speak(`Linia ${lineNumber}: goală`, 'high');\n        }\n      }\n    }\n  }\n  getMonacoLineNumber() {\n    // Găsim numărul liniei din Monaco\n    const lineNumbers = document.querySelector('.margin-view-overlays');\n    if (lineNumbers) {\n      const activeLineNumber = lineNumbers.querySelector('.active-line-number');\n      if (activeLineNumber) {\n        return activeLineNumber.textContent.trim();\n      }\n    }\n    return '1';\n  }\n  readLastWord() {\n    const activeElement = document.activeElement;\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\n      const value = activeElement.value;\n      const cursorPosition = activeElement.selectionStart;\n\n      // Găsim ultimul cuvânt înainte de cursor\n      const textBeforeCursor = value.substring(0, cursorPosition);\n      const words = textBeforeCursor.trim().split(/\\s+/);\n      const lastWord = words[words.length - 1];\n      if (lastWord) {\n        this.speak(`Ultimul cuvânt: ${lastWord}`, 'high');\n      } else {\n        this.speak('Niciun cuvânt', 'high');\n      }\n    }\n  }\n  readAllText() {\n    const activeElement = document.activeElement;\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\n      const value = activeElement.value;\n      if (value.trim()) {\n        this.speak(`Textul complet: ${value}`, 'high');\n      } else {\n        this.speak('Câmpul este gol', 'high');\n      }\n    }\n  }\n  exitTypingMode() {\n    const activeElement = document.activeElement;\n    if (activeElement) {\n      activeElement.blur();\n      this.speak('Mod editare dezactivat. Navigare reactivată', 'high');\n\n      // Re-focusăm elementul pentru navigare\n      setTimeout(() => {\n        this.setFocus(activeElement);\n      }, 100);\n    }\n  }\n  toggleAccessibilityMode() {\n    this.isAccessibilityMode = !this.isAccessibilityMode;\n    if (this.isAccessibilityMode) {\n      this.speak(\"Modul pentru nevăzători activat. Bine ai venit în JavaVerse!\", 'high');\n      this.addAccessibilityStyles();\n      this.updateFocusableElements();\n      setTimeout(() => {\n        this.readWelcomeMessage();\n      }, 2000);\n    } else {\n      this.speak(\"Modul pentru nevăzători dezactivat.\");\n      this.removeAccessibilityStyles();\n      this.stopReading();\n    }\n    document.dispatchEvent(new CustomEvent('accessibilityModeChanged', {\n      detail: {\n        isActive: this.isAccessibilityMode\n      }\n    }));\n  }\n  readWelcomeMessage() {\n    const welcomeText = `\n      Bine ai venit în modul pentru nevăzători JavaVerse!\n      \n      Comenzi principale:\n      - Tab și Shift Tab pentru navigare între elemente\n      - Enter pentru a activa elementul selectat\n      - Escape pentru a opri citirea\n      \n      Navigare rapidă:\n      - F1 pentru ajutor\n      - F2, F3, F4 pentru header, conținut principal, footer\n      - Control Shift C pentru cursuri\n      - Control Shift P pentru playground\n      - Control Shift R pentru profil\n      - Control Shift H pentru pagina principală\n      \n      Navigare prin elemente:\n      - Control B pentru următorul buton\n      - Control L pentru următorul link\n      - Control T pentru următorul titlu\n      \n      În câmpuri de text:\n      - Caracterele sunt citite în timp ce tastezi\n      - Spațiu citește ultimul cuvânt\n      - Control L pentru a citi linia curentă\n      - Control W pentru ultimul cuvânt\n      - Control Shift L pentru tot textul\n      - Control Enter pentru a ieși din editare\n      \n      În editor de cod:\n      - Săgețile sus și jos citesc automat linia curentă\n      - Control Shift E pentru execuție\n      - Control Shift F pentru feedback AI\n      \n      Apasă F1 oricând pentru ajutor contextual.\n    `;\n    this.speak(welcomeText, 'high');\n  }\n  updateFocusableElements() {\n    const selectors = ['a[href]:not([disabled])', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])', 'textarea:not([disabled])', '[tabindex]:not([tabindex=\"-1\"])', '.course-card', '.question-container li', '.feature-card', '.example-card', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', '[role=\"button\"]:not([disabled])', '[role=\"link\"]', '[role=\"navigation\"]', '[role=\"main\"]'];\n    this.focusableElements = Array.from(document.querySelectorAll(selectors.join(', '))).filter(el => {\n      // Verificăm dacă elementul este vizibil\n      const rect = el.getBoundingClientRect();\n      return rect.width > 0 && rect.height > 0 && el.offsetParent !== null;\n    }).sort((a, b) => {\n      // Sortăm elementele după poziția lor în pagină\n      const rectA = a.getBoundingClientRect();\n      const rectB = b.getBoundingClientRect();\n      if (Math.abs(rectA.top - rectB.top) < 10) {\n        return rectA.left - rectB.left;\n      }\n      return rectA.top - rectB.top;\n    });\n  }\n  navigateNext() {\n    this.updateFocusableElements();\n    if (this.focusableElements.length === 0) {\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\n      return;\n    }\n    this.currentFocusIndex = (this.currentFocusIndex + 1) % this.focusableElements.length;\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\n  }\n  navigatePrevious() {\n    this.updateFocusableElements();\n    if (this.focusableElements.length === 0) {\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\n      return;\n    }\n    this.currentFocusIndex = this.currentFocusIndex === 0 ? this.focusableElements.length - 1 : this.currentFocusIndex - 1;\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\n  }\n  setFocus(element) {\n    if (!element) return;\n\n    // Eliminăm focus-ul anterior\n    document.querySelectorAll('.accessibility-focus').forEach(el => {\n      el.classList.remove('accessibility-focus');\n    });\n\n    // Setăm noul focus\n    this.focusedElement = element;\n    element.classList.add('accessibility-focus');\n\n    // Scroll smooth în vedere\n    element.scrollIntoView({\n      behavior: 'smooth',\n      block: 'center',\n      inline: 'nearest'\n    });\n\n    // Focus real pentru inputuri\n    if (['INPUT', 'TEXTAREA', 'SELECT'].includes(element.tagName)) {\n      element.focus();\n    }\n\n    // Citim informații despre element\n    this.readElementInfo(element);\n  }\n  readElementInfo(element) {\n    var _element$textContent, _document$querySelect, _document$querySelect2, _element$options$elem, _document$querySelect3;\n    let description = '';\n    const tagName = element.tagName.toLowerCase();\n    const ariaLabel = element.getAttribute('aria-label');\n    const text = (_element$textContent = element.textContent) === null || _element$textContent === void 0 ? void 0 : _element$textContent.trim();\n\n    // Prioritizăm aria-label\n    if (ariaLabel) {\n      description = ariaLabel;\n    } else {\n      // Descrieri specifice pentru fiecare tip de element\n      switch (tagName) {\n        case 'button':\n          description = `Buton: ${text || 'Fără text'}`;\n          break;\n        case 'a':\n          description = `Link: ${text || 'Fără text'}`;\n          break;\n        case 'input':\n          const inputType = element.type;\n          const inputLabel = (_document$querySelect = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.textContent;\n          const inputValue = element.value;\n          if (inputType === 'text' || inputType === 'email' || inputType === 'password') {\n            description = `Câmp ${inputType}: ${inputLabel || element.placeholder || 'Fără etichetă'}`;\n            if (inputValue) {\n              description += `. Valoare curentă: ${inputType === 'password' ? 'parolă introdusă' : inputValue}`;\n            }\n          } else if (inputType === 'radio' || inputType === 'checkbox') {\n            description = `${inputType === 'radio' ? 'Opțiune' : 'Bifă'}: ${inputLabel || text}. ${element.checked ? 'Selectat' : 'Neselectat'}`;\n          }\n          break;\n        case 'select':\n          const selectLabel = (_document$querySelect2 = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect2 === void 0 ? void 0 : _document$querySelect2.textContent;\n          const selectedOption = (_element$options$elem = element.options[element.selectedIndex]) === null || _element$options$elem === void 0 ? void 0 : _element$options$elem.text;\n          description = `Listă derulantă: ${selectLabel || 'Fără etichetă'}. Selectat: ${selectedOption || 'Nimic'}`;\n          break;\n        case 'textarea':\n          const textareaLabel = (_document$querySelect3 = document.querySelector(`label[for=\"${element.id}\"]`)) === null || _document$querySelect3 === void 0 ? void 0 : _document$querySelect3.textContent;\n          description = `Zonă de text: ${textareaLabel || element.placeholder || 'Fără etichetă'}`;\n          if (element.value) {\n            description += `. ${element.value.length} caractere introduse`;\n          }\n          break;\n        case 'h1':\n        case 'h2':\n        case 'h3':\n        case 'h4':\n        case 'h5':\n        case 'h6':\n          const level = tagName.charAt(1);\n          description = `Titlu nivel ${level}: ${text}`;\n          break;\n        default:\n          // Pentru elemente custom (carduri, etc.)\n          if (element.classList.contains('course-card')) {\n            var _element$querySelecto, _element$querySelecto2;\n            const title = (_element$querySelecto = element.querySelector('.course-title')) === null || _element$querySelecto === void 0 ? void 0 : _element$querySelecto.textContent;\n            const desc = (_element$querySelecto2 = element.querySelector('.course-description')) === null || _element$querySelecto2 === void 0 ? void 0 : _element$querySelecto2.textContent;\n            description = `Curs: ${title}. ${desc}`;\n          } else if (element.classList.contains('feature-card')) {\n            var _element$querySelecto3, _element$querySelecto4;\n            const title = (_element$querySelecto3 = element.querySelector('h3')) === null || _element$querySelecto3 === void 0 ? void 0 : _element$querySelecto3.textContent;\n            const desc = (_element$querySelecto4 = element.querySelector('p')) === null || _element$querySelecto4 === void 0 ? void 0 : _element$querySelecto4.textContent;\n            description = `Caracteristică: ${title}. ${desc}`;\n          } else if (element.classList.contains('example-card')) {\n            var _element$querySelecto5;\n            const title = ((_element$querySelecto5 = element.querySelector('.card-title')) === null || _element$querySelecto5 === void 0 ? void 0 : _element$querySelecto5.textContent) || text;\n            description = `Exemplu de cod: ${title}`;\n          } else {\n            description = text || `Element ${tagName}`;\n          }\n      }\n    }\n\n    // Adăugăm indicații pentru interacțiune\n    if (['button', 'a'].includes(tagName) || element.getAttribute('role') === 'button') {\n      description += \". Apasă Enter pentru a activa\";\n    } else if (['input', 'textarea', 'select'].includes(tagName)) {\n      description += \". Apasă Enter pentru a edita\";\n    }\n    this.speak(description, 'high');\n  }\n  activateElement() {\n    if (!this.focusedElement) {\n      this.speak(\"Niciun element selectat\", 'high');\n      return;\n    }\n    const tagName = this.focusedElement.tagName.toLowerCase();\n\n    // Pentru inputuri, permitem editarea\n    if (['input', 'textarea', 'select'].includes(tagName)) {\n      this.focusedElement.focus();\n      this.speak(`Mod editare activat. Control L pentru linia curentă, Control Enter pentru ieșire`, 'high');\n      return;\n    }\n\n    // Pentru alte elemente, simulăm click\n    this.speak(\"Activez elementul\", 'normal');\n    if (this.focusedElement.click) {\n      this.focusedElement.click();\n    } else if (tagName === 'a') {\n      window.location.href = this.focusedElement.href;\n    }\n  }\n\n  // Navigare rapidă la secțiuni\n  navigateToSection(sectionName) {\n    let selector;\n    let announcement;\n    switch (sectionName) {\n      case 'header':\n        selector = 'header, [role=\"banner\"], .jv-header';\n        announcement = \"Navighez la header\";\n        break;\n      case 'main':\n        selector = 'main, [role=\"main\"], .body-content';\n        announcement = \"Navighez la conținutul principal\";\n        break;\n      case 'footer':\n        selector = 'footer, [role=\"contentinfo\"], .jv-footer';\n        announcement = \"Navighez la footer\";\n        break;\n    }\n    const section = document.querySelector(selector);\n    if (section) {\n      this.speak(announcement, 'high');\n\n      // Găsim primul element focusabil din secțiune\n      const firstFocusable = section.querySelector('a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])');\n      if (firstFocusable) {\n        const index = this.focusableElements.indexOf(firstFocusable);\n        if (index !== -1) {\n          this.currentFocusIndex = index;\n          this.setFocus(firstFocusable);\n        }\n      } else {\n        section.scrollIntoView({\n          behavior: 'smooth',\n          block: 'start'\n        });\n        this.speak(\"Secțiune fără elemente interactive\", 'normal');\n      }\n    } else {\n      this.speak(\"Secțiunea nu a fost găsită\", 'high');\n    }\n  }\n\n  // Navigare prin tipuri de elemente\n  nextButton() {\n    this.navigateToNextOfType('button, [role=\"button\"]', 'buton');\n  }\n  nextLink() {\n    this.navigateToNextOfType('a[href]', 'link');\n  }\n  nextInput() {\n    this.navigateToNextOfType('input, textarea, select', 'câmp de input');\n  }\n  nextHeading() {\n    this.navigateToNextOfType('h1, h2, h3, h4, h5, h6', 'titlu');\n  }\n  navigateToNextOfType(selector, typeName) {\n    const elements = Array.from(document.querySelectorAll(selector)).filter(el => el.offsetParent !== null);\n    if (elements.length === 0) {\n      this.speak(`Nu există ${typeName} pe această pagină`, 'high');\n      return;\n    }\n    let nextIndex = -1;\n    if (this.focusedElement) {\n      const currentTypeIndex = elements.indexOf(this.focusedElement);\n      if (currentTypeIndex !== -1) {\n        nextIndex = (currentTypeIndex + 1) % elements.length;\n      } else {\n        // Găsim următorul element de acest tip după elementul curent\n        const currentRect = this.focusedElement.getBoundingClientRect();\n        for (let i = 0; i < elements.length; i++) {\n          const rect = elements[i].getBoundingClientRect();\n          if (rect.top > currentRect.top || Math.abs(rect.top - currentRect.top) < 10 && rect.left > currentRect.left) {\n            nextIndex = i;\n            break;\n          }\n        }\n      }\n    }\n    if (nextIndex === -1) {\n      nextIndex = 0;\n    }\n    const targetElement = elements[nextIndex];\n    const globalIndex = this.focusableElements.indexOf(targetElement);\n    if (globalIndex !== -1) {\n      this.currentFocusIndex = globalIndex;\n      this.setFocus(targetElement);\n    }\n  }\n\n  // Ajustare viteză citire\n  adjustSpeed() {\n    const speeds = [0.7, 0.85, 1.0, 1.15, 1.3];\n    const currentIndex = speeds.indexOf(this.readingSpeed);\n    const nextIndex = (currentIndex + 1) % speeds.length;\n    this.readingSpeed = speeds[nextIndex];\n    this.speak(`Viteză de citire: ${Math.round(this.readingSpeed * 100)}%`, 'high');\n  }\n\n  // Metodă pentru speak\n  speak(text, priority = 'normal') {\n    if (!text || text.trim() === '') return;\n    if (priority === 'high') {\n      this.stopReading();\n    }\n    const utterance = new SpeechSynthesisUtterance(text);\n    if (this.voice) {\n      utterance.voice = this.voice;\n    }\n    utterance.rate = this.readingSpeed;\n    utterance.pitch = 1.0;\n    utterance.volume = 1.0;\n    utterance.onstart = () => {\n      this.isReading = true;\n      this.currentUtterance = utterance;\n\n      // Trimitem event pentru UI\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n        detail: {\n          isSpeaking: true\n        }\n      }));\n    };\n    utterance.onend = () => {\n      this.isReading = false;\n      this.currentUtterance = null;\n      this.processQueue();\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n        detail: {\n          isSpeaking: false\n        }\n      }));\n    };\n    utterance.onerror = e => {\n      console.error('Speech synthesis error:', e);\n      this.isReading = false;\n      this.currentUtterance = null;\n    };\n    if (this.isReading && priority !== 'high') {\n      this.readingQueue.push(utterance);\n    } else {\n      this.speechSynthesis.speak(utterance);\n    }\n  }\n\n  // Adaugă aceste metode în clasa AccessibilityManager (în src/utils/AccessibilityManager.js)\n\n  stopReading() {\n    if (this.speechSynthesis.speaking) {\n      this.speechSynthesis.cancel();\n    }\n    this.isReading = false;\n    this.currentUtterance = null;\n    this.readingQueue = [];\n\n    // Trimitem event pentru UI\n    document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n      detail: {\n        isSpeaking: false\n      }\n    }));\n  }\n  processQueue() {\n    if (this.readingQueue.length > 0 && !this.isReading) {\n      const nextUtterance = this.readingQueue.shift();\n      this.speechSynthesis.speak(nextUtterance);\n    }\n  }\n  toggleReading() {\n    if (this.isReading && this.currentUtterance) {\n      if (this.speechSynthesis.paused) {\n        this.speechSynthesis.resume();\n        this.speak(\"Reluare citire\", 'normal');\n      } else {\n        this.speechSynthesis.pause();\n        this.speak(\"Pauză citire\", 'normal');\n      }\n    } else {\n      this.readCurrentPage();\n    }\n  }\n  readCurrentPage() {\n    const pageContent = this.extractPageContent();\n    if (pageContent) {\n      this.speak(pageContent, 'high');\n    } else {\n      this.speak(\"Nu există conținut de citit pe această pagină\", 'high');\n    }\n  }\n  extractPageContent() {\n    let content = '';\n\n    // Extragem titlul paginii\n    const title = document.querySelector('h1');\n    if (title) {\n      content += `Titlu: ${title.textContent.trim()}. `;\n    }\n\n    // Extragem descrierea sau subtitlul\n    const description = document.querySelector('.page-description, .course-detail-description, .code-playground-description');\n    if (description) {\n      content += `${description.textContent.trim()}. `;\n    }\n\n    // Extragem conținutul principal\n    const mainContent = document.querySelector('main, .body-content, .course-detail-content');\n    if (mainContent) {\n      // Extragem doar textul relevant, ignorând butoanele și alte elemente interactive\n      const paragraphs = mainContent.querySelectorAll('p, h2, h3, h4, li');\n      paragraphs.forEach(p => {\n        const text = p.textContent.trim();\n        if (text && text.length > 0) {\n          content += `${text}. `;\n        }\n      });\n    }\n\n    // Dacă suntem pe o pagină de curs, citim și lecțiile\n    const lessons = document.querySelectorAll('.course-preview-item, .lesson-title');\n    if (lessons.length > 0) {\n      content += 'Lecții disponibile: ';\n      lessons.forEach((lesson, index) => {\n        content += `${index + 1}. ${lesson.textContent.trim()}. `;\n      });\n    }\n\n    // Dacă suntem pe o pagină de test, citim întrebarea curentă\n    const currentQuestion = document.querySelector('.question-container h3');\n    if (currentQuestion) {\n      content += `Întrebare: ${currentQuestion.textContent.trim()}. `;\n      const options = document.querySelectorAll('.question-container li label');\n      if (options.length > 0) {\n        content += 'Opțiuni: ';\n        options.forEach((option, index) => {\n          content += `${index + 1}. ${option.textContent.trim()}. `;\n        });\n      }\n    }\n    return content.trim();\n  }\n\n  // Adaugă și această metodă pentru anunțuri\n  announce(message, priority = 'normal') {\n    this.speak(message, priority);\n  }\n\n  // Adaugă getter pentru proprietatea isSpeaking\n  get isSpeaking() {\n    return this.isReading || this.speechSynthesis.speaking;\n  }\n\n  // Adaugă getter pentru proprietatea isActive\n  get isActive() {\n    return this.isAccessibilityMode;\n  }\n\n  // Metodă pentru citirea întrebărilor de quiz\n  readQuizQuestion(question, options) {\n    let text = `Întrebare: ${question}. `;\n    if (options && options.length > 0) {\n      text += 'Variantele de răspuns sunt: ';\n      options.forEach((option, index) => {\n        text += `${index + 1}: ${option}. `;\n      });\n    }\n    this.speak(text, 'high');\n  }\n\n  // Metodă pentru anunțarea rezultatului quiz-ului\n  announceQuizResult(score, totalQuestions) {\n    const percentage = Math.round(score / totalQuestions * 100);\n    const text = `Test finalizat! Ai răspuns corect la ${score} din ${totalQuestions} întrebări. ` + `Scorul tău este ${percentage}%. ` + (percentage >= 80 ? 'Felicitări! Rezultat excelent!' : percentage >= 60 ? 'Rezultat bun! Continuă să înveți.' : 'Nu te descuraja! Încearcă din nou pentru un rezultat mai bun.');\n    this.speak(text, 'high');\n  }\n\n  // Metodă pentru citirea liniilor de cod\n  readCodeLine(lineNumber) {\n    const editor = document.querySelector('.monaco-editor');\n    if (editor) {\n      // Implementare simplificată - în practică ar trebui să accesăm API-ul Monaco\n      this.speak(`Linia ${lineNumber} din editor`, 'normal');\n    }\n  }\n\n  // Metodă pentru anunțarea schimbărilor în cod\n  announceCodeChange(newCode, position) {\n    if (position && position.line) {\n      this.speak(`Cod modificat la linia ${position.line}`, 'normal');\n    }\n  }\n}\n\n// Exportăm o instanță singleton\nconst accessibilityManager = new AccessibilityManager();\nexport default accessibilityManager;","map":{"version":3,"names":["AccessibilityManager","constructor","isAccessibilityMode","speechSynthesis","window","currentUtterance","voice","isReading","readingQueue","shortcuts","Map","focusedElement","navigationMode","currentFocusIndex","focusableElements","navigationHistory","readingSpeed","isTyping","typingBuffer","lastTypedTime","currentLineContent","initializeVoice","setupGlobalListeners","registerShortcuts","setVoice","_this$voice","voices","getVoices","find","lang","startsWith","console","log","name","length","addEventListener","document","e","ctrlKey","shiftKey","key","preventDefault","stopPropagation","toggleAccessibilityMode","activeElement","isInputField","includes","tagName","classList","contains","handleTypingMode","handleNavigationMode","target","handleTextInput","observer","MutationObserver","updateFocusableElements","observe","body","childList","subtree","navigationShortcuts","set","navigateNext","navigatePrevious","activateElement","stopReading","readHelp","navigateToSection","navigateToCourses","navigateToPlayground","navigateToProfile","goHome","nextButton","nextLink","nextHeading","readCurrentPage","readNavigationInfo","adjustSpeed","listAllElements","typingShortcuts","exitTypingMode","readCurrentLine","readLastWord","readAllText","executeCode","getFeedback","getShortcutKey","handler","get","closest","handleCodeNavigation","value","cursorPosition","selectionStart","currentChar","charAt","Date","now","speak","getCharacterName","readLastWordFromBuffer","setTimeout","readCurrentCodeLine","char","specialChars","test","words","trim","split","lastWord","lineStart","lastIndexOf","lineEnd","indexOf","currentLine","substring","monacoEditor","querySelector","activeLine","lineContent","textContent","lineNumber","getMonacoLineNumber","lineNumbers","activeLineNumber","textBeforeCursor","blur","setFocus","addAccessibilityStyles","readWelcomeMessage","removeAccessibilityStyles","dispatchEvent","CustomEvent","detail","isActive","welcomeText","selectors","Array","from","querySelectorAll","join","filter","el","rect","getBoundingClientRect","width","height","offsetParent","sort","a","b","rectA","rectB","Math","abs","top","left","element","forEach","remove","add","scrollIntoView","behavior","block","inline","focus","readElementInfo","_element$textContent","_document$querySelect","_document$querySelect2","_element$options$elem","_document$querySelect3","description","toLowerCase","ariaLabel","getAttribute","text","inputType","type","inputLabel","id","inputValue","placeholder","checked","selectLabel","selectedOption","options","selectedIndex","textareaLabel","level","_element$querySelecto","_element$querySelecto2","title","desc","_element$querySelecto3","_element$querySelecto4","_element$querySelecto5","click","location","href","sectionName","selector","announcement","section","firstFocusable","index","navigateToNextOfType","nextInput","typeName","elements","nextIndex","currentTypeIndex","currentRect","i","targetElement","globalIndex","speeds","currentIndex","round","priority","utterance","SpeechSynthesisUtterance","rate","pitch","volume","onstart","isSpeaking","onend","processQueue","onerror","error","push","speaking","cancel","nextUtterance","shift","toggleReading","paused","resume","pause","pageContent","extractPageContent","content","mainContent","paragraphs","p","lessons","lesson","currentQuestion","option","announce","message","readQuizQuestion","question","announceQuizResult","score","totalQuestions","percentage","readCodeLine","editor","announceCodeChange","newCode","position","line","accessibilityManager"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/utils/AccessibilityManager.js"],"sourcesContent":["// src/utils/AccessibilityManager.js\r\nclass AccessibilityManager {\r\n  constructor() {\r\n    this.isAccessibilityMode = false;\r\n    this.speechSynthesis = window.speechSynthesis;\r\n    this.currentUtterance = null;\r\n    this.voice = null;\r\n    this.isReading = false;\r\n    this.readingQueue = [];\r\n    this.shortcuts = new Map();\r\n    this.focusedElement = null;\r\n    this.navigationMode = 'normal';\r\n    this.currentFocusIndex = 0;\r\n    this.focusableElements = [];\r\n    this.navigationHistory = [];\r\n    this.readingSpeed = 1.0;\r\n    this.isTyping = false;\r\n    this.typingBuffer = '';\r\n    this.lastTypedTime = 0;\r\n    this.currentLineContent = '';\r\n    \r\n    this.initializeVoice();\r\n    this.setupGlobalListeners();\r\n    this.registerShortcuts();\r\n  }\r\n\r\n  initializeVoice() {\r\n    const setVoice = () => {\r\n      const voices = this.speechSynthesis.getVoices();\r\n      // Prioritizăm vocile în română\r\n      this.voice = voices.find(voice => voice.lang.startsWith('ro-RO')) || \r\n                   voices.find(voice => voice.lang.startsWith('ro')) || \r\n                   voices[0];\r\n      console.log('Voice initialized:', this.voice?.name || 'Default');\r\n    };\r\n\r\n    if (this.speechSynthesis.getVoices().length > 0) {\r\n      setVoice();\r\n    } else {\r\n      this.speechSynthesis.addEventListener('voiceschanged', setVoice);\r\n    }\r\n  }\r\n\r\n  setupGlobalListeners() {\r\n    document.addEventListener('keydown', (e) => {\r\n      // Ctrl+Shift+A pentru activarea modului\r\n      if (e.ctrlKey && e.shiftKey && e.key === 'A') {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.toggleAccessibilityMode();\r\n        return;\r\n      }\r\n\r\n      if (!this.isAccessibilityMode) return;\r\n\r\n      // Detectăm dacă suntem într-un câmp de input\r\n      const activeElement = document.activeElement;\r\n      const isInputField = ['INPUT', 'TEXTAREA'].includes(activeElement.tagName) || \r\n                          activeElement.classList.contains('monaco-editor');\r\n\r\n      // Dacă suntem în câmp de input, tratăm diferit\r\n      if (isInputField) {\r\n        this.handleTypingMode(e);\r\n        return;\r\n      }\r\n\r\n      // Pentru navigare normală (când NU suntem în input)\r\n      this.handleNavigationMode(e);\r\n    });\r\n\r\n    // Listener pentru citirea live a textului tastat\r\n    document.addEventListener('input', (e) => {\r\n      if (!this.isAccessibilityMode) return;\r\n      \r\n      const target = e.target;\r\n      if (['INPUT', 'TEXTAREA'].includes(target.tagName)) {\r\n        this.handleTextInput(e);\r\n      }\r\n    });\r\n\r\n    // Actualizăm lista de elemente focusabile când se schimbă DOM-ul\r\n    const observer = new MutationObserver(() => {\r\n      if (this.isAccessibilityMode) {\r\n        this.updateFocusableElements();\r\n      }\r\n    });\r\n\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  registerShortcuts() {\r\n    // Comenzi pentru modul NAVIGARE (când NU suntem în input)\r\n    this.navigationShortcuts = new Map();\r\n    \r\n    // Navigare principală\r\n    this.navigationShortcuts.set('Tab', () => this.navigateNext());\r\n    this.navigationShortcuts.set('Shift+Tab', () => this.navigatePrevious());\r\n    this.navigationShortcuts.set('Enter', () => this.activateElement());\r\n    this.navigationShortcuts.set('Escape', () => this.stopReading());\r\n    \r\n    // Navigare rapidă cu F-keys pentru a evita conflictele\r\n    this.navigationShortcuts.set('F1', () => this.readHelp());\r\n    this.navigationShortcuts.set('F2', () => this.navigateToSection('header'));\r\n    this.navigationShortcuts.set('F3', () => this.navigateToSection('main'));\r\n    this.navigationShortcuts.set('F4', () => this.navigateToSection('footer'));\r\n    \r\n    // Navigare cu Ctrl+Shift pentru pagini\r\n    this.navigationShortcuts.set('Ctrl+Shift+C', () => this.navigateToCourses());\r\n    this.navigationShortcuts.set('Ctrl+Shift+P', () => this.navigateToPlayground());\r\n    this.navigationShortcuts.set('Ctrl+Shift+R', () => this.navigateToProfile());\r\n    this.navigationShortcuts.set('Ctrl+Shift+H', () => this.goHome());\r\n    \r\n    // Navigare prin elemente cu Ctrl+\r\n    this.navigationShortcuts.set('Ctrl+B', () => this.nextButton());\r\n    this.navigationShortcuts.set('Ctrl+L', () => this.nextLink());\r\n    this.navigationShortcuts.set('Ctrl+T', () => this.nextHeading());\r\n    \r\n    // Comenzi utilitare\r\n    this.navigationShortcuts.set('Ctrl+M', () => this.readCurrentPage());\r\n    this.navigationShortcuts.set('Ctrl+N', () => this.readNavigationInfo());\r\n    this.navigationShortcuts.set('Ctrl+Shift+S', () => this.adjustSpeed());\r\n    this.navigationShortcuts.set('Ctrl+Shift+L', () => this.listAllElements());\r\n    \r\n    // Comenzi pentru modul TASTARE (când suntem în input)\r\n    this.typingShortcuts = new Map();\r\n    \r\n    // Ctrl+Enter pentru a ieși din modul editare\r\n    this.typingShortcuts.set('Ctrl+Enter', () => this.exitTypingMode());\r\n    \r\n    // Ctrl+L pentru a citi linia curentă\r\n    this.typingShortcuts.set('Ctrl+L', () => this.readCurrentLine());\r\n    \r\n    // Ctrl+W pentru a citi ultimul cuvânt\r\n    this.typingShortcuts.set('Ctrl+W', () => this.readLastWord());\r\n    \r\n    // Ctrl+Shift+L pentru a citi tot textul\r\n    this.typingShortcuts.set('Ctrl+Shift+L', () => this.readAllText());\r\n    \r\n    // Pentru editor de cod\r\n    this.typingShortcuts.set('Ctrl+Shift+E', () => this.executeCode());\r\n    this.typingShortcuts.set('Ctrl+Shift+F', () => this.getFeedback());\r\n  }\r\n\r\n  handleNavigationMode(e) {\r\n    const key = this.getShortcutKey(e);\r\n    const handler = this.navigationShortcuts.get(key);\r\n    \r\n    if (handler) {\r\n      e.preventDefault();\r\n      handler();\r\n    }\r\n  }\r\n\r\n  handleTypingMode(e) {\r\n    const key = this.getShortcutKey(e);\r\n    const handler = this.typingShortcuts.get(key);\r\n    \r\n    if (handler) {\r\n      e.preventDefault();\r\n      handler();\r\n      return;\r\n    }\r\n\r\n    // Pentru navigare în editor cu săgeți\r\n    if (e.target.classList.contains('monaco-editor') || \r\n        e.target.closest('.monaco-editor')) {\r\n      this.handleCodeNavigation(e);\r\n    }\r\n  }\r\n\r\n  handleTextInput(e) {\r\n    const target = e.target;\r\n    const value = target.value;\r\n    const cursorPosition = target.selectionStart;\r\n    \r\n    // Determinăm ce a fost tastat\r\n    const currentChar = value.charAt(cursorPosition - 1);\r\n    \r\n    // Adăugăm la buffer pentru citire\r\n    this.typingBuffer += currentChar;\r\n    this.lastTypedTime = Date.now();\r\n    \r\n    // Citim caracterul imediat\r\n    if (currentChar && currentChar !== ' ') {\r\n      this.speak(this.getCharacterName(currentChar), 'normal');\r\n    } else if (currentChar === ' ') {\r\n      // La spațiu, citim ultimul cuvânt\r\n      this.readLastWordFromBuffer();\r\n    }\r\n    \r\n    // Resetăm buffer-ul după o pauză\r\n    setTimeout(() => {\r\n      if (Date.now() - this.lastTypedTime > 1000) {\r\n        this.typingBuffer = '';\r\n      }\r\n    }, 1000);\r\n  }\r\n\r\n  handleCodeNavigation(e) {\r\n    // Pentru editor Monaco, tratăm special săgețile sus/jos\r\n    if (e.key === 'ArrowUp' || e.key === 'ArrowDown') {\r\n      // Așteaptă puțin pentru ca editorul să își actualizeze poziția\r\n      setTimeout(() => {\r\n        this.readCurrentCodeLine();\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  getCharacterName(char) {\r\n    // Caractere speciale\r\n    const specialChars = {\r\n      ' ': 'spațiu',\r\n      '.': 'punct',\r\n      ',': 'virgulă',\r\n      ';': 'punct și virgulă',\r\n      ':': 'două puncte',\r\n      '!': 'semnul exclamării',\r\n      '?': 'semnul întrebării',\r\n      '\"': 'ghilimele',\r\n      \"'\": 'apostrof',\r\n      '(': 'paranteză deschisă',\r\n      ')': 'paranteză închisă',\r\n      '[': 'paranteză pătrată deschisă',\r\n      ']': 'paranteză pătrată închisă',\r\n      '{': 'acoladă deschisă',\r\n      '}': 'acoladă închisă',\r\n      '+': 'plus',\r\n      '-': 'minus',\r\n      '*': 'asterisc',\r\n      '/': 'slash',\r\n      '\\\\': 'backslash',\r\n      '=': 'egal',\r\n      '<': 'mai mic',\r\n      '>': 'mai mare',\r\n      '@': 'arond',\r\n      '#': 'diez',\r\n      '$': 'dolar',\r\n      '%': 'procent',\r\n      '^': 'circumflex',\r\n      '&': 'ampersand',\r\n      '_': 'underscore',\r\n      '|': 'bară verticală',\r\n      '~': 'tildă',\r\n      '`': 'accent grav',\r\n      '\\n': 'linie nouă',\r\n      '\\t': 'tab'\r\n    };\r\n    \r\n    // Pentru cifre\r\n    if (/\\d/.test(char)) {\r\n      return `cifra ${char}`;\r\n    }\r\n    \r\n    // Pentru litere mari\r\n    if (/[A-Z]/.test(char)) {\r\n      return `${char} mare`;\r\n    }\r\n    \r\n    return specialChars[char] || char;\r\n  }\r\n\r\n  readLastWordFromBuffer() {\r\n    const words = this.typingBuffer.trim().split(/\\s+/);\r\n    const lastWord = words[words.length - 1];\r\n    \r\n    if (lastWord && lastWord.length > 0) {\r\n      this.speak(lastWord, 'normal');\r\n    }\r\n  }\r\n\r\n  readCurrentLine() {\r\n    const activeElement = document.activeElement;\r\n    \r\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\r\n      const value = activeElement.value;\r\n      const cursorPosition = activeElement.selectionStart;\r\n      \r\n      // Găsim începutul și sfârșitul liniei curente\r\n      let lineStart = value.lastIndexOf('\\n', cursorPosition - 1) + 1;\r\n      let lineEnd = value.indexOf('\\n', cursorPosition);\r\n      if (lineEnd === -1) lineEnd = value.length;\r\n      \r\n      const currentLine = value.substring(lineStart, lineEnd);\r\n      \r\n      if (currentLine.trim()) {\r\n        this.speak(`Linia curentă: ${currentLine}`, 'high');\r\n      } else {\r\n        this.speak('Linie goală', 'high');\r\n      }\r\n    }\r\n  }\r\n\r\n  readCurrentCodeLine() {\r\n    // Pentru Monaco Editor\r\n    const monacoEditor = document.querySelector('.monaco-editor');\r\n    if (monacoEditor) {\r\n      // Găsim linia activă în Monaco\r\n      const activeLine = monacoEditor.querySelector('.active-line');\r\n      if (activeLine) {\r\n        const lineContent = activeLine.textContent.trim();\r\n        const lineNumber = this.getMonacoLineNumber();\r\n        \r\n        if (lineContent) {\r\n          this.speak(`Linia ${lineNumber}: ${lineContent}`, 'high');\r\n        } else {\r\n          this.speak(`Linia ${lineNumber}: goală`, 'high');\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getMonacoLineNumber() {\r\n    // Găsim numărul liniei din Monaco\r\n    const lineNumbers = document.querySelector('.margin-view-overlays');\r\n    if (lineNumbers) {\r\n      const activeLineNumber = lineNumbers.querySelector('.active-line-number');\r\n      if (activeLineNumber) {\r\n        return activeLineNumber.textContent.trim();\r\n      }\r\n    }\r\n    return '1';\r\n  }\r\n\r\n  readLastWord() {\r\n    const activeElement = document.activeElement;\r\n    \r\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\r\n      const value = activeElement.value;\r\n      const cursorPosition = activeElement.selectionStart;\r\n      \r\n      // Găsim ultimul cuvânt înainte de cursor\r\n      const textBeforeCursor = value.substring(0, cursorPosition);\r\n      const words = textBeforeCursor.trim().split(/\\s+/);\r\n      const lastWord = words[words.length - 1];\r\n      \r\n      if (lastWord) {\r\n        this.speak(`Ultimul cuvânt: ${lastWord}`, 'high');\r\n      } else {\r\n        this.speak('Niciun cuvânt', 'high');\r\n      }\r\n    }\r\n  }\r\n\r\n  readAllText() {\r\n    const activeElement = document.activeElement;\r\n    \r\n    if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') {\r\n      const value = activeElement.value;\r\n      \r\n      if (value.trim()) {\r\n        this.speak(`Textul complet: ${value}`, 'high');\r\n      } else {\r\n        this.speak('Câmpul este gol', 'high');\r\n      }\r\n    }\r\n  }\r\n\r\n  exitTypingMode() {\r\n    const activeElement = document.activeElement;\r\n    \r\n    if (activeElement) {\r\n      activeElement.blur();\r\n      this.speak('Mod editare dezactivat. Navigare reactivată', 'high');\r\n      \r\n      // Re-focusăm elementul pentru navigare\r\n      setTimeout(() => {\r\n        this.setFocus(activeElement);\r\n      }, 100);\r\n    }\r\n  }\r\n\r\n  toggleAccessibilityMode() {\r\n    this.isAccessibilityMode = !this.isAccessibilityMode;\r\n    \r\n    if (this.isAccessibilityMode) {\r\n      this.speak(\"Modul pentru nevăzători activat. Bine ai venit în JavaVerse!\", 'high');\r\n      this.addAccessibilityStyles();\r\n      this.updateFocusableElements();\r\n      \r\n      setTimeout(() => {\r\n        this.readWelcomeMessage();\r\n      }, 2000);\r\n    } else {\r\n      this.speak(\"Modul pentru nevăzători dezactivat.\");\r\n      this.removeAccessibilityStyles();\r\n      this.stopReading();\r\n    }\r\n    \r\n    document.dispatchEvent(new CustomEvent('accessibilityModeChanged', {\r\n      detail: { isActive: this.isAccessibilityMode }\r\n    }));\r\n  }\r\n\r\n  readWelcomeMessage() {\r\n    const welcomeText = `\r\n      Bine ai venit în modul pentru nevăzători JavaVerse!\r\n      \r\n      Comenzi principale:\r\n      - Tab și Shift Tab pentru navigare între elemente\r\n      - Enter pentru a activa elementul selectat\r\n      - Escape pentru a opri citirea\r\n      \r\n      Navigare rapidă:\r\n      - F1 pentru ajutor\r\n      - F2, F3, F4 pentru header, conținut principal, footer\r\n      - Control Shift C pentru cursuri\r\n      - Control Shift P pentru playground\r\n      - Control Shift R pentru profil\r\n      - Control Shift H pentru pagina principală\r\n      \r\n      Navigare prin elemente:\r\n      - Control B pentru următorul buton\r\n      - Control L pentru următorul link\r\n      - Control T pentru următorul titlu\r\n      \r\n      În câmpuri de text:\r\n      - Caracterele sunt citite în timp ce tastezi\r\n      - Spațiu citește ultimul cuvânt\r\n      - Control L pentru a citi linia curentă\r\n      - Control W pentru ultimul cuvânt\r\n      - Control Shift L pentru tot textul\r\n      - Control Enter pentru a ieși din editare\r\n      \r\n      În editor de cod:\r\n      - Săgețile sus și jos citesc automat linia curentă\r\n      - Control Shift E pentru execuție\r\n      - Control Shift F pentru feedback AI\r\n      \r\n      Apasă F1 oricând pentru ajutor contextual.\r\n    `;\r\n    \r\n    this.speak(welcomeText, 'high');\r\n  }\r\n\r\n  updateFocusableElements() {\r\n    const selectors = [\r\n      'a[href]:not([disabled])',\r\n      'button:not([disabled])',\r\n      'input:not([disabled]):not([type=\"hidden\"])',\r\n      'select:not([disabled])',\r\n      'textarea:not([disabled])',\r\n      '[tabindex]:not([tabindex=\"-1\"])',\r\n      '.course-card',\r\n      '.question-container li',\r\n      '.feature-card',\r\n      '.example-card',\r\n      'h1', 'h2', 'h3', 'h4', 'h5', 'h6',\r\n      '[role=\"button\"]:not([disabled])',\r\n      '[role=\"link\"]',\r\n      '[role=\"navigation\"]',\r\n      '[role=\"main\"]'\r\n    ];\r\n    \r\n    this.focusableElements = Array.from(document.querySelectorAll(selectors.join(', ')))\r\n      .filter(el => {\r\n        // Verificăm dacă elementul este vizibil\r\n        const rect = el.getBoundingClientRect();\r\n        return rect.width > 0 && rect.height > 0 && el.offsetParent !== null;\r\n      })\r\n      .sort((a, b) => {\r\n        // Sortăm elementele după poziția lor în pagină\r\n        const rectA = a.getBoundingClientRect();\r\n        const rectB = b.getBoundingClientRect();\r\n        \r\n        if (Math.abs(rectA.top - rectB.top) < 10) {\r\n          return rectA.left - rectB.left;\r\n        }\r\n        return rectA.top - rectB.top;\r\n      });\r\n  }\r\n\r\n  navigateNext() {\r\n    this.updateFocusableElements();\r\n    \r\n    if (this.focusableElements.length === 0) {\r\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\r\n      return;\r\n    }\r\n    \r\n    this.currentFocusIndex = (this.currentFocusIndex + 1) % this.focusableElements.length;\r\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\r\n  }\r\n\r\n  navigatePrevious() {\r\n    this.updateFocusableElements();\r\n    \r\n    if (this.focusableElements.length === 0) {\r\n      this.speak(\"Nu sunt elemente disponibile pentru navigare\", 'high');\r\n      return;\r\n    }\r\n    \r\n    this.currentFocusIndex = this.currentFocusIndex === 0 \r\n      ? this.focusableElements.length - 1 \r\n      : this.currentFocusIndex - 1;\r\n      \r\n    this.setFocus(this.focusableElements[this.currentFocusIndex]);\r\n  }\r\n\r\n  setFocus(element) {\r\n    if (!element) return;\r\n    \r\n    // Eliminăm focus-ul anterior\r\n    document.querySelectorAll('.accessibility-focus').forEach(el => {\r\n      el.classList.remove('accessibility-focus');\r\n    });\r\n    \r\n    // Setăm noul focus\r\n    this.focusedElement = element;\r\n    element.classList.add('accessibility-focus');\r\n    \r\n    // Scroll smooth în vedere\r\n    element.scrollIntoView({ \r\n      behavior: 'smooth', \r\n      block: 'center',\r\n      inline: 'nearest'\r\n    });\r\n    \r\n    // Focus real pentru inputuri\r\n    if (['INPUT', 'TEXTAREA', 'SELECT'].includes(element.tagName)) {\r\n      element.focus();\r\n    }\r\n    \r\n    // Citim informații despre element\r\n    this.readElementInfo(element);\r\n  }\r\n\r\n  readElementInfo(element) {\r\n    let description = '';\r\n    const tagName = element.tagName.toLowerCase();\r\n    const ariaLabel = element.getAttribute('aria-label');\r\n    const text = element.textContent?.trim();\r\n    \r\n    // Prioritizăm aria-label\r\n    if (ariaLabel) {\r\n      description = ariaLabel;\r\n    } else {\r\n      // Descrieri specifice pentru fiecare tip de element\r\n      switch (tagName) {\r\n        case 'button':\r\n          description = `Buton: ${text || 'Fără text'}`;\r\n          break;\r\n          \r\n        case 'a':\r\n          description = `Link: ${text || 'Fără text'}`;\r\n          break;\r\n          \r\n        case 'input':\r\n          const inputType = element.type;\r\n          const inputLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          const inputValue = element.value;\r\n          \r\n          if (inputType === 'text' || inputType === 'email' || inputType === 'password') {\r\n            description = `Câmp ${inputType}: ${inputLabel || element.placeholder || 'Fără etichetă'}`;\r\n            if (inputValue) {\r\n              description += `. Valoare curentă: ${inputType === 'password' ? 'parolă introdusă' : inputValue}`;\r\n            }\r\n          } else if (inputType === 'radio' || inputType === 'checkbox') {\r\n            description = `${inputType === 'radio' ? 'Opțiune' : 'Bifă'}: ${inputLabel || text}. ${element.checked ? 'Selectat' : 'Neselectat'}`;\r\n          }\r\n          break;\r\n          \r\n        case 'select':\r\n          const selectLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          const selectedOption = element.options[element.selectedIndex]?.text;\r\n          description = `Listă derulantă: ${selectLabel || 'Fără etichetă'}. Selectat: ${selectedOption || 'Nimic'}`;\r\n          break;\r\n          \r\n        case 'textarea':\r\n          const textareaLabel = document.querySelector(`label[for=\"${element.id}\"]`)?.textContent;\r\n          description = `Zonă de text: ${textareaLabel || element.placeholder || 'Fără etichetă'}`;\r\n          if (element.value) {\r\n            description += `. ${element.value.length} caractere introduse`;\r\n          }\r\n          break;\r\n          \r\n        case 'h1':\r\n        case 'h2':\r\n        case 'h3':\r\n        case 'h4':\r\n        case 'h5':\r\n        case 'h6':\r\n          const level = tagName.charAt(1);\r\n          description = `Titlu nivel ${level}: ${text}`;\r\n          break;\r\n          \r\n        default:\r\n          // Pentru elemente custom (carduri, etc.)\r\n          if (element.classList.contains('course-card')) {\r\n            const title = element.querySelector('.course-title')?.textContent;\r\n            const desc = element.querySelector('.course-description')?.textContent;\r\n            description = `Curs: ${title}. ${desc}`;\r\n          } else if (element.classList.contains('feature-card')) {\r\n            const title = element.querySelector('h3')?.textContent;\r\n            const desc = element.querySelector('p')?.textContent;\r\n            description = `Caracteristică: ${title}. ${desc}`;\r\n          } else if (element.classList.contains('example-card')) {\r\n            const title = element.querySelector('.card-title')?.textContent || text;\r\n            description = `Exemplu de cod: ${title}`;\r\n          } else {\r\n            description = text || `Element ${tagName}`;\r\n          }\r\n      }\r\n    }\r\n    \r\n    // Adăugăm indicații pentru interacțiune\r\n    if (['button', 'a'].includes(tagName) || element.getAttribute('role') === 'button') {\r\n      description += \". Apasă Enter pentru a activa\";\r\n    } else if (['input', 'textarea', 'select'].includes(tagName)) {\r\n      description += \". Apasă Enter pentru a edita\";\r\n    }\r\n    \r\n    this.speak(description, 'high');\r\n  }\r\n\r\n  activateElement() {\r\n    if (!this.focusedElement) {\r\n      this.speak(\"Niciun element selectat\", 'high');\r\n      return;\r\n    }\r\n    \r\n    const tagName = this.focusedElement.tagName.toLowerCase();\r\n    \r\n    // Pentru inputuri, permitem editarea\r\n    if (['input', 'textarea', 'select'].includes(tagName)) {\r\n      this.focusedElement.focus();\r\n      this.speak(`Mod editare activat. Control L pentru linia curentă, Control Enter pentru ieșire`, 'high');\r\n      return;\r\n    }\r\n    \r\n    // Pentru alte elemente, simulăm click\r\n    this.speak(\"Activez elementul\", 'normal');\r\n    \r\n    if (this.focusedElement.click) {\r\n      this.focusedElement.click();\r\n    } else if (tagName === 'a') {\r\n      window.location.href = this.focusedElement.href;\r\n    }\r\n  }\r\n\r\n  // Navigare rapidă la secțiuni\r\n  navigateToSection(sectionName) {\r\n    let selector;\r\n    let announcement;\r\n    \r\n    switch (sectionName) {\r\n      case 'header':\r\n        selector = 'header, [role=\"banner\"], .jv-header';\r\n        announcement = \"Navighez la header\";\r\n        break;\r\n      case 'main':\r\n        selector = 'main, [role=\"main\"], .body-content';\r\n        announcement = \"Navighez la conținutul principal\";\r\n        break;\r\n      case 'footer':\r\n        selector = 'footer, [role=\"contentinfo\"], .jv-footer';\r\n        announcement = \"Navighez la footer\";\r\n        break;\r\n    }\r\n    \r\n    const section = document.querySelector(selector);\r\n    if (section) {\r\n      this.speak(announcement, 'high');\r\n      \r\n      // Găsim primul element focusabil din secțiune\r\n      const firstFocusable = section.querySelector(\r\n        'a, button, input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\r\n      );\r\n      \r\n      if (firstFocusable) {\r\n        const index = this.focusableElements.indexOf(firstFocusable);\r\n        if (index !== -1) {\r\n          this.currentFocusIndex = index;\r\n          this.setFocus(firstFocusable);\r\n        }\r\n      } else {\r\n        section.scrollIntoView({ behavior: 'smooth', block: 'start' });\r\n        this.speak(\"Secțiune fără elemente interactive\", 'normal');\r\n      }\r\n    } else {\r\n      this.speak(\"Secțiunea nu a fost găsită\", 'high');\r\n    }\r\n  }\r\n\r\n  // Navigare prin tipuri de elemente\r\n  nextButton() {\r\n    this.navigateToNextOfType('button, [role=\"button\"]', 'buton');\r\n  }\r\n\r\n  nextLink() {\r\n    this.navigateToNextOfType('a[href]', 'link');\r\n  }\r\n\r\n  nextInput() {\r\n    this.navigateToNextOfType('input, textarea, select', 'câmp de input');\r\n  }\r\n\r\n  nextHeading() {\r\n    this.navigateToNextOfType('h1, h2, h3, h4, h5, h6', 'titlu');\r\n  }\r\n\r\n  navigateToNextOfType(selector, typeName) {\r\n    const elements = Array.from(document.querySelectorAll(selector))\r\n      .filter(el => el.offsetParent !== null);\r\n    \r\n    if (elements.length === 0) {\r\n      this.speak(`Nu există ${typeName} pe această pagină`, 'high');\r\n      return;\r\n    }\r\n    \r\n    let nextIndex = -1;\r\n    \r\n    if (this.focusedElement) {\r\n      const currentTypeIndex = elements.indexOf(this.focusedElement);\r\n      if (currentTypeIndex !== -1) {\r\n        nextIndex = (currentTypeIndex + 1) % elements.length;\r\n      } else {\r\n        // Găsim următorul element de acest tip după elementul curent\r\n        const currentRect = this.focusedElement.getBoundingClientRect();\r\n        for (let i = 0; i < elements.length; i++) {\r\n          const rect = elements[i].getBoundingClientRect();\r\n          if (rect.top > currentRect.top || \r\n              (Math.abs(rect.top - currentRect.top) < 10 && rect.left > currentRect.left)) {\r\n            nextIndex = i;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    if (nextIndex === -1) {\r\n      nextIndex = 0;\r\n    }\r\n    \r\n    const targetElement = elements[nextIndex];\r\n    const globalIndex = this.focusableElements.indexOf(targetElement);\r\n    \r\n    if (globalIndex !== -1) {\r\n      this.currentFocusIndex = globalIndex;\r\n      this.setFocus(targetElement);\r\n    }\r\n  }\r\n\r\n  // Ajustare viteză citire\r\n  adjustSpeed() {\r\n    const speeds = [0.7, 0.85, 1.0, 1.15, 1.3];\r\n    const currentIndex = speeds.indexOf(this.readingSpeed);\r\n    const nextIndex = (currentIndex + 1) % speeds.length;\r\n    \r\n    this.readingSpeed = speeds[nextIndex];\r\n    this.speak(`Viteză de citire: ${Math.round(this.readingSpeed * 100)}%`, 'high');\r\n  }\r\n\r\n  // Metodă pentru speak\r\n  speak(text, priority = 'normal') {\r\n    if (!text || text.trim() === '') return;\r\n\r\n    if (priority === 'high') {\r\n      this.stopReading();\r\n    }\r\n\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    if (this.voice) {\r\n      utterance.voice = this.voice;\r\n    }\r\n    \r\n    utterance.rate = this.readingSpeed;\r\n    utterance.pitch = 1.0;\r\n    utterance.volume = 1.0;\r\n\r\n    utterance.onstart = () => {\r\n      this.isReading = true;\r\n      this.currentUtterance = utterance;\r\n      \r\n      // Trimitem event pentru UI\r\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n        detail: { isSpeaking: true }\r\n      }));\r\n    };\r\n\r\n    utterance.onend = () => {\r\n      this.isReading = false;\r\n      this.currentUtterance = null;\r\n      this.processQueue();\r\n      \r\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n        detail: { isSpeaking: false }\r\n      }));\r\n    };\r\n\r\n    utterance.onerror = (e) => {\r\n      console.error('Speech synthesis error:', e);\r\n      this.isReading = false;\r\n      this.currentUtterance = null;\r\n    };\r\n\r\n    if (this.isReading && priority !== 'high') {\r\n      this.readingQueue.push(utterance);\r\n    } else {\r\n      this.speechSynthesis.speak(utterance);\r\n    }\r\n  }\r\n\r\n// Adaugă aceste metode în clasa AccessibilityManager (în src/utils/AccessibilityManager.js)\r\n\r\nstopReading() {\r\n  if (this.speechSynthesis.speaking) {\r\n    this.speechSynthesis.cancel();\r\n  }\r\n  \r\n  this.isReading = false;\r\n  this.currentUtterance = null;\r\n  this.readingQueue = [];\r\n  \r\n  // Trimitem event pentru UI\r\n  document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n    detail: { isSpeaking: false }\r\n  }));\r\n}\r\n\r\nprocessQueue() {\r\n  if (this.readingQueue.length > 0 && !this.isReading) {\r\n    const nextUtterance = this.readingQueue.shift();\r\n    this.speechSynthesis.speak(nextUtterance);\r\n  }\r\n}\r\n\r\ntoggleReading() {\r\n  if (this.isReading && this.currentUtterance) {\r\n    if (this.speechSynthesis.paused) {\r\n      this.speechSynthesis.resume();\r\n      this.speak(\"Reluare citire\", 'normal');\r\n    } else {\r\n      this.speechSynthesis.pause();\r\n      this.speak(\"Pauză citire\", 'normal');\r\n    }\r\n  } else {\r\n    this.readCurrentPage();\r\n  }\r\n}\r\n\r\nreadCurrentPage() {\r\n  const pageContent = this.extractPageContent();\r\n  if (pageContent) {\r\n    this.speak(pageContent, 'high');\r\n  } else {\r\n    this.speak(\"Nu există conținut de citit pe această pagină\", 'high');\r\n  }\r\n}\r\n\r\nextractPageContent() {\r\n  let content = '';\r\n  \r\n  // Extragem titlul paginii\r\n  const title = document.querySelector('h1');\r\n  if (title) {\r\n    content += `Titlu: ${title.textContent.trim()}. `;\r\n  }\r\n  \r\n  // Extragem descrierea sau subtitlul\r\n  const description = document.querySelector('.page-description, .course-detail-description, .code-playground-description');\r\n  if (description) {\r\n    content += `${description.textContent.trim()}. `;\r\n  }\r\n  \r\n  // Extragem conținutul principal\r\n  const mainContent = document.querySelector('main, .body-content, .course-detail-content');\r\n  if (mainContent) {\r\n    // Extragem doar textul relevant, ignorând butoanele și alte elemente interactive\r\n    const paragraphs = mainContent.querySelectorAll('p, h2, h3, h4, li');\r\n    paragraphs.forEach(p => {\r\n      const text = p.textContent.trim();\r\n      if (text && text.length > 0) {\r\n        content += `${text}. `;\r\n      }\r\n    });\r\n  }\r\n  \r\n  // Dacă suntem pe o pagină de curs, citim și lecțiile\r\n  const lessons = document.querySelectorAll('.course-preview-item, .lesson-title');\r\n  if (lessons.length > 0) {\r\n    content += 'Lecții disponibile: ';\r\n    lessons.forEach((lesson, index) => {\r\n      content += `${index + 1}. ${lesson.textContent.trim()}. `;\r\n    });\r\n  }\r\n  \r\n  // Dacă suntem pe o pagină de test, citim întrebarea curentă\r\n  const currentQuestion = document.querySelector('.question-container h3');\r\n  if (currentQuestion) {\r\n    content += `Întrebare: ${currentQuestion.textContent.trim()}. `;\r\n    \r\n    const options = document.querySelectorAll('.question-container li label');\r\n    if (options.length > 0) {\r\n      content += 'Opțiuni: ';\r\n      options.forEach((option, index) => {\r\n        content += `${index + 1}. ${option.textContent.trim()}. `;\r\n      });\r\n    }\r\n  }\r\n  \r\n  return content.trim();\r\n}\r\n\r\n// Adaugă și această metodă pentru anunțuri\r\nannounce(message, priority = 'normal') {\r\n  this.speak(message, priority);\r\n}\r\n\r\n// Adaugă getter pentru proprietatea isSpeaking\r\nget isSpeaking() {\r\n  return this.isReading || this.speechSynthesis.speaking;\r\n}\r\n\r\n// Adaugă getter pentru proprietatea isActive\r\nget isActive() {\r\n  return this.isAccessibilityMode;\r\n}\r\n\r\n// Metodă pentru citirea întrebărilor de quiz\r\nreadQuizQuestion(question, options) {\r\n  let text = `Întrebare: ${question}. `;\r\n  if (options && options.length > 0) {\r\n    text += 'Variantele de răspuns sunt: ';\r\n    options.forEach((option, index) => {\r\n      text += `${index + 1}: ${option}. `;\r\n    });\r\n  }\r\n  this.speak(text, 'high');\r\n}\r\n\r\n// Metodă pentru anunțarea rezultatului quiz-ului\r\nannounceQuizResult(score, totalQuestions) {\r\n  const percentage = Math.round((score / totalQuestions) * 100);\r\n  const text = `Test finalizat! Ai răspuns corect la ${score} din ${totalQuestions} întrebări. ` +\r\n               `Scorul tău este ${percentage}%. ` +\r\n               (percentage >= 80 ? 'Felicitări! Rezultat excelent!' : \r\n                percentage >= 60 ? 'Rezultat bun! Continuă să înveți.' : \r\n                'Nu te descuraja! Încearcă din nou pentru un rezultat mai bun.');\r\n  this.speak(text, 'high');\r\n}\r\n\r\n// Metodă pentru citirea liniilor de cod\r\nreadCodeLine(lineNumber) {\r\n  const editor = document.querySelector('.monaco-editor');\r\n  if (editor) {\r\n    // Implementare simplificată - în practică ar trebui să accesăm API-ul Monaco\r\n    this.speak(`Linia ${lineNumber} din editor`, 'normal');\r\n  }\r\n}\r\n\r\n// Metodă pentru anunțarea schimbărilor în cod\r\nannounceCodeChange(newCode, position) {\r\n  if (position && position.line) {\r\n    this.speak(`Cod modificat la linia ${position.line}`, 'normal');\r\n  }\r\n}\r\n\r\n}\r\n\r\n// Exportăm o instanță singleton\r\nconst accessibilityManager = new AccessibilityManager();\r\nexport default accessibilityManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}