{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\CodePlayground.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport CodeEditor from './CodeEditor';\nimport Card from './Card';\nimport Button from './Button';\nimport '../styles/CodePlayground.css';\n\n/**\r\n * Componenta CodePlayground reprezintă un spațiu dedicat pentru experimentarea cu cod Java\r\n * Independent de cursuri, permite utilizatorilor să încerce diverse exemple predefinite\r\n * sau să scrie și să ruleze propriul cod\r\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CodePlayground() {\n  _s();\n  // Exemplele predefinite disponibile pentru utilizatori\n  const predefinedExamples = [{\n    id: 'hello-world',\n    name: 'Hello World',\n    code: `public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello, JavaVerse!\");\n    }\n}`\n  }, {\n    id: 'variables',\n    name: 'Variabile și Tipuri de Date',\n    code: `public class Variables {\n    public static void main(String[] args) {\n        // Declararea variabilelor de tip primitiv\n        int number = 42;\n        double pi = 3.14159;\n        char letter = 'A';\n        boolean isJavaFun = true;\n        \n        // Afișarea valorilor\n        System.out.println(\"Numărul: \" + number);\n        System.out.println(\"PI: \" + pi);\n        System.out.println(\"Litera: \" + letter);\n        System.out.println(\"Java este distractiv? \" + isJavaFun);\n        \n        // Declararea unui String (tip referință)\n        String message = \"Învățarea Java este fascinantă!\";\n        System.out.println(message);\n    }\n}`\n  }, {\n    id: 'loops',\n    name: 'Bucle',\n    code: `public class Loops {\n    public static void main(String[] args) {\n        // Bucla for - numără de la 1 la 5\n        System.out.println(\"Exemplu de buclă for:\");\n        for (int i = 1; i <= 5; i++) {\n            System.out.println(\"Numărul: \" + i);\n        }\n        \n        // Bucla while - numără de la 5 la 1\n        System.out.println(\"\\\\nExemplu de buclă while:\");\n        int count = 5;\n        while (count > 0) {\n            System.out.println(\"Numărătoare inversă: \" + count);\n            count--;\n        }\n        \n        // Bucla do-while - se execută cel puțin o dată\n        System.out.println(\"\\\\nExemplu de buclă do-while:\");\n        int x = 1;\n        do {\n            System.out.println(\"Valoarea lui x: \" + x);\n            x++;\n        } while (x <= 3);\n    }\n}`\n  }, {\n    id: 'conditionals',\n    name: 'Instrucțiuni Condiționale',\n    code: `public class Conditionals {\n    public static void main(String[] args) {\n        int time = 15;\n        \n        // Instrucțiune if-else\n        System.out.println(\"Exemplu if-else:\");\n        if (time < 12) {\n            System.out.println(\"Bună dimineața!\");\n        } else if (time < 18) {\n            System.out.println(\"Bună ziua!\");\n        } else {\n            System.out.println(\"Bună seara!\");\n        }\n        \n        // Instrucțiune switch\n        System.out.println(\"\\\\nExemplu switch:\");\n        int day = 4;\n        switch (day) {\n            case 1:\n                System.out.println(\"Luni\");\n                break;\n            case 2:\n                System.out.println(\"Marți\");\n                break;\n            case 3:\n                System.out.println(\"Miercuri\");\n                break;\n            case 4:\n                System.out.println(\"Joi\");\n                break;\n            case 5:\n                System.out.println(\"Vineri\");\n                break;\n            case 6:\n            case 7:\n                System.out.println(\"Weekend\");\n                break;\n            default:\n                System.out.println(\"Zi invalidă\");\n        }\n        \n        // Operatorul ternar\n        System.out.println(\"\\\\nExemplu operator ternar:\");\n        String status = (time < 18) ? \"Zi\" : \"Seară\";\n        System.out.println(\"Este \" + status + \" acum.\");\n    }\n}`\n  }, {\n    id: 'arrays',\n    name: 'Tablouri',\n    code: `public class Arrays {\n    public static void main(String[] args) {\n        // Declarare și inițializare de tablou\n        int[] numbers = {10, 20, 30, 40, 50};\n        \n        // Parcurgere cu index\n        System.out.println(\"Parcurgere cu index:\");\n        for (int i = 0; i < numbers.length; i++) {\n            System.out.println(\"numbers[\" + i + \"] = \" + numbers[i]);\n        }\n        \n        // Parcurgere for-each\n        System.out.println(\"\\\\nParcurgere for-each:\");\n        for (int number : numbers) {\n            System.out.println(\"Valoare: \" + number);\n        }\n        \n        // Tablou bidimensional\n        System.out.println(\"\\\\nTablou bidimensional:\");\n        int[][] matrix = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n        \n        for (int i = 0; i < matrix.length; i++) {\n            for (int j = 0; j < matrix[i].length; j++) {\n                System.out.print(matrix[i][j] + \" \");\n            }\n            System.out.println();\n        }\n    }\n}`\n  }, {\n    id: 'methods',\n    name: 'Metode',\n    code: `public class Methods {\n    public static void main(String[] args) {\n        // Apel de metodă fără parametri\n        sayHello();\n        \n        // Apel de metodă cu parametri\n        int sum = add(5, 3);\n        System.out.println(\"Suma: \" + sum);\n        \n        // Apel de metodă cu valoare de retur\n        String message = createMessage(\"Java\");\n        System.out.println(message);\n        \n        // Metodă cu parametri variabili\n        int total = addNumbers(1, 2, 3, 4, 5);\n        System.out.println(\"Total: \" + total);\n    }\n    \n    // Metodă simplă fără valoare de retur\n    public static void sayHello() {\n        System.out.println(\"Salut din metodă!\");\n    }\n    \n    // Metodă cu parametri și valoare de retur\n    public static int add(int a, int b) {\n        return a + b;\n    }\n    \n    // Metodă cu valoare de retur String\n    public static String createMessage(String language) {\n        return \"Învăț programare \" + language + \"!\";\n    }\n    \n    // Metodă cu număr variabil de parametri\n    public static int addNumbers(int... numbers) {\n        int sum = 0;\n        for (int num : numbers) {\n            sum += num;\n        }\n        return sum;\n    }\n}`\n  }, {\n    id: 'oop',\n    name: 'Programare Orientată pe Obiecte',\n    code: `// Definirea clasei\nclass Car {\n    // Atribute (variabile de instanță)\n    private String make;\n    private String model;\n    private int year;\n    \n    // Constructor\n    public Car(String make, String model, int year) {\n        this.make = make;\n        this.model = model;\n        this.year = year;\n    }\n    \n    // Metode getter\n    public String getMake() {\n        return make;\n    }\n    \n    public String getModel() {\n        return model;\n    }\n    \n    public int getYear() {\n        return year;\n    }\n    \n    // Metode setter\n    public void setYear(int year) {\n        if (year > 0) {\n            this.year = year;\n        }\n    }\n    \n    // Alte metode\n    public void displayInfo() {\n        System.out.println(\"Mașină: \" + year + \" \" + make + \" \" + model);\n    }\n    \n    // Metoda toString supraîncărcată\n    @Override\n    public String toString() {\n        return year + \" \" + make + \" \" + model;\n    }\n}\n\n// Clasa principală cu metoda main\npublic class OOPExample {\n    public static void main(String[] args) {\n        // Crearea obiectelor\n        Car car1 = new Car(\"Toyota\", \"Corolla\", 2020);\n        Car car2 = new Car(\"Honda\", \"Civic\", 2019);\n        \n        // Accesarea metodelor\n        car1.displayInfo();\n        car2.displayInfo();\n        \n        // Utilizarea getter-ilor\n        System.out.println(\"Car 1 make: \" + car1.getMake());\n        \n        // Utilizarea setter-ilor\n        car2.setYear(2022);\n        System.out.println(\"Car 2 updated year: \" + car2.getYear());\n        \n        // Utilizarea toString\n        System.out.println(\"Car 1: \" + car1);\n    }\n}`\n  }];\n  const [selectedExample, setSelectedExample] = useState(predefinedExamples[0]);\n  const [code, setCode] = useState(predefinedExamples[0].code);\n  const [showAllExamples, setShowAllExamples] = useState(false);\n  const [editorKey, setEditorKey] = useState(0); // Cheie pentru a forța re-randarea editorului\n\n  // Gestionar pentru schimbarea exemplului selectat\n  const handleExampleChange = example => {\n    setSelectedExample(example);\n    setCode(example.code);\n    // Forțăm re-randarea editorului pentru a ne asigura că se încarcă\n    setEditorKey(prev => prev + 1);\n  };\n\n  // Gestionar pentru resetarea codului la exemplu\n  const handleResetCode = () => {\n    setCode(selectedExample.code);\n    // Forțăm re-randarea editorului\n    setEditorKey(prev => prev + 1);\n  };\n\n  // Effect pentru a forța încărcarea inițială a editorului\n  useEffect(() => {\n    // Forțăm o re-randare după ce componenta s-a montat\n    const timer = setTimeout(() => {\n      setEditorKey(prev => prev + 1);\n    }, 100);\n    return () => clearTimeout(timer);\n  }, []); // Rulează doar la prima încărcare\n\n  // Filtru pentru exemplele afișate\n  const visibleExamples = showAllExamples ? predefinedExamples : predefinedExamples.slice(0, 3);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"code-playground-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"code-playground-title\",\n      children: \"Playground Java\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"code-playground-description\",\n      children: \"Experimenteaz\\u0103 cu Java \\xEEn editorul nostru interactiv. Alege unul dintre exemplele predefinite sau scrie propriul t\\u0103u cod pentru a \\xEEnv\\u0103\\u021Ba prin practic\\u0103.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playground-layout\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"examples-sidebar\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Exemple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"examples-list\",\n          children: [visibleExamples.map(example => /*#__PURE__*/_jsxDEV(Card, {\n            className: `example-card ${selectedExample.id === example.id ? 'selected' : ''}`,\n            variant: \"dark\",\n            title: example.name,\n            onClick: () => handleExampleChange(example),\n            hoverable: true\n          }, example.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this)), !showAllExamples && predefinedExamples.length > 3 && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setShowAllExamples(true),\n            className: \"show-more-btn\",\n            children: \"Arat\\u0103 toate exemplele\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 15\n          }, this), showAllExamples && /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: () => setShowAllExamples(false),\n            className: \"show-less-btn\",\n            children: \"Arat\\u0103 mai pu\\u021Bine\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 354,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"playground-tips\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Sfaturi\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 366,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Folose\\u0219te exemplele pentru a \\xEEnv\\u0103\\u021Ba sintaxa Java\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 368,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Experimenteaz\\u0103 prin modificarea codului\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 369,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Ruleaz\\u0103 codul pentru a vedea rezultatele imediat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 370,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n              children: \"Cere feedback AI pentru a \\xEEmbun\\u0103t\\u0103\\u021Bi codul\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 367,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"code-editor-area\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"editor-header-bar\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [\"Editor: \", selectedExample.name]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"secondary\",\n            size: \"small\",\n            onClick: handleResetCode,\n            icon: \"\\uD83D\\uDD04\",\n            iconPosition: \"left\",\n            children: \"Reset la exemplu\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 379,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 377,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CodeEditor, {\n          // Cheia forțează re-randarea când se schimbă\n          initialCode: code,\n          onChange: setCode\n        }, editorKey, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 320,\n    columnNumber: 5\n  }, this);\n}\n_s(CodePlayground, \"CtxTbEMe9HsTbulVrmd3Sikegpk=\");\n_c = CodePlayground;\nexport default CodePlayground;\nvar _c;\n$RefreshReg$(_c, \"CodePlayground\");","map":{"version":3,"names":["React","useState","useEffect","CodeEditor","Card","Button","jsxDEV","_jsxDEV","CodePlayground","_s","predefinedExamples","id","name","code","selectedExample","setSelectedExample","setCode","showAllExamples","setShowAllExamples","editorKey","setEditorKey","handleExampleChange","example","prev","handleResetCode","timer","setTimeout","clearTimeout","visibleExamples","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","variant","title","onClick","hoverable","length","size","icon","iconPosition","initialCode","onChange","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/CodePlayground.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport CodeEditor from './CodeEditor';\r\nimport Card from './Card';\r\nimport Button from './Button';\r\nimport '../styles/CodePlayground.css';\r\n\r\n/**\r\n * Componenta CodePlayground reprezintă un spațiu dedicat pentru experimentarea cu cod Java\r\n * Independent de cursuri, permite utilizatorilor să încerce diverse exemple predefinite\r\n * sau să scrie și să ruleze propriul cod\r\n */\r\nfunction CodePlayground() {\r\n  // Exemplele predefinite disponibile pentru utilizatori\r\n  const predefinedExamples = [\r\n    {\r\n      id: 'hello-world',\r\n      name: 'Hello World',\r\n      code: `public class HelloWorld {\r\n    public static void main(String[] args) {\r\n        System.out.println(\"Hello, JavaVerse!\");\r\n    }\r\n}`\r\n    },\r\n    {\r\n      id: 'variables',\r\n      name: 'Variabile și Tipuri de Date',\r\n      code: `public class Variables {\r\n    public static void main(String[] args) {\r\n        // Declararea variabilelor de tip primitiv\r\n        int number = 42;\r\n        double pi = 3.14159;\r\n        char letter = 'A';\r\n        boolean isJavaFun = true;\r\n        \r\n        // Afișarea valorilor\r\n        System.out.println(\"Numărul: \" + number);\r\n        System.out.println(\"PI: \" + pi);\r\n        System.out.println(\"Litera: \" + letter);\r\n        System.out.println(\"Java este distractiv? \" + isJavaFun);\r\n        \r\n        // Declararea unui String (tip referință)\r\n        String message = \"Învățarea Java este fascinantă!\";\r\n        System.out.println(message);\r\n    }\r\n}`\r\n    },\r\n    {\r\n      id: 'loops',\r\n      name: 'Bucle',\r\n      code: `public class Loops {\r\n    public static void main(String[] args) {\r\n        // Bucla for - numără de la 1 la 5\r\n        System.out.println(\"Exemplu de buclă for:\");\r\n        for (int i = 1; i <= 5; i++) {\r\n            System.out.println(\"Numărul: \" + i);\r\n        }\r\n        \r\n        // Bucla while - numără de la 5 la 1\r\n        System.out.println(\"\\\\nExemplu de buclă while:\");\r\n        int count = 5;\r\n        while (count > 0) {\r\n            System.out.println(\"Numărătoare inversă: \" + count);\r\n            count--;\r\n        }\r\n        \r\n        // Bucla do-while - se execută cel puțin o dată\r\n        System.out.println(\"\\\\nExemplu de buclă do-while:\");\r\n        int x = 1;\r\n        do {\r\n            System.out.println(\"Valoarea lui x: \" + x);\r\n            x++;\r\n        } while (x <= 3);\r\n    }\r\n}`\r\n    },\r\n    {\r\n      id: 'conditionals',\r\n      name: 'Instrucțiuni Condiționale',\r\n      code: `public class Conditionals {\r\n    public static void main(String[] args) {\r\n        int time = 15;\r\n        \r\n        // Instrucțiune if-else\r\n        System.out.println(\"Exemplu if-else:\");\r\n        if (time < 12) {\r\n            System.out.println(\"Bună dimineața!\");\r\n        } else if (time < 18) {\r\n            System.out.println(\"Bună ziua!\");\r\n        } else {\r\n            System.out.println(\"Bună seara!\");\r\n        }\r\n        \r\n        // Instrucțiune switch\r\n        System.out.println(\"\\\\nExemplu switch:\");\r\n        int day = 4;\r\n        switch (day) {\r\n            case 1:\r\n                System.out.println(\"Luni\");\r\n                break;\r\n            case 2:\r\n                System.out.println(\"Marți\");\r\n                break;\r\n            case 3:\r\n                System.out.println(\"Miercuri\");\r\n                break;\r\n            case 4:\r\n                System.out.println(\"Joi\");\r\n                break;\r\n            case 5:\r\n                System.out.println(\"Vineri\");\r\n                break;\r\n            case 6:\r\n            case 7:\r\n                System.out.println(\"Weekend\");\r\n                break;\r\n            default:\r\n                System.out.println(\"Zi invalidă\");\r\n        }\r\n        \r\n        // Operatorul ternar\r\n        System.out.println(\"\\\\nExemplu operator ternar:\");\r\n        String status = (time < 18) ? \"Zi\" : \"Seară\";\r\n        System.out.println(\"Este \" + status + \" acum.\");\r\n    }\r\n}`\r\n    },\r\n    {\r\n      id: 'arrays',\r\n      name: 'Tablouri',\r\n      code: `public class Arrays {\r\n    public static void main(String[] args) {\r\n        // Declarare și inițializare de tablou\r\n        int[] numbers = {10, 20, 30, 40, 50};\r\n        \r\n        // Parcurgere cu index\r\n        System.out.println(\"Parcurgere cu index:\");\r\n        for (int i = 0; i < numbers.length; i++) {\r\n            System.out.println(\"numbers[\" + i + \"] = \" + numbers[i]);\r\n        }\r\n        \r\n        // Parcurgere for-each\r\n        System.out.println(\"\\\\nParcurgere for-each:\");\r\n        for (int number : numbers) {\r\n            System.out.println(\"Valoare: \" + number);\r\n        }\r\n        \r\n        // Tablou bidimensional\r\n        System.out.println(\"\\\\nTablou bidimensional:\");\r\n        int[][] matrix = {\r\n            {1, 2, 3},\r\n            {4, 5, 6},\r\n            {7, 8, 9}\r\n        };\r\n        \r\n        for (int i = 0; i < matrix.length; i++) {\r\n            for (int j = 0; j < matrix[i].length; j++) {\r\n                System.out.print(matrix[i][j] + \" \");\r\n            }\r\n            System.out.println();\r\n        }\r\n    }\r\n}`\r\n    },\r\n    {\r\n      id: 'methods',\r\n      name: 'Metode',\r\n      code: `public class Methods {\r\n    public static void main(String[] args) {\r\n        // Apel de metodă fără parametri\r\n        sayHello();\r\n        \r\n        // Apel de metodă cu parametri\r\n        int sum = add(5, 3);\r\n        System.out.println(\"Suma: \" + sum);\r\n        \r\n        // Apel de metodă cu valoare de retur\r\n        String message = createMessage(\"Java\");\r\n        System.out.println(message);\r\n        \r\n        // Metodă cu parametri variabili\r\n        int total = addNumbers(1, 2, 3, 4, 5);\r\n        System.out.println(\"Total: \" + total);\r\n    }\r\n    \r\n    // Metodă simplă fără valoare de retur\r\n    public static void sayHello() {\r\n        System.out.println(\"Salut din metodă!\");\r\n    }\r\n    \r\n    // Metodă cu parametri și valoare de retur\r\n    public static int add(int a, int b) {\r\n        return a + b;\r\n    }\r\n    \r\n    // Metodă cu valoare de retur String\r\n    public static String createMessage(String language) {\r\n        return \"Învăț programare \" + language + \"!\";\r\n    }\r\n    \r\n    // Metodă cu număr variabil de parametri\r\n    public static int addNumbers(int... numbers) {\r\n        int sum = 0;\r\n        for (int num : numbers) {\r\n            sum += num;\r\n        }\r\n        return sum;\r\n    }\r\n}`\r\n    },\r\n    {\r\n      id: 'oop',\r\n      name: 'Programare Orientată pe Obiecte',\r\n      code: `// Definirea clasei\r\nclass Car {\r\n    // Atribute (variabile de instanță)\r\n    private String make;\r\n    private String model;\r\n    private int year;\r\n    \r\n    // Constructor\r\n    public Car(String make, String model, int year) {\r\n        this.make = make;\r\n        this.model = model;\r\n        this.year = year;\r\n    }\r\n    \r\n    // Metode getter\r\n    public String getMake() {\r\n        return make;\r\n    }\r\n    \r\n    public String getModel() {\r\n        return model;\r\n    }\r\n    \r\n    public int getYear() {\r\n        return year;\r\n    }\r\n    \r\n    // Metode setter\r\n    public void setYear(int year) {\r\n        if (year > 0) {\r\n            this.year = year;\r\n        }\r\n    }\r\n    \r\n    // Alte metode\r\n    public void displayInfo() {\r\n        System.out.println(\"Mașină: \" + year + \" \" + make + \" \" + model);\r\n    }\r\n    \r\n    // Metoda toString supraîncărcată\r\n    @Override\r\n    public String toString() {\r\n        return year + \" \" + make + \" \" + model;\r\n    }\r\n}\r\n\r\n// Clasa principală cu metoda main\r\npublic class OOPExample {\r\n    public static void main(String[] args) {\r\n        // Crearea obiectelor\r\n        Car car1 = new Car(\"Toyota\", \"Corolla\", 2020);\r\n        Car car2 = new Car(\"Honda\", \"Civic\", 2019);\r\n        \r\n        // Accesarea metodelor\r\n        car1.displayInfo();\r\n        car2.displayInfo();\r\n        \r\n        // Utilizarea getter-ilor\r\n        System.out.println(\"Car 1 make: \" + car1.getMake());\r\n        \r\n        // Utilizarea setter-ilor\r\n        car2.setYear(2022);\r\n        System.out.println(\"Car 2 updated year: \" + car2.getYear());\r\n        \r\n        // Utilizarea toString\r\n        System.out.println(\"Car 1: \" + car1);\r\n    }\r\n}`\r\n    }\r\n  ];\r\n\r\n  const [selectedExample, setSelectedExample] = useState(predefinedExamples[0]);\r\n  const [code, setCode] = useState(predefinedExamples[0].code);\r\n  const [showAllExamples, setShowAllExamples] = useState(false);\r\n  const [editorKey, setEditorKey] = useState(0); // Cheie pentru a forța re-randarea editorului\r\n\r\n  // Gestionar pentru schimbarea exemplului selectat\r\n  const handleExampleChange = (example) => {\r\n    setSelectedExample(example);\r\n    setCode(example.code);\r\n    // Forțăm re-randarea editorului pentru a ne asigura că se încarcă\r\n    setEditorKey(prev => prev + 1);\r\n  };\r\n\r\n  // Gestionar pentru resetarea codului la exemplu\r\n  const handleResetCode = () => {\r\n    setCode(selectedExample.code);\r\n    // Forțăm re-randarea editorului\r\n    setEditorKey(prev => prev + 1);\r\n  };\r\n\r\n  // Effect pentru a forța încărcarea inițială a editorului\r\n  useEffect(() => {\r\n    // Forțăm o re-randare după ce componenta s-a montat\r\n    const timer = setTimeout(() => {\r\n      setEditorKey(prev => prev + 1);\r\n    }, 100);\r\n\r\n    return () => clearTimeout(timer);\r\n  }, []); // Rulează doar la prima încărcare\r\n\r\n  // Filtru pentru exemplele afișate\r\n  const visibleExamples = showAllExamples \r\n    ? predefinedExamples \r\n    : predefinedExamples.slice(0, 3);\r\n\r\n  return (\r\n    <div className=\"code-playground-container\">\r\n      <h1 className=\"code-playground-title\">Playground Java</h1>\r\n      <p className=\"code-playground-description\">\r\n        Experimentează cu Java în editorul nostru interactiv. Alege unul dintre exemplele predefinite \r\n        sau scrie propriul tău cod pentru a învăța prin practică.\r\n      </p>\r\n\r\n      <div className=\"playground-layout\">\r\n        <div className=\"examples-sidebar\">\r\n          <h3>Exemple</h3>\r\n          <div className=\"examples-list\">\r\n            {visibleExamples.map((example) => (\r\n              <Card \r\n                key={example.id}\r\n                className={`example-card ${selectedExample.id === example.id ? 'selected' : ''}`}\r\n                variant=\"dark\"\r\n                title={example.name}\r\n                onClick={() => handleExampleChange(example)}\r\n                hoverable={true}\r\n              />\r\n            ))}\r\n            \r\n            {!showAllExamples && predefinedExamples.length > 3 && (\r\n              <Button \r\n                variant=\"secondary\" \r\n                size=\"small\"\r\n                onClick={() => setShowAllExamples(true)}\r\n                className=\"show-more-btn\"\r\n              >\r\n                Arată toate exemplele\r\n              </Button>\r\n            )}\r\n            \r\n            {showAllExamples && (\r\n              <Button \r\n                variant=\"secondary\" \r\n                size=\"small\"\r\n                onClick={() => setShowAllExamples(false)}\r\n                className=\"show-less-btn\"\r\n              >\r\n                Arată mai puține\r\n              </Button>\r\n            )}\r\n          </div>\r\n          \r\n          <div className=\"playground-tips\">\r\n            <h4>Sfaturi</h4>\r\n            <ul>\r\n              <li>Folosește exemplele pentru a învăța sintaxa Java</li>\r\n              <li>Experimentează prin modificarea codului</li>\r\n              <li>Rulează codul pentru a vedea rezultatele imediat</li>\r\n              <li>Cere feedback AI pentru a îmbunătăți codul</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"code-editor-area\">\r\n          <div className=\"editor-header-bar\">\r\n            <h3>Editor: {selectedExample.name}</h3>\r\n            <Button \r\n              variant=\"secondary\" \r\n              size=\"small\"\r\n              onClick={handleResetCode}\r\n              icon=\"🔄\"\r\n              iconPosition=\"left\"\r\n            >\r\n              Reset la exemplu\r\n            </Button>\r\n          </div>\r\n          \r\n          <CodeEditor \r\n            key={editorKey} // Cheia forțează re-randarea când se schimbă\r\n            initialCode={code} \r\n            onChange={setCode} \r\n          />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CodePlayground;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,8BAA8B;;AAErC;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,SAASC,cAAcA,CAAA,EAAG;EAAAC,EAAA;EACxB;EACA,MAAMC,kBAAkB,GAAG,CACzB;IACEC,EAAE,EAAE,aAAa;IACjBC,IAAI,EAAE,aAAa;IACnBC,IAAI,EAAE;AACZ;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,WAAW;IACfC,IAAI,EAAE,6BAA6B;IACnCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,OAAO;IACXC,IAAI,EAAE,OAAO;IACbC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,cAAc;IAClBC,IAAI,EAAE,2BAA2B;IACjCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,QAAQ;IACZC,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,SAAS;IACbC,IAAI,EAAE,QAAQ;IACdC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,EACD;IACEF,EAAE,EAAE,KAAK;IACTC,IAAI,EAAE,iCAAiC;IACvCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACI,CAAC,CACF;EAED,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGd,QAAQ,CAACS,kBAAkB,CAAC,CAAC,CAAC,CAAC;EAC7E,MAAM,CAACG,IAAI,EAAEG,OAAO,CAAC,GAAGf,QAAQ,CAACS,kBAAkB,CAAC,CAAC,CAAC,CAACG,IAAI,CAAC;EAC5D,MAAM,CAACI,eAAe,EAAEC,kBAAkB,CAAC,GAAGjB,QAAQ,CAAC,KAAK,CAAC;EAC7D,MAAM,CAACkB,SAAS,EAAEC,YAAY,CAAC,GAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAE/C;EACA,MAAMoB,mBAAmB,GAAIC,OAAO,IAAK;IACvCP,kBAAkB,CAACO,OAAO,CAAC;IAC3BN,OAAO,CAACM,OAAO,CAACT,IAAI,CAAC;IACrB;IACA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}