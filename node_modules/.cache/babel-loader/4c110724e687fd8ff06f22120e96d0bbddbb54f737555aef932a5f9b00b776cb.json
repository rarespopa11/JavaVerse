{"ast":null,"code":"// src/utils/AccessibilityManager.js - Fix pentru problema Monaco Editor\nclass AccessibilityManager {\n  constructor() {\n    this.isAccessibilityMode = false;\n    this.speechSynthesis = window.speechSynthesis;\n    this.currentUtterance = null;\n    this.voice = null;\n    this.isReading = false;\n    this.readingQueue = [];\n    this.shortcuts = new Map();\n    this.focusedElement = null;\n    this.navigationMode = 'normal';\n    this.currentFocusIndex = 0;\n    this.focusableElements = [];\n    this.navigationHistory = [];\n    this.readingSpeed = 1.0;\n\n    // Mod de editare\n    this.isEditMode = false;\n    this.currentEditElement = null;\n    this.lastTypedChar = '';\n    this.typingTimer = null;\n\n    // Pentru alegerea editorului\n    this.waitingForEditorChoice = false;\n    this.currentEditorElement = null;\n\n    // Setări pentru citire live\n    this.liveReadingEnabled = true;\n    this.readFullWords = true;\n    this.charEchoEnabled = true;\n\n    // Flag pentru Monaco Editor - IMPORTANT\n    this.isInMonacoEditor = false;\n    this.monacoEditorInstance = null;\n    this.initializeVoice();\n    this.setupGlobalListeners();\n    this.registerShortcuts();\n  }\n  setupGlobalListeners() {\n    document.addEventListener('keydown', e => {\n      // FOARTE IMPORTANT: Pentru Monaco Editor, permitem funcționarea normală\n      if (this.isInMonacoEditor && this.isEditMode) {\n        // Doar pentru Escape ieșim din modul editare\n        if (e.key === 'Escape') {\n          e.preventDefault();\n          e.stopPropagation();\n          this.exitEditMode();\n          return;\n        }\n\n        // Pentru comenzile de accesibilitate cu Alt, le permitem\n        if (e.altKey && ['q', 'w', 'd', 'e', 'f'].includes(e.key)) {\n          // Nu prevenim default-ul, doar procesăm comanda\n          this.handleMonacoAccessibilityCommands(e);\n          return;\n        }\n\n        // Pentru ORICE altă tastă în Monaco Editor, NU FACEM NIMIC\n        // Lăsăm Monaco să funcționeze complet normal\n        return;\n      }\n\n      // Alt + A pentru activarea modului\n      if (e.altKey && e.key === 'a') {\n        e.preventDefault();\n        e.stopPropagation();\n        this.toggleAccessibilityMode();\n        return;\n      }\n      if (!this.isAccessibilityMode) return;\n\n      // În modul editare pentru input-uri normale (nu Monaco)\n      if (this.isEditMode && !this.isInMonacoEditor) {\n        this.handleEditModeKeydown(e);\n        return;\n      }\n\n      // Prevenim comportamentul default doar pentru taste speciale în modul navigare\n      if (['Tab', 'Enter', ' ', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n      this.handleAccessibilityShortcuts(e);\n    }, false); // NU folosim capture phase\n\n    // Listener pentru input în modul editare (doar pentru input-uri normale)\n    document.addEventListener('input', e => {\n      if (this.isAccessibilityMode && this.isEditMode && this.liveReadingEnabled) {\n        // SKIP complet pentru Monaco Editor\n        if (this.isInMonacoEditor) {\n          return;\n        }\n        this.handleLiveReading(e);\n      }\n    });\n\n    // Pentru Monaco Editor, folosim un listener special\n    this.setupMonacoListeners();\n\n    // Actualizăm lista de elemente focusabile când se schimbă DOM-ul\n    const observer = new MutationObserver(() => {\n      if (this.isAccessibilityMode && !this.isEditMode) {\n        this.updateFocusableElements();\n      }\n    });\n    observer.observe(document.body, {\n      childList: true,\n      subtree: true\n    });\n  }\n  setupMonacoListeners() {\n    // Detectăm când Monaco Editor este focusat\n    document.addEventListener('focusin', e => {\n      const monacoEditor = this.findMonacoEditor(e.target);\n      if (monacoEditor) {\n        this.isInMonacoEditor = true;\n        this.monacoEditorInstance = this.getMonacoEditorInstance(monacoEditor);\n        console.log('Monaco Editor detectat și focusat');\n      }\n    });\n    document.addEventListener('focusout', e => {\n      const monacoEditor = this.findMonacoEditor(e.target);\n      if (monacoEditor) {\n        // Verificăm dacă focus-ul nu se mută în alt element Monaco\n        setTimeout(() => {\n          const newFocus = document.activeElement;\n          if (!this.findMonacoEditor(newFocus)) {\n            this.isInMonacoEditor = false;\n            this.monacoEditorInstance = null;\n            console.log('Monaco Editor a pierdut focus-ul');\n          }\n        }, 10);\n      }\n    });\n  }\n  findMonacoEditor(element) {\n    if (!element) return null;\n\n    // Verificăm dacă elementul este în Monaco Editor\n    return element.closest('.monaco-editor') || element.querySelector('.monaco-editor') || (element.classList && element.classList.contains('monaco-editor') ? element : null);\n  }\n  getMonacoEditorInstance(monacoElement) {\n    // Încercăm să obținem instanța Monaco Editor\n    if (window.monaco && window.monaco.editor) {\n      const editors = window.monaco.editor.getEditors();\n      return editors.find(editor => {\n        const domNode = editor.getDomNode();\n        return domNode && (domNode === monacoElement || monacoElement.contains(domNode));\n      });\n    }\n    return null;\n  }\n  handleMonacoAccessibilityCommands(e) {\n    if (!this.isAccessibilityMode) return;\n    switch (e.key) {\n      case 'q':\n        if (e.altKey) {\n          this.readMonacoCurrentLine();\n        }\n        break;\n      case 'w':\n        if (e.altKey) {\n          this.readMonacoCurrentWord();\n        }\n        break;\n      case 'd':\n        if (e.altKey) {\n          this.toggleLiveReading();\n        }\n        break;\n      case 'e':\n        if (e.altKey) {\n          this.executeCode();\n        }\n        break;\n      case 'f':\n        if (e.altKey) {\n          this.getFeedback();\n        }\n        break;\n    }\n  }\n  readMonacoCurrentLine() {\n    if (!this.monacoEditorInstance) {\n      this.speak(\"Nu pot accesa editorul Monaco\", 'high');\n      return;\n    }\n    try {\n      const position = this.monacoEditorInstance.getPosition();\n      const model = this.monacoEditorInstance.getModel();\n      if (position && model) {\n        const lineContent = model.getLineContent(position.lineNumber);\n        const lineText = lineContent.trim() || 'linie goală';\n        this.speak(`Linia ${position.lineNumber}: ${lineText}`, 'high');\n      }\n    } catch (error) {\n      console.error('Eroare la citirea liniei Monaco:', error);\n      this.speak(\"Eroare la citirea liniei curente\", 'high');\n    }\n  }\n  readMonacoCurrentWord() {\n    if (!this.monacoEditorInstance) {\n      this.speak(\"Nu pot accesa editorul Monaco\", 'high');\n      return;\n    }\n    try {\n      const position = this.monacoEditorInstance.getPosition();\n      const model = this.monacoEditorInstance.getModel();\n      if (position && model) {\n        const wordAtPosition = model.getWordAtPosition(position);\n        if (wordAtPosition) {\n          this.speak(`Cuvânt: ${wordAtPosition.word}`, 'high');\n        } else {\n          this.speak(\"Nu există cuvânt la poziția curentă\", 'high');\n        }\n      }\n    } catch (error) {\n      console.error('Eroare la citirea cuvântului Monaco:', error);\n      this.speak(\"Eroare la citirea cuvântului curent\", 'high');\n    }\n  }\n  handleEditModeKeydown(e) {\n    // IMPORTANT: Această funcție NU se apelează pentru Monaco Editor\n    // Este doar pentru input-uri și textarea-uri normale\n\n    // Comenzi speciale care funcționează și în modul editare\n    if (e.key === 'Escape') {\n      e.preventDefault();\n      this.exitEditMode();\n      return;\n    }\n\n    // Citire linie curentă cu Alt+Q\n    if (e.altKey && e.key === 'q') {\n      e.preventDefault();\n      this.readCurrentLine();\n      return;\n    }\n\n    // Citire cuvânt curent cu Alt+W\n    if (e.altKey && e.key === 'w') {\n      e.preventDefault();\n      this.readCurrentWord();\n      return;\n    }\n\n    // Toggle live reading cu Alt+D\n    if (e.altKey && e.key === 'd') {\n      e.preventDefault();\n      this.toggleLiveReading();\n      return;\n    }\n\n    // Pentru input-uri normale - citire la navigare stânga/dreapta\n    if (['ArrowLeft', 'ArrowRight'].includes(e.key)) {\n      setTimeout(() => {\n        this.readCharacterAtCursor();\n      }, 50);\n    }\n  }\n  activateElement() {\n    if (!this.focusedElement) {\n      this.speak(\"Niciun element selectat\", 'high');\n      return;\n    }\n    const tagName = this.focusedElement.tagName.toLowerCase();\n\n    // Pentru Monaco Editor - intrăm în modul editare FĂRĂ să interferăm\n    if (this.isMonacoEditor(this.focusedElement)) {\n      this.enterMonacoEditMode(this.focusedElement);\n      return;\n    }\n\n    // Pentru inputuri normale, permitem editarea\n    if (['input', 'textarea', 'select'].includes(tagName)) {\n      this.enterEditMode(this.focusedElement);\n      return;\n    }\n\n    // Pentru alte elemente, simulăm click\n    this.speak(\"Activez elementul\", 'normal');\n    if (this.focusedElement.click) {\n      this.focusedElement.click();\n    } else if (tagName === 'a') {\n      window.location.href = this.focusedElement.href;\n    }\n  }\n  enterMonacoEditMode(element) {\n    this.isEditMode = true;\n    this.isInMonacoEditor = true;\n    this.currentEditElement = element;\n\n    // Găsim instanța Monaco\n    this.monacoEditorInstance = this.getMonacoEditorInstance(element);\n\n    // Marcăm vizual editorul\n    const editorContainer = element.classList.contains('monaco-editor') ? element : element.closest('.monaco-editor');\n    if (editorContainer) {\n      editorContainer.classList.add('accessibility-edit-mode');\n    }\n    document.body.classList.add('editing');\n\n    // Focusăm editorul Monaco (important pentru funcționarea corectă)\n    if (this.monacoEditorInstance) {\n      this.monacoEditorInstance.focus();\n    }\n    const announcement = \"Editor Monaco activat. Scrie normal. Alt+Q pentru linia curentă, Alt+W pentru cuvânt, Escape pentru ieșire.\";\n    this.speak(announcement, 'high');\n    document.dispatchEvent(new CustomEvent('editModeChanged', {\n      detail: {\n        isEditMode: true,\n        element: element\n      }\n    }));\n  }\n  enterEditMode(element) {\n    // Această funcție este DOAR pentru input-uri normale (nu Monaco)\n    this.isEditMode = true;\n    this.isInMonacoEditor = false; // Ne asigurăm că nu e Monaco\n    this.currentEditElement = element;\n    element.focus();\n    element.classList.add('accessibility-edit-mode');\n    const announcement = `Mod editare activat. ${this.getEditModeInstructions(element)}`;\n    this.speak(announcement, 'high');\n    document.body.classList.add('editing');\n    document.dispatchEvent(new CustomEvent('editModeChanged', {\n      detail: {\n        isEditMode: true,\n        element: element\n      }\n    }));\n  }\n  exitEditMode() {\n    if (!this.isEditMode) return;\n    this.isEditMode = false;\n    this.isInMonacoEditor = false;\n    this.monacoEditorInstance = null;\n    if (this.currentEditElement) {\n      this.currentEditElement.blur();\n      this.currentEditElement.classList.remove('accessibility-edit-mode');\n\n      // Pentru Monaco Editor, eliminăm clasa de la container\n      const monacoContainer = this.currentEditElement.closest('.monaco-editor');\n      if (monacoContainer) {\n        monacoContainer.classList.remove('accessibility-edit-mode');\n      }\n      document.body.classList.remove('editing');\n      this.speak(\"Mod editare dezactivat. Navigare reactivată\", 'high');\n\n      // Re-focusăm elementul pentru navigare\n      this.setFocus(this.currentEditElement);\n      this.currentEditElement = null;\n    }\n    document.dispatchEvent(new CustomEvent('editModeChanged', {\n      detail: {\n        isEditMode: false\n      }\n    }));\n  }\n\n  // Verificăm dacă elementul este Monaco Editor (versiune îmbunătățită)\n  isMonacoEditor(element) {\n    if (!element) return false;\n    return element.classList.contains('monaco-editor') || element.querySelector('.monaco-editor') || element.closest('.monaco-editor') || element.classList.contains('code-editor') || element.id === 'code-editor' ||\n    // Verificăm și alte indicii că ar putea fi Monaco\n    element.classList.contains('editor') && element.querySelector('.view-lines') || element.classList.contains('monaco-editor-background');\n  }\n\n  // Restul metodelor rămân la fel...\n  initializeVoice() {\n    // Implementare existentă...\n  }\n  registerShortcuts() {\n    // Implementare existentă...\n  }\n\n  // Toate celelalte metode rămân neschimbate\n  speak(text, priority = 'normal') {\n    if (!text || text.trim() === '') return;\n    if (priority === 'high') {\n      this.stopReading();\n    }\n    const utterance = new SpeechSynthesisUtterance(text);\n    if (this.voice) {\n      utterance.voice = this.voice;\n    }\n    utterance.rate = this.readingSpeed;\n    utterance.pitch = 1.0;\n    utterance.volume = 1.0;\n    utterance.onstart = () => {\n      this.isReading = true;\n      this.currentUtterance = utterance;\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n        detail: {\n          isSpeaking: true\n        }\n      }));\n    };\n    utterance.onend = () => {\n      this.isReading = false;\n      this.currentUtterance = null;\n      this.processQueue();\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n        detail: {\n          isSpeaking: false\n        }\n      }));\n    };\n    utterance.onerror = e => {\n      console.error('Speech synthesis error:', e);\n      this.isReading = false;\n      this.currentUtterance = null;\n    };\n    if (this.isReading && priority !== 'high') {\n      this.readingQueue.push(utterance);\n    } else {\n      this.speechSynthesis.speak(utterance);\n    }\n  }\n\n  // Getter pentru proprietatea isSpeaking\n  get isSpeaking() {\n    return this.isReading || this.speechSynthesis.speaking;\n  }\n\n  // Getter pentru proprietatea isActive\n  get isActive() {\n    return this.isAccessibilityMode;\n  }\n  toggleAccessibilityMode() {\n    this.isAccessibilityMode = !this.isAccessibilityMode;\n    if (this.isAccessibilityMode) {\n      this.speak(\"Modul pentru nevăzători activat. Bine ai venit în JavaVerse!\", 'high');\n      this.addAccessibilityStyles();\n      this.updateFocusableElements();\n      setTimeout(() => {\n        this.readWelcomeMessage();\n      }, 2000);\n    } else {\n      this.speak(\"Modul pentru nevăzători dezactivat.\");\n      this.removeAccessibilityStyles();\n      this.stopReading();\n      if (this.isEditMode) {\n        this.exitEditMode();\n      }\n    }\n    document.dispatchEvent(new CustomEvent('accessibilityModeChanged', {\n      detail: {\n        isActive: this.isAccessibilityMode\n      }\n    }));\n  }\n\n  // Implementare minimă pentru metodele necesare\n  addAccessibilityStyles() {\n    // Implementare existentă...\n  }\n  removeAccessibilityStyles() {\n    // Implementare existentă...\n  }\n  updateFocusableElements() {\n    // Implementare existentă...\n  }\n  readWelcomeMessage() {\n    // Implementare existentă...\n  }\n  stopReading() {\n    if (this.speechSynthesis.speaking) {\n      this.speechSynthesis.cancel();\n    }\n    this.isReading = false;\n    this.currentUtterance = null;\n    this.readingQueue = [];\n    document.dispatchEvent(new CustomEvent('speechStatusChanged', {\n      detail: {\n        isSpeaking: false\n      }\n    }));\n  }\n  processQueue() {\n    if (this.readingQueue.length > 0 && !this.isReading) {\n      const nextUtterance = this.readingQueue.shift();\n      this.speechSynthesis.speak(nextUtterance);\n    }\n  }\n\n  // Metodă pentru anunțuri\n  announce(message, priority = 'normal') {\n    this.speak(message, priority);\n  }\n}\n\n// Exportăm o instanță singleton\nconst accessibilityManager = new AccessibilityManager();\nexport default accessibilityManager;","map":{"version":3,"names":["AccessibilityManager","constructor","isAccessibilityMode","speechSynthesis","window","currentUtterance","voice","isReading","readingQueue","shortcuts","Map","focusedElement","navigationMode","currentFocusIndex","focusableElements","navigationHistory","readingSpeed","isEditMode","currentEditElement","lastTypedChar","typingTimer","waitingForEditorChoice","currentEditorElement","liveReadingEnabled","readFullWords","charEchoEnabled","isInMonacoEditor","monacoEditorInstance","initializeVoice","setupGlobalListeners","registerShortcuts","document","addEventListener","e","key","preventDefault","stopPropagation","exitEditMode","altKey","includes","handleMonacoAccessibilityCommands","toggleAccessibilityMode","handleEditModeKeydown","handleAccessibilityShortcuts","handleLiveReading","setupMonacoListeners","observer","MutationObserver","updateFocusableElements","observe","body","childList","subtree","monacoEditor","findMonacoEditor","target","getMonacoEditorInstance","console","log","setTimeout","newFocus","activeElement","element","closest","querySelector","classList","contains","monacoElement","monaco","editor","editors","getEditors","find","domNode","getDomNode","readMonacoCurrentLine","readMonacoCurrentWord","toggleLiveReading","executeCode","getFeedback","speak","position","getPosition","model","getModel","lineContent","getLineContent","lineNumber","lineText","trim","error","wordAtPosition","getWordAtPosition","word","readCurrentLine","readCurrentWord","readCharacterAtCursor","activateElement","tagName","toLowerCase","isMonacoEditor","enterMonacoEditMode","enterEditMode","click","location","href","editorContainer","add","focus","announcement","dispatchEvent","CustomEvent","detail","getEditModeInstructions","blur","remove","monacoContainer","setFocus","id","text","priority","stopReading","utterance","SpeechSynthesisUtterance","rate","pitch","volume","onstart","isSpeaking","onend","processQueue","onerror","push","speaking","isActive","addAccessibilityStyles","readWelcomeMessage","removeAccessibilityStyles","cancel","length","nextUtterance","shift","announce","message","accessibilityManager"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/utils/AccessibilityManager.js"],"sourcesContent":["// src/utils/AccessibilityManager.js - Fix pentru problema Monaco Editor\r\nclass AccessibilityManager {\r\n  constructor() {\r\n    this.isAccessibilityMode = false;\r\n    this.speechSynthesis = window.speechSynthesis;\r\n    this.currentUtterance = null;\r\n    this.voice = null;\r\n    this.isReading = false;\r\n    this.readingQueue = [];\r\n    this.shortcuts = new Map();\r\n    this.focusedElement = null;\r\n    this.navigationMode = 'normal';\r\n    this.currentFocusIndex = 0;\r\n    this.focusableElements = [];\r\n    this.navigationHistory = [];\r\n    this.readingSpeed = 1.0;\r\n    \r\n    // Mod de editare\r\n    this.isEditMode = false;\r\n    this.currentEditElement = null;\r\n    this.lastTypedChar = '';\r\n    this.typingTimer = null;\r\n    \r\n    // Pentru alegerea editorului\r\n    this.waitingForEditorChoice = false;\r\n    this.currentEditorElement = null;\r\n    \r\n    // Setări pentru citire live\r\n    this.liveReadingEnabled = true;\r\n    this.readFullWords = true;\r\n    this.charEchoEnabled = true;\r\n    \r\n    // Flag pentru Monaco Editor - IMPORTANT\r\n    this.isInMonacoEditor = false;\r\n    this.monacoEditorInstance = null;\r\n    \r\n    this.initializeVoice();\r\n    this.setupGlobalListeners();\r\n    this.registerShortcuts();\r\n  }\r\n\r\n  setupGlobalListeners() {\r\n    document.addEventListener('keydown', (e) => {\r\n      // FOARTE IMPORTANT: Pentru Monaco Editor, permitem funcționarea normală\r\n      if (this.isInMonacoEditor && this.isEditMode) {\r\n        // Doar pentru Escape ieșim din modul editare\r\n        if (e.key === 'Escape') {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n          this.exitEditMode();\r\n          return;\r\n        }\r\n        \r\n        // Pentru comenzile de accesibilitate cu Alt, le permitem\r\n        if (e.altKey && ['q', 'w', 'd', 'e', 'f'].includes(e.key)) {\r\n          // Nu prevenim default-ul, doar procesăm comanda\r\n          this.handleMonacoAccessibilityCommands(e);\r\n          return;\r\n        }\r\n        \r\n        // Pentru ORICE altă tastă în Monaco Editor, NU FACEM NIMIC\r\n        // Lăsăm Monaco să funcționeze complet normal\r\n        return;\r\n      }\r\n\r\n      // Alt + A pentru activarea modului\r\n      if (e.altKey && e.key === 'a') {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        this.toggleAccessibilityMode();\r\n        return;\r\n      }\r\n\r\n      if (!this.isAccessibilityMode) return;\r\n\r\n      // În modul editare pentru input-uri normale (nu Monaco)\r\n      if (this.isEditMode && !this.isInMonacoEditor) {\r\n        this.handleEditModeKeydown(e);\r\n        return;\r\n      }\r\n\r\n      // Prevenim comportamentul default doar pentru taste speciale în modul navigare\r\n      if (['Tab', 'Enter', ' ', 'ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n      }\r\n\r\n      this.handleAccessibilityShortcuts(e);\r\n    }, false); // NU folosim capture phase\r\n\r\n    // Listener pentru input în modul editare (doar pentru input-uri normale)\r\n    document.addEventListener('input', (e) => {\r\n      if (this.isAccessibilityMode && this.isEditMode && this.liveReadingEnabled) {\r\n        // SKIP complet pentru Monaco Editor\r\n        if (this.isInMonacoEditor) {\r\n          return;\r\n        }\r\n        this.handleLiveReading(e);\r\n      }\r\n    });\r\n\r\n    // Pentru Monaco Editor, folosim un listener special\r\n    this.setupMonacoListeners();\r\n\r\n    // Actualizăm lista de elemente focusabile când se schimbă DOM-ul\r\n    const observer = new MutationObserver(() => {\r\n      if (this.isAccessibilityMode && !this.isEditMode) {\r\n        this.updateFocusableElements();\r\n      }\r\n    });\r\n\r\n    observer.observe(document.body, {\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  setupMonacoListeners() {\r\n    // Detectăm când Monaco Editor este focusat\r\n    document.addEventListener('focusin', (e) => {\r\n      const monacoEditor = this.findMonacoEditor(e.target);\r\n      if (monacoEditor) {\r\n        this.isInMonacoEditor = true;\r\n        this.monacoEditorInstance = this.getMonacoEditorInstance(monacoEditor);\r\n        console.log('Monaco Editor detectat și focusat');\r\n      }\r\n    });\r\n\r\n    document.addEventListener('focusout', (e) => {\r\n      const monacoEditor = this.findMonacoEditor(e.target);\r\n      if (monacoEditor) {\r\n        // Verificăm dacă focus-ul nu se mută în alt element Monaco\r\n        setTimeout(() => {\r\n          const newFocus = document.activeElement;\r\n          if (!this.findMonacoEditor(newFocus)) {\r\n            this.isInMonacoEditor = false;\r\n            this.monacoEditorInstance = null;\r\n            console.log('Monaco Editor a pierdut focus-ul');\r\n          }\r\n        }, 10);\r\n      }\r\n    });\r\n  }\r\n\r\n  findMonacoEditor(element) {\r\n    if (!element) return null;\r\n    \r\n    // Verificăm dacă elementul este în Monaco Editor\r\n    return element.closest('.monaco-editor') || \r\n           element.querySelector('.monaco-editor') ||\r\n           (element.classList && element.classList.contains('monaco-editor') ? element : null);\r\n  }\r\n\r\n  getMonacoEditorInstance(monacoElement) {\r\n    // Încercăm să obținem instanța Monaco Editor\r\n    if (window.monaco && window.monaco.editor) {\r\n      const editors = window.monaco.editor.getEditors();\r\n      return editors.find(editor => {\r\n        const domNode = editor.getDomNode();\r\n        return domNode && (domNode === monacoElement || monacoElement.contains(domNode));\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n\r\n  handleMonacoAccessibilityCommands(e) {\r\n    if (!this.isAccessibilityMode) return;\r\n\r\n    switch (e.key) {\r\n      case 'q':\r\n        if (e.altKey) {\r\n          this.readMonacoCurrentLine();\r\n        }\r\n        break;\r\n      case 'w':\r\n        if (e.altKey) {\r\n          this.readMonacoCurrentWord();\r\n        }\r\n        break;\r\n      case 'd':\r\n        if (e.altKey) {\r\n          this.toggleLiveReading();\r\n        }\r\n        break;\r\n      case 'e':\r\n        if (e.altKey) {\r\n          this.executeCode();\r\n        }\r\n        break;\r\n      case 'f':\r\n        if (e.altKey) {\r\n          this.getFeedback();\r\n        }\r\n        break;\r\n    }\r\n  }\r\n\r\n  readMonacoCurrentLine() {\r\n    if (!this.monacoEditorInstance) {\r\n      this.speak(\"Nu pot accesa editorul Monaco\", 'high');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const position = this.monacoEditorInstance.getPosition();\r\n      const model = this.monacoEditorInstance.getModel();\r\n      \r\n      if (position && model) {\r\n        const lineContent = model.getLineContent(position.lineNumber);\r\n        const lineText = lineContent.trim() || 'linie goală';\r\n        this.speak(`Linia ${position.lineNumber}: ${lineText}`, 'high');\r\n      }\r\n    } catch (error) {\r\n      console.error('Eroare la citirea liniei Monaco:', error);\r\n      this.speak(\"Eroare la citirea liniei curente\", 'high');\r\n    }\r\n  }\r\n\r\n  readMonacoCurrentWord() {\r\n    if (!this.monacoEditorInstance) {\r\n      this.speak(\"Nu pot accesa editorul Monaco\", 'high');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const position = this.monacoEditorInstance.getPosition();\r\n      const model = this.monacoEditorInstance.getModel();\r\n      \r\n      if (position && model) {\r\n        const wordAtPosition = model.getWordAtPosition(position);\r\n        if (wordAtPosition) {\r\n          this.speak(`Cuvânt: ${wordAtPosition.word}`, 'high');\r\n        } else {\r\n          this.speak(\"Nu există cuvânt la poziția curentă\", 'high');\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Eroare la citirea cuvântului Monaco:', error);\r\n      this.speak(\"Eroare la citirea cuvântului curent\", 'high');\r\n    }\r\n  }\r\n\r\n  handleEditModeKeydown(e) {\r\n    // IMPORTANT: Această funcție NU se apelează pentru Monaco Editor\r\n    // Este doar pentru input-uri și textarea-uri normale\r\n    \r\n    // Comenzi speciale care funcționează și în modul editare\r\n    if (e.key === 'Escape') {\r\n      e.preventDefault();\r\n      this.exitEditMode();\r\n      return;\r\n    }\r\n    \r\n    // Citire linie curentă cu Alt+Q\r\n    if (e.altKey && e.key === 'q') {\r\n      e.preventDefault();\r\n      this.readCurrentLine();\r\n      return;\r\n    }\r\n    \r\n    // Citire cuvânt curent cu Alt+W\r\n    if (e.altKey && e.key === 'w') {\r\n      e.preventDefault();\r\n      this.readCurrentWord();\r\n      return;\r\n    }\r\n    \r\n    // Toggle live reading cu Alt+D\r\n    if (e.altKey && e.key === 'd') {\r\n      e.preventDefault();\r\n      this.toggleLiveReading();\r\n      return;\r\n    }\r\n    \r\n    // Pentru input-uri normale - citire la navigare stânga/dreapta\r\n    if (['ArrowLeft', 'ArrowRight'].includes(e.key)) {\r\n      setTimeout(() => {\r\n        this.readCharacterAtCursor();\r\n      }, 50);\r\n    }\r\n  }\r\n\r\n  activateElement() {\r\n    if (!this.focusedElement) {\r\n      this.speak(\"Niciun element selectat\", 'high');\r\n      return;\r\n    }\r\n    \r\n    const tagName = this.focusedElement.tagName.toLowerCase();\r\n    \r\n    // Pentru Monaco Editor - intrăm în modul editare FĂRĂ să interferăm\r\n    if (this.isMonacoEditor(this.focusedElement)) {\r\n      this.enterMonacoEditMode(this.focusedElement);\r\n      return;\r\n    }\r\n    \r\n    // Pentru inputuri normale, permitem editarea\r\n    if (['input', 'textarea', 'select'].includes(tagName)) {\r\n      this.enterEditMode(this.focusedElement);\r\n      return;\r\n    }\r\n    \r\n    // Pentru alte elemente, simulăm click\r\n    this.speak(\"Activez elementul\", 'normal');\r\n    \r\n    if (this.focusedElement.click) {\r\n      this.focusedElement.click();\r\n    } else if (tagName === 'a') {\r\n      window.location.href = this.focusedElement.href;\r\n    }\r\n  }\r\n\r\n  enterMonacoEditMode(element) {\r\n    this.isEditMode = true;\r\n    this.isInMonacoEditor = true;\r\n    this.currentEditElement = element;\r\n    \r\n    // Găsim instanța Monaco\r\n    this.monacoEditorInstance = this.getMonacoEditorInstance(element);\r\n    \r\n    // Marcăm vizual editorul\r\n    const editorContainer = element.classList.contains('monaco-editor') \r\n      ? element \r\n      : element.closest('.monaco-editor');\r\n    if (editorContainer) {\r\n      editorContainer.classList.add('accessibility-edit-mode');\r\n    }\r\n    \r\n    document.body.classList.add('editing');\r\n    \r\n    // Focusăm editorul Monaco (important pentru funcționarea corectă)\r\n    if (this.monacoEditorInstance) {\r\n      this.monacoEditorInstance.focus();\r\n    }\r\n    \r\n    const announcement = \"Editor Monaco activat. Scrie normal. Alt+Q pentru linia curentă, Alt+W pentru cuvânt, Escape pentru ieșire.\";\r\n    this.speak(announcement, 'high');\r\n    \r\n    document.dispatchEvent(new CustomEvent('editModeChanged', {\r\n      detail: { isEditMode: true, element: element }\r\n    }));\r\n  }\r\n\r\n  enterEditMode(element) {\r\n    // Această funcție este DOAR pentru input-uri normale (nu Monaco)\r\n    this.isEditMode = true;\r\n    this.isInMonacoEditor = false; // Ne asigurăm că nu e Monaco\r\n    this.currentEditElement = element;\r\n    \r\n    element.focus();\r\n    element.classList.add('accessibility-edit-mode');\r\n    const announcement = `Mod editare activat. ${this.getEditModeInstructions(element)}`;\r\n    this.speak(announcement, 'high');\r\n    \r\n    document.body.classList.add('editing');\r\n    \r\n    document.dispatchEvent(new CustomEvent('editModeChanged', {\r\n      detail: { isEditMode: true, element: element }\r\n    }));\r\n  }\r\n  \r\n  exitEditMode() {\r\n    if (!this.isEditMode) return;\r\n    \r\n    this.isEditMode = false;\r\n    this.isInMonacoEditor = false;\r\n    this.monacoEditorInstance = null;\r\n    \r\n    if (this.currentEditElement) {\r\n      this.currentEditElement.blur();\r\n      this.currentEditElement.classList.remove('accessibility-edit-mode');\r\n      \r\n      // Pentru Monaco Editor, eliminăm clasa de la container\r\n      const monacoContainer = this.currentEditElement.closest('.monaco-editor');\r\n      if (monacoContainer) {\r\n        monacoContainer.classList.remove('accessibility-edit-mode');\r\n      }\r\n      \r\n      document.body.classList.remove('editing');\r\n      \r\n      this.speak(\"Mod editare dezactivat. Navigare reactivată\", 'high');\r\n      \r\n      // Re-focusăm elementul pentru navigare\r\n      this.setFocus(this.currentEditElement);\r\n      this.currentEditElement = null;\r\n    }\r\n    \r\n    document.dispatchEvent(new CustomEvent('editModeChanged', {\r\n      detail: { isEditMode: false }\r\n    }));\r\n  }\r\n\r\n  // Verificăm dacă elementul este Monaco Editor (versiune îmbunătățită)\r\n  isMonacoEditor(element) {\r\n    if (!element) return false;\r\n    \r\n    return element.classList.contains('monaco-editor') ||\r\n           element.querySelector('.monaco-editor') ||\r\n           element.closest('.monaco-editor') ||\r\n           element.classList.contains('code-editor') ||\r\n           element.id === 'code-editor' ||\r\n           // Verificăm și alte indicii că ar putea fi Monaco\r\n           (element.classList.contains('editor') && element.querySelector('.view-lines')) ||\r\n           element.classList.contains('monaco-editor-background');\r\n  }\r\n\r\n  // Restul metodelor rămân la fel...\r\n  initializeVoice() {\r\n    // Implementare existentă...\r\n  }\r\n\r\n  registerShortcuts() {\r\n    // Implementare existentă...\r\n  }\r\n\r\n  // Toate celelalte metode rămân neschimbate\r\n  speak(text, priority = 'normal') {\r\n    if (!text || text.trim() === '') return;\r\n\r\n    if (priority === 'high') {\r\n      this.stopReading();\r\n    }\r\n\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    if (this.voice) {\r\n      utterance.voice = this.voice;\r\n    }\r\n    \r\n    utterance.rate = this.readingSpeed;\r\n    utterance.pitch = 1.0;\r\n    utterance.volume = 1.0;\r\n\r\n    utterance.onstart = () => {\r\n      this.isReading = true;\r\n      this.currentUtterance = utterance;\r\n      \r\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n        detail: { isSpeaking: true }\r\n      }));\r\n    };\r\n\r\n    utterance.onend = () => {\r\n      this.isReading = false;\r\n      this.currentUtterance = null;\r\n      this.processQueue();\r\n      \r\n      document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n        detail: { isSpeaking: false }\r\n      }));\r\n    };\r\n\r\n    utterance.onerror = (e) => {\r\n      console.error('Speech synthesis error:', e);\r\n      this.isReading = false;\r\n      this.currentUtterance = null;\r\n    };\r\n\r\n    if (this.isReading && priority !== 'high') {\r\n      this.readingQueue.push(utterance);\r\n    } else {\r\n      this.speechSynthesis.speak(utterance);\r\n    }\r\n  }\r\n\r\n  // Getter pentru proprietatea isSpeaking\r\n  get isSpeaking() {\r\n    return this.isReading || this.speechSynthesis.speaking;\r\n  }\r\n\r\n  // Getter pentru proprietatea isActive\r\n  get isActive() {\r\n    return this.isAccessibilityMode;\r\n  }\r\n\r\n  toggleAccessibilityMode() {\r\n    this.isAccessibilityMode = !this.isAccessibilityMode;\r\n    \r\n    if (this.isAccessibilityMode) {\r\n      this.speak(\"Modul pentru nevăzători activat. Bine ai venit în JavaVerse!\", 'high');\r\n      this.addAccessibilityStyles();\r\n      this.updateFocusableElements();\r\n      \r\n      setTimeout(() => {\r\n        this.readWelcomeMessage();\r\n      }, 2000);\r\n    } else {\r\n      this.speak(\"Modul pentru nevăzători dezactivat.\");\r\n      this.removeAccessibilityStyles();\r\n      this.stopReading();\r\n      \r\n      if (this.isEditMode) {\r\n        this.exitEditMode();\r\n      }\r\n    }\r\n    \r\n    document.dispatchEvent(new CustomEvent('accessibilityModeChanged', {\r\n      detail: { isActive: this.isAccessibilityMode }\r\n    }));\r\n  }\r\n\r\n  // Implementare minimă pentru metodele necesare\r\n  addAccessibilityStyles() {\r\n    // Implementare existentă...\r\n  }\r\n\r\n  removeAccessibilityStyles() {\r\n    // Implementare existentă...\r\n  }\r\n\r\n  updateFocusableElements() {\r\n    // Implementare existentă...\r\n  }\r\n\r\n  readWelcomeMessage() {\r\n    // Implementare existentă...\r\n  }\r\n\r\n  stopReading() {\r\n    if (this.speechSynthesis.speaking) {\r\n      this.speechSynthesis.cancel();\r\n    }\r\n    \r\n    this.isReading = false;\r\n    this.currentUtterance = null;\r\n    this.readingQueue = [];\r\n    \r\n    document.dispatchEvent(new CustomEvent('speechStatusChanged', {\r\n      detail: { isSpeaking: false }\r\n    }));\r\n  }\r\n\r\n  processQueue() {\r\n    if (this.readingQueue.length > 0 && !this.isReading) {\r\n      const nextUtterance = this.readingQueue.shift();\r\n      this.speechSynthesis.speak(nextUtterance);\r\n    }\r\n  }\r\n\r\n  // Metodă pentru anunțuri\r\n  announce(message, priority = 'normal') {\r\n    this.speak(message, priority);\r\n  }\r\n}\r\n\r\n// Exportăm o instanță singleton\r\nconst accessibilityManager = new AccessibilityManager();\r\nexport default accessibilityManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}