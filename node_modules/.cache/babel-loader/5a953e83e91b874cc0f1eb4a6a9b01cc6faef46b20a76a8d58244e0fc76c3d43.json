{"ast":null,"code":"// // src/components/AccessibleCodePlayground.js\n// import React, { useState } from 'react';\n// import AccessibleCodeEditor from './AccessibleCodeEditor';\n// import Card from './Card';\n// import Button from './Button';\n// import { useAccessibility } from '../hooks/useAccessibility';\n// import '../styles/CodePlayground.css';\n\n// function AccessibleCodePlayground() {\n//   const predefinedExamples = [\n//     {\n//       id: 'hello-world',\n//       name: 'Hello World',\n//       code: `public class HelloWorld {\n//     public static void main(String[] args) {\n//         System.out.println(\"Hello, JavaVerse!\");\n//     }\n// }`\n//     },\n//     {\n//       id: 'variables',\n//       name: 'Variabile 탳i Tipuri de Date',\n//       code: `public class Variables {\n//     public static void main(String[] args) {\n//         // Declararea variabilelor de tip primitiv\n//         int number = 42;\n//         double pi = 3.14159;\n//         char letter = 'A';\n//         boolean isJavaFun = true;\n\n//         // Afi탳area valorilor\n//         System.out.println(\"Num캒rul: \" + number);\n//         System.out.println(\"PI: \" + pi);\n//         System.out.println(\"Litera: \" + letter);\n//         System.out.println(\"Java este distractiv? \" + isJavaFun);\n\n//         // Declararea unui String (tip referin탵캒)\n//         String message = \"칉nv캒탵area Java este fascinant캒!\";\n//         System.out.println(message);\n//     }\n// }`\n//     },\n//     {\n//       id: 'loops',\n//       name: 'Bucle',\n//       code: `public class Loops {\n//     public static void main(String[] args) {\n//         // Bucla for - num캒r캒 de la 1 la 5\n//         System.out.println(\"Exemplu de bucl캒 for:\");\n//         for (int i = 1; i <= 5; i++) {\n//             System.out.println(\"Num캒rul: \" + i);\n//         }\n\n//         // Bucla while - num캒r캒 de la 5 la 1\n//         System.out.println(\"\\\\nExemplu de bucl캒 while:\");\n//         int count = 5;\n//         while (count > 0) {\n//             System.out.println(\"Num캒r캒toare invers캒: \" + count);\n//             count--;\n//         }\n//     }\n// }`\n//     },\n//     {\n//       id: 'conditionals',\n//       name: 'Instruc탵iuni Condi탵ionale',\n//       code: `public class Conditionals {\n//     public static void main(String[] args) {\n//         int time = 15;\n\n//         // Instruc탵iune if-else\n//         System.out.println(\"Exemplu if-else:\");\n//         if (time < 12) {\n//             System.out.println(\"Bun캒 diminea탵a!\");\n//         } else if (time < 18) {\n//             System.out.println(\"Bun캒 ziua!\");\n//         } else {\n//             System.out.println(\"Bun캒 seara!\");\n//         }\n//     }\n// }`\n//     }\n//   ];\n\n//   const [selectedExample, setSelectedExample] = useState(predefinedExamples[0]);\n//   const [code, setCode] = useState(predefinedExamples[0].code);\n//   const [showAllExamples, setShowAllExamples] = useState(false);\n//   const [selectedExampleIndex, setSelectedExampleIndex] = useState(0);\n\n//   const { \n//     isAccessibilityMode, \n//     useNavigationAccessibility,\n//     announceLoading \n//   } = useAccessibility();\n\n//   const { announcePageLoad } = useNavigationAccessibility();\n\n//   // Listener pentru comenzile rapide de accesibilitate\n//   React.useEffect(() => {\n//     if (!isAccessibilityMode) return;\n\n//     const handleKeyPress = (e) => {\n//       if (!isAccessibilityMode) return;\n\n//       // Navigare prin exemple cu s캒ge탵ile st칙nga/dreapta\n//       if (e.key === 'ArrowLeft') {\n//         e.preventDefault();\n//         const newIndex = selectedExampleIndex > 0 ? selectedExampleIndex - 1 : predefinedExamples.length - 1;\n//         handleExampleChange(predefinedExamples[newIndex], newIndex);\n//       } else if (e.key === 'ArrowRight') {\n//         e.preventDefault();\n//         const newIndex = selectedExampleIndex < predefinedExamples.length - 1 ? selectedExampleIndex + 1 : 0;\n//         handleExampleChange(predefinedExamples[newIndex], newIndex);\n//       }\n//     };\n\n//     document.addEventListener('keydown', handleKeyPress);\n//     return () => document.removeEventListener('keydown', handleKeyPress);\n//   }, [isAccessibilityMode, selectedExampleIndex, predefinedExamples]);\n\n//   React.useEffect(() => {\n//     if (isAccessibilityMode) {\n//       announcePageLoad(\n//         'Playground Java', \n//         'Editorul interactiv pentru experimentarea cu cod Java. Folose탳te s캒ge탵ile st칙nga 탳i dreapta pentru a naviga prin exemple.'\n//       );\n//     }\n//   }, [isAccessibilityMode, announcePageLoad]);\n\n//   const handleExampleChange = (example, index = null) => {\n//     setSelectedExample(example);\n//     setCode(example.code);\n//     if (index !== null) {\n//       setSelectedExampleIndex(index);\n//     } else {\n//       const foundIndex = predefinedExamples.findIndex(ex => ex.id === example.id);\n//       setSelectedExampleIndex(foundIndex);\n//     }\n\n//     if (isAccessibilityMode) {\n//       announceLoading(`Exemplul selectat: ${example.name}`);\n//     }\n//   };\n\n//   const handleResetCode = () => {\n//     setCode(selectedExample.code);\n//     if (isAccessibilityMode) {\n//       announceLoading('Codul a fost resetat la exemplul original');\n//     }\n//   };\n\n//   const visibleExamples = showAllExamples \n//     ? predefinedExamples \n//     : predefinedExamples.slice(0, 3);\n\n//   return (\n//     <div className=\"code-playground-container\">\n//       {isAccessibilityMode && (\n//         <div className=\"accessibility-instructions\" style={{ \n//           position: 'absolute', \n//           left: '-9999px',\n//           width: '1px',\n//           height: '1px' \n//         }}>\n//           <p>\n//             Playground Java pentru experimentarea cu cod. Sunt disponibile {predefinedExamples.length} exemple.\n//             Folose탳te s캒ge탵ile st칙nga 탳i dreapta pentru a naviga prin exemple.\n//             Exemplul curent: {selectedExample.name}.\n//           </p>\n//         </div>\n//       )}\n\n//       <h1 className=\"code-playground-title\">Playground Java</h1>\n//       <p className=\"code-playground-description\">\n//         Experimenteaz캒 cu Java 칥n editorul nostru interactiv. Alege unul dintre exemplele predefinite \n//         sau scrie propriul t캒u cod pentru a 칥nv캒탵a prin practic캒.\n//       </p>\n\n//       <div className=\"playground-layout\">\n//         <div className=\"examples-sidebar\">\n//           <h3>Exemple</h3>\n//           <div className=\"examples-list\">\n//             {visibleExamples.map((example, index) => (\n//               <Card \n//                 key={example.id}\n//                 className={`example-card ${selectedExample.id === example.id ? 'selected accessibility-focus' : ''}`}\n//                 variant=\"dark\"\n//                 title={example.name}\n//                 onClick={() => handleExampleChange(example, index)}\n//                 hoverable={true}\n//                 role={isAccessibilityMode ? \"button\" : undefined}\n//                 aria-label={isAccessibilityMode ? `Exemplul ${index + 1}: ${example.name}` : undefined}\n//                 tabIndex={isAccessibilityMode ? 0 : undefined}\n//               />\n//             ))}\n\n//             {!showAllExamples && predefinedExamples.length > 3 && (\n//               <Button \n//                 variant=\"secondary\" \n//                 size=\"small\"\n//                 onClick={() => setShowAllExamples(true)}\n//                 className=\"show-more-btn\"\n//                 aria-label={isAccessibilityMode ? \"Arat캒 toate exemplele disponibile\" : undefined}\n//               >\n//                 Arat캒 toate exemplele\n//               </Button>\n//             )}\n\n//             {showAllExamples && (\n//               <Button \n//                 variant=\"secondary\" \n//                 size=\"small\"\n//                 onClick={() => setShowAllExamples(false)}\n//                 className=\"show-less-btn\"\n//                 aria-label={isAccessibilityMode ? \"Arat캒 mai pu탵ine exemple\" : undefined}\n//               >\n//                 Arat캒 mai pu탵ine\n//               </Button>\n//             )}\n//           </div>\n\n//           <div className=\"playground-tips\">\n//             <h4>Sfaturi pentru accesibilitate</h4>\n//             <ul>\n//               <li>Ctrl+Shift+E pentru a executa codul</li>\n//               <li>Ctrl+Shift+F pentru feedback AI</li>\n//               <li>Tab pentru a citi linia curent캒</li>\n//               <li>S캒ge탵i st칙nga/dreapta pentru exemple</li>\n//             </ul>\n//           </div>\n//         </div>\n\n//         <div className=\"code-editor-area\">\n//           <div className=\"editor-header-bar\">\n//             <h3>Editor: {selectedExample.name}</h3>\n//             <Button \n//               variant=\"secondary\" \n//               size=\"small\"\n//               onClick={handleResetCode}\n//               icon=\"游댃\"\n//               iconPosition=\"left\"\n//               aria-label={isAccessibilityMode ? \"Reseteaz캒 codul la exemplul original\" : undefined}\n//             >\n//               Reset la exemplu\n//             </Button>\n//           </div>\n\n//           <AccessibleCodeEditor \n//             initialCode={code} \n//             onChange={setCode}\n//             editorKey={selectedExample.id}\n//           />\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default AccessibleCodePlayground;","map":{"version":3,"names":[],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/AccessibleCodePlayground.js"],"sourcesContent":["// // src/components/AccessibleCodePlayground.js\r\n// import React, { useState } from 'react';\r\n// import AccessibleCodeEditor from './AccessibleCodeEditor';\r\n// import Card from './Card';\r\n// import Button from './Button';\r\n// import { useAccessibility } from '../hooks/useAccessibility';\r\n// import '../styles/CodePlayground.css';\r\n\r\n// function AccessibleCodePlayground() {\r\n//   const predefinedExamples = [\r\n//     {\r\n//       id: 'hello-world',\r\n//       name: 'Hello World',\r\n//       code: `public class HelloWorld {\r\n//     public static void main(String[] args) {\r\n//         System.out.println(\"Hello, JavaVerse!\");\r\n//     }\r\n// }`\r\n//     },\r\n//     {\r\n//       id: 'variables',\r\n//       name: 'Variabile 탳i Tipuri de Date',\r\n//       code: `public class Variables {\r\n//     public static void main(String[] args) {\r\n//         // Declararea variabilelor de tip primitiv\r\n//         int number = 42;\r\n//         double pi = 3.14159;\r\n//         char letter = 'A';\r\n//         boolean isJavaFun = true;\r\n        \r\n//         // Afi탳area valorilor\r\n//         System.out.println(\"Num캒rul: \" + number);\r\n//         System.out.println(\"PI: \" + pi);\r\n//         System.out.println(\"Litera: \" + letter);\r\n//         System.out.println(\"Java este distractiv? \" + isJavaFun);\r\n        \r\n//         // Declararea unui String (tip referin탵캒)\r\n//         String message = \"칉nv캒탵area Java este fascinant캒!\";\r\n//         System.out.println(message);\r\n//     }\r\n// }`\r\n//     },\r\n//     {\r\n//       id: 'loops',\r\n//       name: 'Bucle',\r\n//       code: `public class Loops {\r\n//     public static void main(String[] args) {\r\n//         // Bucla for - num캒r캒 de la 1 la 5\r\n//         System.out.println(\"Exemplu de bucl캒 for:\");\r\n//         for (int i = 1; i <= 5; i++) {\r\n//             System.out.println(\"Num캒rul: \" + i);\r\n//         }\r\n        \r\n//         // Bucla while - num캒r캒 de la 5 la 1\r\n//         System.out.println(\"\\\\nExemplu de bucl캒 while:\");\r\n//         int count = 5;\r\n//         while (count > 0) {\r\n//             System.out.println(\"Num캒r캒toare invers캒: \" + count);\r\n//             count--;\r\n//         }\r\n//     }\r\n// }`\r\n//     },\r\n//     {\r\n//       id: 'conditionals',\r\n//       name: 'Instruc탵iuni Condi탵ionale',\r\n//       code: `public class Conditionals {\r\n//     public static void main(String[] args) {\r\n//         int time = 15;\r\n        \r\n//         // Instruc탵iune if-else\r\n//         System.out.println(\"Exemplu if-else:\");\r\n//         if (time < 12) {\r\n//             System.out.println(\"Bun캒 diminea탵a!\");\r\n//         } else if (time < 18) {\r\n//             System.out.println(\"Bun캒 ziua!\");\r\n//         } else {\r\n//             System.out.println(\"Bun캒 seara!\");\r\n//         }\r\n//     }\r\n// }`\r\n//     }\r\n//   ];\r\n\r\n//   const [selectedExample, setSelectedExample] = useState(predefinedExamples[0]);\r\n//   const [code, setCode] = useState(predefinedExamples[0].code);\r\n//   const [showAllExamples, setShowAllExamples] = useState(false);\r\n//   const [selectedExampleIndex, setSelectedExampleIndex] = useState(0);\r\n\r\n//   const { \r\n//     isAccessibilityMode, \r\n//     useNavigationAccessibility,\r\n//     announceLoading \r\n//   } = useAccessibility();\r\n  \r\n//   const { announcePageLoad } = useNavigationAccessibility();\r\n\r\n//   // Listener pentru comenzile rapide de accesibilitate\r\n//   React.useEffect(() => {\r\n//     if (!isAccessibilityMode) return;\r\n\r\n//     const handleKeyPress = (e) => {\r\n//       if (!isAccessibilityMode) return;\r\n\r\n//       // Navigare prin exemple cu s캒ge탵ile st칙nga/dreapta\r\n//       if (e.key === 'ArrowLeft') {\r\n//         e.preventDefault();\r\n//         const newIndex = selectedExampleIndex > 0 ? selectedExampleIndex - 1 : predefinedExamples.length - 1;\r\n//         handleExampleChange(predefinedExamples[newIndex], newIndex);\r\n//       } else if (e.key === 'ArrowRight') {\r\n//         e.preventDefault();\r\n//         const newIndex = selectedExampleIndex < predefinedExamples.length - 1 ? selectedExampleIndex + 1 : 0;\r\n//         handleExampleChange(predefinedExamples[newIndex], newIndex);\r\n//       }\r\n//     };\r\n\r\n//     document.addEventListener('keydown', handleKeyPress);\r\n//     return () => document.removeEventListener('keydown', handleKeyPress);\r\n//   }, [isAccessibilityMode, selectedExampleIndex, predefinedExamples]);\r\n\r\n//   React.useEffect(() => {\r\n//     if (isAccessibilityMode) {\r\n//       announcePageLoad(\r\n//         'Playground Java', \r\n//         'Editorul interactiv pentru experimentarea cu cod Java. Folose탳te s캒ge탵ile st칙nga 탳i dreapta pentru a naviga prin exemple.'\r\n//       );\r\n//     }\r\n//   }, [isAccessibilityMode, announcePageLoad]);\r\n\r\n//   const handleExampleChange = (example, index = null) => {\r\n//     setSelectedExample(example);\r\n//     setCode(example.code);\r\n//     if (index !== null) {\r\n//       setSelectedExampleIndex(index);\r\n//     } else {\r\n//       const foundIndex = predefinedExamples.findIndex(ex => ex.id === example.id);\r\n//       setSelectedExampleIndex(foundIndex);\r\n//     }\r\n    \r\n//     if (isAccessibilityMode) {\r\n//       announceLoading(`Exemplul selectat: ${example.name}`);\r\n//     }\r\n//   };\r\n\r\n//   const handleResetCode = () => {\r\n//     setCode(selectedExample.code);\r\n//     if (isAccessibilityMode) {\r\n//       announceLoading('Codul a fost resetat la exemplul original');\r\n//     }\r\n//   };\r\n\r\n//   const visibleExamples = showAllExamples \r\n//     ? predefinedExamples \r\n//     : predefinedExamples.slice(0, 3);\r\n\r\n//   return (\r\n//     <div className=\"code-playground-container\">\r\n//       {isAccessibilityMode && (\r\n//         <div className=\"accessibility-instructions\" style={{ \r\n//           position: 'absolute', \r\n//           left: '-9999px',\r\n//           width: '1px',\r\n//           height: '1px' \r\n//         }}>\r\n//           <p>\r\n//             Playground Java pentru experimentarea cu cod. Sunt disponibile {predefinedExamples.length} exemple.\r\n//             Folose탳te s캒ge탵ile st칙nga 탳i dreapta pentru a naviga prin exemple.\r\n//             Exemplul curent: {selectedExample.name}.\r\n//           </p>\r\n//         </div>\r\n//       )}\r\n      \r\n//       <h1 className=\"code-playground-title\">Playground Java</h1>\r\n//       <p className=\"code-playground-description\">\r\n//         Experimenteaz캒 cu Java 칥n editorul nostru interactiv. Alege unul dintre exemplele predefinite \r\n//         sau scrie propriul t캒u cod pentru a 칥nv캒탵a prin practic캒.\r\n//       </p>\r\n\r\n//       <div className=\"playground-layout\">\r\n//         <div className=\"examples-sidebar\">\r\n//           <h3>Exemple</h3>\r\n//           <div className=\"examples-list\">\r\n//             {visibleExamples.map((example, index) => (\r\n//               <Card \r\n//                 key={example.id}\r\n//                 className={`example-card ${selectedExample.id === example.id ? 'selected accessibility-focus' : ''}`}\r\n//                 variant=\"dark\"\r\n//                 title={example.name}\r\n//                 onClick={() => handleExampleChange(example, index)}\r\n//                 hoverable={true}\r\n//                 role={isAccessibilityMode ? \"button\" : undefined}\r\n//                 aria-label={isAccessibilityMode ? `Exemplul ${index + 1}: ${example.name}` : undefined}\r\n//                 tabIndex={isAccessibilityMode ? 0 : undefined}\r\n//               />\r\n//             ))}\r\n            \r\n//             {!showAllExamples && predefinedExamples.length > 3 && (\r\n//               <Button \r\n//                 variant=\"secondary\" \r\n//                 size=\"small\"\r\n//                 onClick={() => setShowAllExamples(true)}\r\n//                 className=\"show-more-btn\"\r\n//                 aria-label={isAccessibilityMode ? \"Arat캒 toate exemplele disponibile\" : undefined}\r\n//               >\r\n//                 Arat캒 toate exemplele\r\n//               </Button>\r\n//             )}\r\n            \r\n//             {showAllExamples && (\r\n//               <Button \r\n//                 variant=\"secondary\" \r\n//                 size=\"small\"\r\n//                 onClick={() => setShowAllExamples(false)}\r\n//                 className=\"show-less-btn\"\r\n//                 aria-label={isAccessibilityMode ? \"Arat캒 mai pu탵ine exemple\" : undefined}\r\n//               >\r\n//                 Arat캒 mai pu탵ine\r\n//               </Button>\r\n//             )}\r\n//           </div>\r\n          \r\n//           <div className=\"playground-tips\">\r\n//             <h4>Sfaturi pentru accesibilitate</h4>\r\n//             <ul>\r\n//               <li>Ctrl+Shift+E pentru a executa codul</li>\r\n//               <li>Ctrl+Shift+F pentru feedback AI</li>\r\n//               <li>Tab pentru a citi linia curent캒</li>\r\n//               <li>S캒ge탵i st칙nga/dreapta pentru exemple</li>\r\n//             </ul>\r\n//           </div>\r\n//         </div>\r\n        \r\n//         <div className=\"code-editor-area\">\r\n//           <div className=\"editor-header-bar\">\r\n//             <h3>Editor: {selectedExample.name}</h3>\r\n//             <Button \r\n//               variant=\"secondary\" \r\n//               size=\"small\"\r\n//               onClick={handleResetCode}\r\n//               icon=\"游댃\"\r\n//               iconPosition=\"left\"\r\n//               aria-label={isAccessibilityMode ? \"Reseteaz캒 codul la exemplul original\" : undefined}\r\n//             >\r\n//               Reset la exemplu\r\n//             </Button>\r\n//           </div>\r\n          \r\n//           <AccessibleCodeEditor \r\n//             initialCode={code} \r\n//             onChange={setCode}\r\n//             editorKey={selectedExample.id}\r\n//           />\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default AccessibleCodePlayground;"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}