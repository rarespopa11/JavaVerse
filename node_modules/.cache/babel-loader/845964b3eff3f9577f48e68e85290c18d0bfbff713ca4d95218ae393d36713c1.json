{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport '../styles/Quiz.css'; // Importul CSS\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [isFinished, setIsFinished] = useState(false);\n  const [isAnswerChecked, setIsAnswerChecked] = useState(false); // Stare pentru validarea răspunsului\n  const [courseId, setCourseId] = useState(null);\n  const [totalLessons, setTotalLessons] = useState(0);\n  const userId = 'USER_ID'; // Înlocuiește cu ID-ul real al utilizatorului\n\n  useEffect(() => {\n    const courseIdFromUrl = window.location.pathname.split('/')[2]; // Extragem ID-ul cursului din URL\n    setCourseId(courseIdFromUrl);\n    fetch(`http://localhost:5000/api/courses/${courseIdFromUrl}`).then(response => response.json()).then(data => {\n      if (data.course && data.course.questions) {\n        setQuestions(data.course.questions);\n        setTotalLessons(data.course.totalLessons); // Setăm numărul total de lecții din curs\n      }\n    }).catch(error => console.error('Error fetching questions:', error));\n  }, []);\n  const handleAnswerChange = useCallback((index, answerIndex) => {\n    const updatedAnswers = [...selectedAnswers];\n    updatedAnswers[index] = answerIndex;\n    setSelectedAnswers(updatedAnswers);\n  }, [selectedAnswers]);\n  const handleNext = useCallback(() => {\n    if (isAnswerChecked) {\n      // Al doilea click - trecem la următoarea întrebare\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n        setIsAnswerChecked(false); // Resetăm starea\n      } else {\n        // La finalizarea testului, salvăm progresul utilizatorului\n        saveProgress();\n        setIsFinished(true);\n      }\n    } else {\n      // Primul click - validăm răspunsul\n      if (selectedAnswers[currentQuestionIndex] === undefined) {\n        alert('Te rugăm să selectezi un răspuns!');\n        return;\n      }\n\n      // Verificăm dacă răspunsul este corect\n      if (selectedAnswers[currentQuestionIndex] === questions[currentQuestionIndex].correctAnswerIndex) {\n        setScore(prevScore => prevScore + 1); // Actualizăm scorul\n      }\n      setIsAnswerChecked(true); // Setăm că răspunsul a fost verificat\n    }\n  }, [isAnswerChecked, currentQuestionIndex, questions, selectedAnswers]);\n  const handleRestart = useCallback(() => {\n    setScore(0);\n    setCurrentQuestionIndex(0);\n    setSelectedAnswers([]);\n    setIsFinished(false);\n    setIsAnswerChecked(false); // Resetăm starea pentru validarea răspunsurilor\n  }, []);\n  const saveProgress = async () => {\n    // Salvăm progresul utilizatorului\n    const completedLessons = currentQuestionIndex + 1; // Lecțiile finalizate până acum\n\n    try {\n      const response = await fetch('http://localhost:5000/api/user/progress', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId,\n          courseId,\n          completedLessons,\n          totalLessons,\n          testScore: score\n        })\n      });\n      const data = await response.json();\n      console.log('Progresul utilizatorului a fost salvat:', data);\n    } catch (error) {\n      console.error('Eroare la salvarea progresului utilizatorului:', error);\n    }\n  };\n  if (questions.length === 0) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading questions...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 38\n  }, this);\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\xCEntrebarea \", currentQuestionIndex + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), !isFinished ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.options.map((option, index) => {\n          let className = '';\n          if (selectedAnswers[currentQuestionIndex] === index) {\n            // Adaugă clasa selected la răspunsul ales\n            className = 'selected';\n          }\n          if (isAnswerChecked) {\n            if (index === questions[currentQuestionIndex].correctAnswerIndex) {\n              // Răspuns corect - verde\n              className = 'correct';\n            } else if (selectedAnswers[currentQuestionIndex] === index) {\n              // Răspuns greșit - roșu\n              className = 'incorrect';\n            }\n          }\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: className,\n            onClick: () => handleAnswerChange(currentQuestionIndex, index) // Activăm click pe întreaga listă\n            ,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: `question-${currentQuestionIndex}-option-${index}`,\n              name: `question-${currentQuestionIndex}`,\n              value: index,\n              checked: selectedAnswers[currentQuestionIndex] === index,\n              onChange: () => {} // Manipulăm schimbarea prin onClick pe li\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 130,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `question-${currentQuestionIndex}-option-${index}`,\n              children: option\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNext,\n        children: isAnswerChecked ? 'Next' : 'Validate Answer'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Testul S-a \\xCEncheiat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Punctajul t\\u0103u: \", score, \" din \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRestart,\n        children: \"\\xCEncepe din nou\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n_s(Quiz, \"Bn+pULTG8iMR5IVSfGQukW3Yi4k=\");\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","jsxDEV","_jsxDEV","Quiz","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","score","setScore","isFinished","setIsFinished","isAnswerChecked","setIsAnswerChecked","courseId","setCourseId","totalLessons","setTotalLessons","userId","courseIdFromUrl","window","location","pathname","split","fetch","then","response","json","data","course","catch","error","console","handleAnswerChange","index","answerIndex","updatedAnswers","handleNext","length","saveProgress","undefined","alert","correctAnswerIndex","prevScore","handleRestart","completedLessons","method","headers","body","JSON","stringify","testScore","log","children","fileName","_jsxFileName","lineNumber","columnNumber","currentQuestion","className","question","options","map","option","onClick","type","id","name","value","checked","onChange","htmlFor","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/Quiz.js"],"sourcesContent":["import '../styles/Quiz.css'; // Importul CSS\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\n\r\nfunction Quiz() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [isFinished, setIsFinished] = useState(false);\r\n  const [isAnswerChecked, setIsAnswerChecked] = useState(false); // Stare pentru validarea răspunsului\r\n  const [courseId, setCourseId] = useState(null);\r\n  const [totalLessons, setTotalLessons] = useState(0);\r\n\r\n  const userId = 'USER_ID';  // Înlocuiește cu ID-ul real al utilizatorului\r\n\r\n  useEffect(() => {\r\n    const courseIdFromUrl = window.location.pathname.split('/')[2]; // Extragem ID-ul cursului din URL\r\n    setCourseId(courseIdFromUrl);\r\n\r\n    fetch(`http://localhost:5000/api/courses/${courseIdFromUrl}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.course && data.course.questions) {\r\n          setQuestions(data.course.questions);\r\n          setTotalLessons(data.course.totalLessons); // Setăm numărul total de lecții din curs\r\n        }\r\n      })\r\n      .catch((error) => console.error('Error fetching questions:', error));\r\n  }, []);\r\n\r\n  const handleAnswerChange = useCallback((index, answerIndex) => {\r\n    const updatedAnswers = [...selectedAnswers];\r\n    updatedAnswers[index] = answerIndex;\r\n    setSelectedAnswers(updatedAnswers);\r\n  }, [selectedAnswers]);\r\n\r\n  const handleNext = useCallback(() => {\r\n    if (isAnswerChecked) {\r\n      // Al doilea click - trecem la următoarea întrebare\r\n      if (currentQuestionIndex < questions.length - 1) {\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        setIsAnswerChecked(false); // Resetăm starea\r\n      } else {\r\n        // La finalizarea testului, salvăm progresul utilizatorului\r\n        saveProgress();\r\n        setIsFinished(true);\r\n      }\r\n    } else {\r\n      // Primul click - validăm răspunsul\r\n      if (selectedAnswers[currentQuestionIndex] === undefined) {\r\n        alert('Te rugăm să selectezi un răspuns!');\r\n        return;\r\n      }\r\n\r\n      // Verificăm dacă răspunsul este corect\r\n      if (selectedAnswers[currentQuestionIndex] === questions[currentQuestionIndex].correctAnswerIndex) {\r\n        setScore(prevScore => prevScore + 1); // Actualizăm scorul\r\n      }\r\n\r\n      setIsAnswerChecked(true); // Setăm că răspunsul a fost verificat\r\n    }\r\n  }, [isAnswerChecked, currentQuestionIndex, questions, selectedAnswers]);\r\n\r\n  const handleRestart = useCallback(() => {\r\n    setScore(0);\r\n    setCurrentQuestionIndex(0);\r\n    setSelectedAnswers([]);\r\n    setIsFinished(false);\r\n    setIsAnswerChecked(false); // Resetăm starea pentru validarea răspunsurilor\r\n  }, []);\r\n\r\n  const saveProgress = async () => {\r\n    // Salvăm progresul utilizatorului\r\n    const completedLessons = currentQuestionIndex + 1; // Lecțiile finalizate până acum\r\n\r\n    try {\r\n      const response = await fetch('http://localhost:5000/api/user/progress', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          userId,\r\n          courseId,\r\n          completedLessons,\r\n          totalLessons,\r\n          testScore: score,\r\n        }),\r\n      });\r\n      const data = await response.json();\r\n      console.log('Progresul utilizatorului a fost salvat:', data);\r\n    } catch (error) {\r\n      console.error('Eroare la salvarea progresului utilizatorului:', error);\r\n    }\r\n  };\r\n\r\n  if (questions.length === 0) return <div>Loading questions...</div>;\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      <h2>Întrebarea {currentQuestionIndex + 1}</h2>\r\n\r\n      {!isFinished ? (\r\n        <div className=\"question-container\">\r\n          <h3>{currentQuestion.question}</h3>\r\n          <ul>\r\n            {currentQuestion.options.map((option, index) => {\r\n              let className = '';\r\n              if (selectedAnswers[currentQuestionIndex] === index) {\r\n                // Adaugă clasa selected la răspunsul ales\r\n                className = 'selected';\r\n              }\r\n              if (isAnswerChecked) {\r\n                if (index === questions[currentQuestionIndex].correctAnswerIndex) {\r\n                  // Răspuns corect - verde\r\n                  className = 'correct';\r\n                } else if (selectedAnswers[currentQuestionIndex] === index) {\r\n                  // Răspuns greșit - roșu\r\n                  className = 'incorrect';\r\n                }\r\n              }\r\n              return (\r\n                <li\r\n                  key={index}\r\n                  className={className}\r\n                  onClick={() => handleAnswerChange(currentQuestionIndex, index)} // Activăm click pe întreaga listă\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={`question-${currentQuestionIndex}-option-${index}`}\r\n                    name={`question-${currentQuestionIndex}`}\r\n                    value={index}\r\n                    checked={selectedAnswers[currentQuestionIndex] === index}\r\n                    onChange={() => {}} // Manipulăm schimbarea prin onClick pe li\r\n                  />\r\n                  <label htmlFor={`question-${currentQuestionIndex}-option-${index}`}>{option}</label>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <button onClick={handleNext}>\r\n            {isAnswerChecked ? 'Next' : 'Validate Answer'}\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"result-container\">\r\n          <h3>Testul S-a Încheiat</h3>\r\n          <p>Punctajul tău: {score} din {questions.length}</p>\r\n          <button onClick={handleRestart}>Începe din nou</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quiz;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}