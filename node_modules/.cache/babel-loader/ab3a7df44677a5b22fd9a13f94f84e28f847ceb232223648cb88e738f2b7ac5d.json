{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\AccessibleQuiz.js\",\n  _s = $RefreshSig$();\n// src/components/AccessibleQuiz.js - Fixed ESLint warnings\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAccessibility } from '../hooks/useAccessibility';\nimport '../styles/Quiz.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AccessibleQuiz() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [isFinished, setIsFinished] = useState(false);\n  const [isAnswerChecked, setIsAnswerChecked] = useState(false);\n  const [courseId, setCourseId] = useState(null);\n  const [totalLessons, setTotalLessons] = useState(0);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const {\n    isAccessibilityMode,\n    useQuizAccessibility,\n    announceLoading,\n    announceError\n  } = useAccessibility();\n  const {\n    announceQuestion,\n    announceAnswerSelected,\n    announceQuizProgress,\n    announceQuizResult\n  } = useQuizAccessibility();\n  const userId = sessionStorage.getItem('userId');\n  const authToken = sessionStorage.getItem('authToken');\n\n  // Funcție pentru citirea textului cu punctuație (pentru întrebări de programare)\n  const readTextWithPunctuation = useCallback(text => {\n    if (!text) return text;\n\n    // Pentru întrebări de programare, citim punctuația important\n    return text.split('').map(char => {\n      const punctuationMap = {\n        '=': ' egal ',\n        ';': ' punct și virgulă ',\n        '(': ' paranteză deschisă ',\n        ')': ' paranteză închisă ',\n        '{': ' acoladă deschisă ',\n        '}': ' acoladă închisă ',\n        '[': ' paranteză pătrată deschisă ',\n        ']': ' paranteză pătrată închisă ',\n        '.': ' punct ',\n        ',': ' virgulă ',\n        ':': ' două puncte ',\n        '+': ' plus ',\n        '-': ' minus ',\n        '*': ' asterisc ',\n        '/': ' slash ',\n        '<': ' mai mic ',\n        '>': ' mai mare ',\n        '&': ' ampersand ',\n        '|': ' bară verticală '\n      };\n      return punctuationMap[char] || char;\n    }).join('');\n  }, []);\n  const handleAnswerChange = useCallback((index, answerIndex) => {\n    const updatedAnswers = [...selectedAnswers];\n    updatedAnswers[index] = answerIndex;\n    setSelectedAnswers(updatedAnswers);\n    if (isAccessibilityMode) {\n      // FIXAT: Citim opțiunea cu punctuație\n      const selectedOption = readTextWithPunctuation(questions[currentQuestionIndex].options[answerIndex]);\n      announceAnswerSelected(answerIndex, selectedOption);\n    }\n  }, [selectedAnswers, currentQuestionIndex, questions, isAccessibilityMode, announceAnswerSelected, readTextWithPunctuation]);\n  const saveProgress = useCallback(async testScore => {\n    if (!userId || !courseId) {\n      console.error('Lipsesc informații esențiale: userId sau courseId');\n      return;\n    }\n    setSaving(true);\n    if (isAccessibilityMode) {\n      announceLoading('Se salvează rezultatul testului...');\n    }\n    try {\n      const progressResponse = await fetch(`http://localhost:5000/api/user/progress/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n      const progressData = await progressResponse.json();\n      const currentProgress = progressData.find(p => p.courseId._id === courseId);\n      const completedLessons = currentProgress ? currentProgress.completedLessons : totalLessons;\n      const response = await fetch('http://localhost:5000/api/user/progress', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          userId,\n          courseId,\n          completedLessons,\n          totalLessons,\n          testScore\n        })\n      });\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || 'Eroare la salvarea progresului');\n      }\n      console.log('Progresul la test salvat cu succes');\n    } catch (error) {\n      console.error('Eroare la salvarea progresului testului:', error);\n      setError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\n      if (isAccessibilityMode) {\n        announceError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\n      }\n    } finally {\n      setSaving(false);\n    }\n  }, [userId, courseId, totalLessons, authToken, isAccessibilityMode, announceLoading, announceError]);\n\n  // FIXAT: handleNext cu anunțuri îmbunătățite pentru răspunsuri corecte/incorecte\n  const handleNext = useCallback(() => {\n    if (isAnswerChecked) {\n      // Mergem la următoarea întrebare\n      if (currentQuestionIndex < questions.length - 1) {\n        const nextIndex = currentQuestionIndex + 1;\n        setCurrentQuestionIndex(nextIndex);\n        setIsAnswerChecked(false);\n        if (isAccessibilityMode) {\n          announceQuizProgress(nextIndex + 1, questions.length);\n          setTimeout(() => {\n            // FIXAT: Citim întrebarea cu punctuație\n            const questionWithPunctuation = readTextWithPunctuation(questions[nextIndex].question);\n            const optionsWithPunctuation = questions[nextIndex].options.map(readTextWithPunctuation);\n            announceQuestion(nextIndex + 1, questions.length, questionWithPunctuation, optionsWithPunctuation);\n          }, 1000);\n        }\n      } else {\n        // Finalizăm testul\n        const finalScore = Math.round(score / questions.length * 100);\n        saveProgress(finalScore);\n        setIsFinished(true);\n        if (isAccessibilityMode) {\n          setTimeout(() => {\n            announceQuizResult(score, questions.length);\n          }, 1000);\n        }\n      }\n    } else {\n      // Verificăm răspunsul\n      if (selectedAnswers[currentQuestionIndex] === undefined) {\n        const message = 'Te rugăm să selectezi un răspuns!';\n        alert(message);\n        if (isAccessibilityMode) {\n          announceError(message);\n        }\n        return;\n      }\n      const currentQuestion = questions[currentQuestionIndex];\n      const selectedAnswer = selectedAnswers[currentQuestionIndex];\n      const correctAnswerIndex = currentQuestion.correctAnswerIndex;\n      const isCorrect = selectedAnswer === correctAnswerIndex;\n      if (isCorrect) {\n        setScore(prevScore => prevScore + 1);\n      }\n      setIsAnswerChecked(true);\n\n      // FIXAT: Anunțuri îmbunătățite pentru răspunsuri cu citire punctuație\n      if (isAccessibilityMode) {\n        let message = '';\n        if (isCorrect) {\n          message = 'Răspuns corect! ';\n        } else {\n          const correctOption = readTextWithPunctuation(currentQuestion.options[correctAnswerIndex]);\n          message = `Răspuns incorect. Răspunsul corect este: ${correctAnswerIndex + 1}. ${correctOption}. `;\n        }\n        message += 'Apasă Enter pentru a continua la următoarea întrebare.';\n        setTimeout(() => {\n          announceAnswerSelected(selectedAnswer, message);\n        }, 500);\n      }\n    }\n  }, [isAnswerChecked, currentQuestionIndex, questions, selectedAnswers, score, saveProgress, isAccessibilityMode, announceQuestion, announceQuizProgress, announceQuizResult, announceError, announceAnswerSelected, readTextWithPunctuation]);\n\n  // FIXAT: Listener pentru comenzile rapide de accesibilitate\n  useEffect(() => {\n    if (!isAccessibilityMode) return;\n    const handleKeyPress = e => {\n      if (!isAccessibilityMode) return;\n\n      // Pentru sfârșitul quiz-ului - navigare îmbunătățită\n      if (isFinished) {\n        if (e.key === 'Tab') {\n          e.preventDefault();\n          const restartBtn = document.querySelector('button[aria-label*=\"Reîncep testul\"]');\n          const profileBtn = document.querySelector('button[aria-label*=\"Merg la pagina de profil\"]');\n          if (document.activeElement === restartBtn) {\n            profileBtn === null || profileBtn === void 0 ? void 0 : profileBtn.focus();\n            announceLoading('Focus pe butonul vizualizează profilul.');\n          } else {\n            restartBtn === null || restartBtn === void 0 ? void 0 : restartBtn.focus();\n            announceLoading('Focus pe butonul reia testul.');\n          }\n        }\n        return;\n      }\n\n      // Selectare răspuns cu tastele 1-4\n      if (['1', '2', '3', '4'].includes(e.key)) {\n        var _questions$currentQue;\n        const answerIndex = parseInt(e.key) - 1;\n        if (answerIndex < ((_questions$currentQue = questions[currentQuestionIndex]) === null || _questions$currentQue === void 0 ? void 0 : _questions$currentQue.options.length)) {\n          handleAnswerChange(currentQuestionIndex, answerIndex);\n          e.preventDefault();\n        }\n      }\n\n      // FIXAT: Enter pentru validare directă răspuns\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        e.stopPropagation();\n        if (isAnswerChecked) {\n          // Dacă răspunsul a fost deja verificat, mergem la următoarea întrebare\n          handleNext();\n        } else {\n          // Verificăm dacă avem un răspuns selectat\n          if (selectedAnswers[currentQuestionIndex] !== undefined) {\n            handleNext(); // Validăm direct răspunsul\n          } else {\n            const message = 'Te rugăm să selectezi un răspuns mai întâi!';\n            announceError(message);\n          }\n        }\n      }\n    };\n\n    // FIXAT: Adăugăm listener cu capture pentru prioritate\n    document.addEventListener('keydown', handleKeyPress, true);\n    return () => document.removeEventListener('keydown', handleKeyPress, true);\n  }, [isAccessibilityMode, currentQuestionIndex, questions, isFinished, selectedAnswers, isAnswerChecked, handleAnswerChange, handleNext, announceError, announceLoading]);\n  useEffect(() => {\n    const courseIdFromUrl = window.location.pathname.split('/')[2];\n    setCourseId(courseIdFromUrl);\n    if (!userId || !authToken) {\n      console.error('Utilizatorul nu este autentificat');\n      setError('Trebuie să fii autentificat pentru a susține testul.');\n      if (isAccessibilityMode) {\n        announceError('Trebuie să fii autentificat pentru a susține testul.');\n      }\n      return;\n    }\n    if (isAccessibilityMode) {\n      announceLoading('Se încarcă întrebările testului...');\n    }\n    fetch(`http://localhost:5000/api/courses/${courseIdFromUrl}`).then(response => response.json()).then(data => {\n      if (data.course && data.course.questions) {\n        setQuestions(data.course.questions);\n        setTotalLessons(data.course.totalLessons);\n        if (isAccessibilityMode) {\n          setTimeout(() => {\n            // FIXAT: Folosim funcția de citire cu punctuație pentru întrebări\n            const questionWithPunctuation = readTextWithPunctuation(data.course.questions[0].question);\n            const optionsWithPunctuation = data.course.questions[0].options.map(readTextWithPunctuation);\n            announceQuestion(1, data.course.questions.length, questionWithPunctuation, optionsWithPunctuation);\n          }, 1500);\n        }\n      }\n    }).catch(error => {\n      console.error('Error fetching questions:', error);\n      setError('Nu am putut încărca întrebările pentru test.');\n      if (isAccessibilityMode) {\n        announceError('Nu am putut încărca întrebările pentru test.');\n      }\n    });\n  }, [userId, authToken, isAccessibilityMode, readTextWithPunctuation, announceError, announceLoading, announceQuestion]);\n  const handleRestart = useCallback(() => {\n    setScore(0);\n    setCurrentQuestionIndex(0);\n    setSelectedAnswers([]);\n    setIsFinished(false);\n    setIsAnswerChecked(false);\n    setError(null);\n    if (isAccessibilityMode) {\n      setTimeout(() => {\n        // FIXAT: Citim prima întrebare cu punctuație\n        const questionWithPunctuation = readTextWithPunctuation(questions[0].question);\n        const optionsWithPunctuation = questions[0].options.map(readTextWithPunctuation);\n        announceQuestion(1, questions.length, questionWithPunctuation, optionsWithPunctuation);\n      }, 1000);\n    }\n  }, [isAccessibilityMode, questions, announceQuestion, readTextWithPunctuation]);\n  const handleBackToProfile = useCallback(() => {\n    if (isAccessibilityMode) {\n      announceLoading('Navighez la profil...');\n      sessionStorage.setItem('accessibilityModeActive', 'true');\n    }\n    navigate('/profile');\n  }, [navigate, isAccessibilityMode, announceLoading]);\n  if (error && !questions.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Eroare la \\xEEnc\\u0103rcarea testului\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 340,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(-1),\n        children: \"\\xCEnapoi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 341,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this);\n  }\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-loading\",\n      children: \"Se \\xEEncarc\\u0103 \\xEEntreb\\u0103rile...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 347,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [isAccessibilityMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accessibility-instructions\",\n      style: {\n        position: 'absolute',\n        left: '-9999px',\n        width: '1px',\n        height: '1px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Folose\\u0219te tastele 1-4 pentru a selecta r\\u0103spunsurile. Enter pentru a valida r\\u0103spunsul sau a trece la urm\\u0103toarea \\xEEntrebare.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\xCEntrebarea \", currentQuestionIndex + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), !isFinished ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          ...(isAccessibilityMode ? {\n            tabIndex: -1\n          } : {})\n        },\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.options.map((option, index) => {\n          let className = '';\n          if (selectedAnswers[currentQuestionIndex] === index) {\n            className = 'selected';\n          }\n          if (isAnswerChecked) {\n            if (index === questions[currentQuestionIndex].correctAnswerIndex) {\n              className = 'correct';\n            } else if (selectedAnswers[currentQuestionIndex] === index) {\n              className = 'incorrect';\n            }\n          }\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: className,\n            onClick: () => handleAnswerChange(currentQuestionIndex, index),\n            role: isAccessibilityMode ? \"button\" : undefined,\n            \"aria-label\": isAccessibilityMode ? `Opțiunea ${index + 1}: ${option}` : undefined,\n            tabIndex: isAccessibilityMode ? 0 : undefined,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: `question-${currentQuestionIndex}-option-${index}`,\n              name: `question-${currentQuestionIndex}`,\n              value: index,\n              checked: selectedAnswers[currentQuestionIndex] === index,\n              onChange: () => {},\n              style: {\n                ...(isAccessibilityMode ? {\n                  tabIndex: -1\n                } : {})\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 396,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `question-${currentQuestionIndex}-option-${index}`,\n              style: {\n                ...(isAccessibilityMode ? {\n                  tabIndex: -1\n                } : {})\n              },\n              children: [isAccessibilityMode && `${index + 1}. `, option]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 388,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNext,\n        disabled: saving,\n        \"aria-label\": isAccessibilityMode ? isAnswerChecked ? 'Treci la următoarea întrebare' : 'Verifică răspunsul selectat' : undefined,\n        children: isAnswerChecked ? 'Next' : 'Verifică Răspunsul'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-error-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 426,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Testul s-a \\xEEncheiat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Punctajul t\\u0103u: \", score, \" din \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score-percentage\",\n        children: [\"Ai ob\\u021Binut \", Math.round(score / questions.length * 100), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 435,\n        columnNumber: 11\n      }, this), saving && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Se salveaz\\u0103 rezultatul...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRestart,\n          \"aria-label\": isAccessibilityMode ? 'Reîncep testul de la început' : undefined,\n          autoFocus: isAccessibilityMode,\n          children: \"Reia testul\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 440,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToProfile,\n          \"aria-label\": isAccessibilityMode ? 'Merg la pagina de profil' : undefined,\n          children: \"Vizualizeaz\\u0103 profilul\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 447,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 5\n  }, this);\n}\n_s(AccessibleQuiz, \"1XiCnd4MvwThEXGO/Zvk7A6EGTA=\", false, function () {\n  return [useNavigate, useAccessibility, useQuizAccessibility];\n});\n_c = AccessibleQuiz;\nexport default AccessibleQuiz;\nvar _c;\n$RefreshReg$(_c, \"AccessibleQuiz\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","useAccessibility","jsxDEV","_jsxDEV","AccessibleQuiz","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","score","setScore","isFinished","setIsFinished","isAnswerChecked","setIsAnswerChecked","courseId","setCourseId","totalLessons","setTotalLessons","saving","setSaving","error","setError","navigate","isAccessibilityMode","useQuizAccessibility","announceLoading","announceError","announceQuestion","announceAnswerSelected","announceQuizProgress","announceQuizResult","userId","sessionStorage","getItem","authToken","readTextWithPunctuation","text","split","map","char","punctuationMap","join","handleAnswerChange","index","answerIndex","updatedAnswers","selectedOption","options","saveProgress","testScore","console","progressResponse","fetch","headers","progressData","json","currentProgress","find","p","_id","completedLessons","response","method","body","JSON","stringify","data","success","Error","message","log","handleNext","length","nextIndex","setTimeout","questionWithPunctuation","question","optionsWithPunctuation","finalScore","Math","round","undefined","alert","currentQuestion","selectedAnswer","correctAnswerIndex","isCorrect","prevScore","correctOption","handleKeyPress","e","key","preventDefault","restartBtn","document","querySelector","profileBtn","activeElement","focus","includes","_questions$currentQue","parseInt","stopPropagation","addEventListener","removeEventListener","courseIdFromUrl","window","location","pathname","then","course","catch","handleRestart","handleBackToProfile","setItem","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","position","left","width","height","tabIndex","option","role","type","id","name","value","checked","onChange","htmlFor","disabled","autoFocus","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/AccessibleQuiz.js"],"sourcesContent":["// src/components/AccessibleQuiz.js - Fixed ESLint warnings\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAccessibility } from '../hooks/useAccessibility';\r\nimport '../styles/Quiz.css';\r\n\r\nfunction AccessibleQuiz() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [isFinished, setIsFinished] = useState(false);\r\n  const [isAnswerChecked, setIsAnswerChecked] = useState(false);\r\n  const [courseId, setCourseId] = useState(null);\r\n  const [totalLessons, setTotalLessons] = useState(0);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n  const navigate = useNavigate();\r\n  const { isAccessibilityMode, useQuizAccessibility, announceLoading, announceError } = useAccessibility();\r\n  const { announceQuestion, announceAnswerSelected, announceQuizProgress, announceQuizResult } = useQuizAccessibility();\r\n\r\n  const userId = sessionStorage.getItem('userId');\r\n  const authToken = sessionStorage.getItem('authToken');\r\n\r\n  // Funcție pentru citirea textului cu punctuație (pentru întrebări de programare)\r\n  const readTextWithPunctuation = useCallback((text) => {\r\n    if (!text) return text;\r\n    \r\n    // Pentru întrebări de programare, citim punctuația important\r\n    return text.split('').map(char => {\r\n      const punctuationMap = {\r\n        '=': ' egal ',\r\n        ';': ' punct și virgulă ',\r\n        '(': ' paranteză deschisă ',\r\n        ')': ' paranteză închisă ',\r\n        '{': ' acoladă deschisă ',\r\n        '}': ' acoladă închisă ',\r\n        '[': ' paranteză pătrată deschisă ',\r\n        ']': ' paranteză pătrată închisă ',\r\n        '.': ' punct ',\r\n        ',': ' virgulă ',\r\n        ':': ' două puncte ',\r\n        '+': ' plus ',\r\n        '-': ' minus ',\r\n        '*': ' asterisc ',\r\n        '/': ' slash ',\r\n        '<': ' mai mic ',\r\n        '>': ' mai mare ',\r\n        '&': ' ampersand ',\r\n        '|': ' bară verticală '\r\n      };\r\n      return punctuationMap[char] || char;\r\n    }).join('');\r\n  }, []);\r\n\r\n  const handleAnswerChange = useCallback((index, answerIndex) => {\r\n    const updatedAnswers = [...selectedAnswers];\r\n    updatedAnswers[index] = answerIndex;\r\n    setSelectedAnswers(updatedAnswers);\r\n\r\n    if (isAccessibilityMode) {\r\n      // FIXAT: Citim opțiunea cu punctuație\r\n      const selectedOption = readTextWithPunctuation(questions[currentQuestionIndex].options[answerIndex]);\r\n      announceAnswerSelected(answerIndex, selectedOption);\r\n    }\r\n  }, [selectedAnswers, currentQuestionIndex, questions, isAccessibilityMode, announceAnswerSelected, readTextWithPunctuation]);\r\n\r\n  const saveProgress = useCallback(async (testScore) => {\r\n    if (!userId || !courseId) {\r\n      console.error('Lipsesc informații esențiale: userId sau courseId');\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n    \r\n    if (isAccessibilityMode) {\r\n      announceLoading('Se salvează rezultatul testului...');\r\n    }\r\n    \r\n    try {\r\n      const progressResponse = await fetch(`http://localhost:5000/api/user/progress/${userId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${authToken}`\r\n        }\r\n      });\r\n      const progressData = await progressResponse.json();\r\n      \r\n      const currentProgress = progressData.find(p => p.courseId._id === courseId);\r\n      const completedLessons = currentProgress ? currentProgress.completedLessons : totalLessons;\r\n\r\n      const response = await fetch('http://localhost:5000/api/user/progress', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authToken}`\r\n        },\r\n        body: JSON.stringify({\r\n          userId,\r\n          courseId,\r\n          completedLessons,\r\n          totalLessons,\r\n          testScore,\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!data.success) {\r\n        throw new Error(data.message || 'Eroare la salvarea progresului');\r\n      }\r\n      \r\n      console.log('Progresul la test salvat cu succes');\r\n    } catch (error) {\r\n      console.error('Eroare la salvarea progresului testului:', error);\r\n      setError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\r\n      if (isAccessibilityMode) {\r\n        announceError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\r\n      }\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  }, [userId, courseId, totalLessons, authToken, isAccessibilityMode, announceLoading, announceError]);\r\n\r\n  // FIXAT: handleNext cu anunțuri îmbunătățite pentru răspunsuri corecte/incorecte\r\n  const handleNext = useCallback(() => {\r\n    if (isAnswerChecked) {\r\n      // Mergem la următoarea întrebare\r\n      if (currentQuestionIndex < questions.length - 1) {\r\n        const nextIndex = currentQuestionIndex + 1;\r\n        setCurrentQuestionIndex(nextIndex);\r\n        setIsAnswerChecked(false);\r\n        \r\n        if (isAccessibilityMode) {\r\n          announceQuizProgress(nextIndex + 1, questions.length);\r\n          setTimeout(() => {\r\n            // FIXAT: Citim întrebarea cu punctuație\r\n            const questionWithPunctuation = readTextWithPunctuation(questions[nextIndex].question);\r\n            const optionsWithPunctuation = questions[nextIndex].options.map(readTextWithPunctuation);\r\n            \r\n            announceQuestion(\r\n              nextIndex + 1,\r\n              questions.length,\r\n              questionWithPunctuation,\r\n              optionsWithPunctuation\r\n            );\r\n          }, 1000);\r\n        }\r\n      } else {\r\n        // Finalizăm testul\r\n        const finalScore = Math.round((score / questions.length) * 100);\r\n        saveProgress(finalScore);\r\n        setIsFinished(true);\r\n        \r\n        if (isAccessibilityMode) {\r\n          setTimeout(() => {\r\n            announceQuizResult(score, questions.length);\r\n          }, 1000);\r\n        }\r\n      }\r\n    } else {\r\n      // Verificăm răspunsul\r\n      if (selectedAnswers[currentQuestionIndex] === undefined) {\r\n        const message = 'Te rugăm să selectezi un răspuns!';\r\n        alert(message);\r\n        if (isAccessibilityMode) {\r\n          announceError(message);\r\n        }\r\n        return;\r\n      }\r\n\r\n      const currentQuestion = questions[currentQuestionIndex];\r\n      const selectedAnswer = selectedAnswers[currentQuestionIndex];\r\n      const correctAnswerIndex = currentQuestion.correctAnswerIndex;\r\n      const isCorrect = selectedAnswer === correctAnswerIndex;\r\n\r\n      if (isCorrect) {\r\n        setScore(prevScore => prevScore + 1);\r\n      }\r\n\r\n      setIsAnswerChecked(true);\r\n      \r\n      // FIXAT: Anunțuri îmbunătățite pentru răspunsuri cu citire punctuație\r\n      if (isAccessibilityMode) {\r\n        let message = '';\r\n        if (isCorrect) {\r\n          message = 'Răspuns corect! ';\r\n        } else {\r\n          const correctOption = readTextWithPunctuation(currentQuestion.options[correctAnswerIndex]);\r\n          message = `Răspuns incorect. Răspunsul corect este: ${correctAnswerIndex + 1}. ${correctOption}. `;\r\n        }\r\n        message += 'Apasă Enter pentru a continua la următoarea întrebare.';\r\n        \r\n        setTimeout(() => {\r\n          announceAnswerSelected(selectedAnswer, message);\r\n        }, 500);\r\n      }\r\n    }\r\n  }, [isAnswerChecked, currentQuestionIndex, questions, selectedAnswers, score, saveProgress, isAccessibilityMode, announceQuestion, announceQuizProgress, announceQuizResult, announceError, announceAnswerSelected, readTextWithPunctuation]);\r\n\r\n  // FIXAT: Listener pentru comenzile rapide de accesibilitate\r\n  useEffect(() => {\r\n    if (!isAccessibilityMode) return;\r\n\r\n    const handleKeyPress = (e) => {\r\n      if (!isAccessibilityMode) return;\r\n\r\n      // Pentru sfârșitul quiz-ului - navigare îmbunătățită\r\n      if (isFinished) {\r\n        if (e.key === 'Tab') {\r\n          e.preventDefault();\r\n          const restartBtn = document.querySelector('button[aria-label*=\"Reîncep testul\"]');\r\n          const profileBtn = document.querySelector('button[aria-label*=\"Merg la pagina de profil\"]');\r\n          \r\n          if (document.activeElement === restartBtn) {\r\n            profileBtn?.focus();\r\n            announceLoading('Focus pe butonul vizualizează profilul.');\r\n          } else {\r\n            restartBtn?.focus();\r\n            announceLoading('Focus pe butonul reia testul.');\r\n          }\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Selectare răspuns cu tastele 1-4\r\n      if (['1', '2', '3', '4'].includes(e.key)) {\r\n        const answerIndex = parseInt(e.key) - 1;\r\n        if (answerIndex < questions[currentQuestionIndex]?.options.length) {\r\n          handleAnswerChange(currentQuestionIndex, answerIndex);\r\n          e.preventDefault();\r\n        }\r\n      }\r\n      \r\n      // FIXAT: Enter pentru validare directă răspuns\r\n      if (e.key === 'Enter') {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        \r\n        if (isAnswerChecked) {\r\n          // Dacă răspunsul a fost deja verificat, mergem la următoarea întrebare\r\n          handleNext();\r\n        } else {\r\n          // Verificăm dacă avem un răspuns selectat\r\n          if (selectedAnswers[currentQuestionIndex] !== undefined) {\r\n            handleNext(); // Validăm direct răspunsul\r\n          } else {\r\n            const message = 'Te rugăm să selectezi un răspuns mai întâi!';\r\n            announceError(message);\r\n          }\r\n        }\r\n      }\r\n    };\r\n\r\n    // FIXAT: Adăugăm listener cu capture pentru prioritate\r\n    document.addEventListener('keydown', handleKeyPress, true);\r\n    return () => document.removeEventListener('keydown', handleKeyPress, true);\r\n  }, [isAccessibilityMode, currentQuestionIndex, questions, isFinished, selectedAnswers, isAnswerChecked, handleAnswerChange, handleNext, announceError, announceLoading]);\r\n\r\n  useEffect(() => {\r\n    const courseIdFromUrl = window.location.pathname.split('/')[2];\r\n    setCourseId(courseIdFromUrl);\r\n\r\n    if (!userId || !authToken) {\r\n      console.error('Utilizatorul nu este autentificat');\r\n      setError('Trebuie să fii autentificat pentru a susține testul.');\r\n      if (isAccessibilityMode) {\r\n        announceError('Trebuie să fii autentificat pentru a susține testul.');\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (isAccessibilityMode) {\r\n      announceLoading('Se încarcă întrebările testului...');\r\n    }\r\n\r\n    fetch(`http://localhost:5000/api/courses/${courseIdFromUrl}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.course && data.course.questions) {\r\n          setQuestions(data.course.questions);\r\n          setTotalLessons(data.course.totalLessons);\r\n          \r\n          if (isAccessibilityMode) {\r\n            setTimeout(() => {\r\n              // FIXAT: Folosim funcția de citire cu punctuație pentru întrebări\r\n              const questionWithPunctuation = readTextWithPunctuation(data.course.questions[0].question);\r\n              const optionsWithPunctuation = data.course.questions[0].options.map(readTextWithPunctuation);\r\n              \r\n              announceQuestion(\r\n                1, \r\n                data.course.questions.length, \r\n                questionWithPunctuation, \r\n                optionsWithPunctuation\r\n              );\r\n            }, 1500);\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching questions:', error);\r\n        setError('Nu am putut încărca întrebările pentru test.');\r\n        if (isAccessibilityMode) {\r\n          announceError('Nu am putut încărca întrebările pentru test.');\r\n        }\r\n      });\r\n  }, [userId, authToken, isAccessibilityMode, readTextWithPunctuation, announceError, announceLoading, announceQuestion]);\r\n\r\n  const handleRestart = useCallback(() => {\r\n    setScore(0);\r\n    setCurrentQuestionIndex(0);\r\n    setSelectedAnswers([]);\r\n    setIsFinished(false);\r\n    setIsAnswerChecked(false);\r\n    setError(null);\r\n    \r\n    if (isAccessibilityMode) {\r\n      setTimeout(() => {\r\n        // FIXAT: Citim prima întrebare cu punctuație\r\n        const questionWithPunctuation = readTextWithPunctuation(questions[0].question);\r\n        const optionsWithPunctuation = questions[0].options.map(readTextWithPunctuation);\r\n        \r\n        announceQuestion(1, questions.length, questionWithPunctuation, optionsWithPunctuation);\r\n      }, 1000);\r\n    }\r\n  }, [isAccessibilityMode, questions, announceQuestion, readTextWithPunctuation]);\r\n\r\n  const handleBackToProfile = useCallback(() => {\r\n    if (isAccessibilityMode) {\r\n      announceLoading('Navighez la profil...');\r\n      sessionStorage.setItem('accessibilityModeActive', 'true');\r\n    }\r\n    navigate('/profile');\r\n  }, [navigate, isAccessibilityMode, announceLoading]);\r\n\r\n  if (error && !questions.length) {\r\n    return (\r\n      <div className=\"quiz-error\">\r\n        <h2>Eroare la încărcarea testului</h2>\r\n        <p>{error}</p>\r\n        <button onClick={() => navigate(-1)}>Înapoi</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (questions.length === 0) {\r\n    return <div className=\"quiz-loading\">Se încarcă întrebările...</div>;\r\n  }\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      {isAccessibilityMode && (\r\n        <div className=\"accessibility-instructions\" style={{ \r\n          position: 'absolute', \r\n          left: '-9999px',\r\n          width: '1px',\r\n          height: '1px' \r\n        }}>\r\n          <p>\r\n            Folosește tastele 1-4 pentru a selecta răspunsurile. Enter pentru a valida răspunsul sau a trece la următoarea întrebare.\r\n          </p>\r\n        </div>\r\n      )}\r\n      \r\n      <h2>Întrebarea {currentQuestionIndex + 1}</h2>\r\n\r\n      {!isFinished ? (\r\n        <div className=\"question-container\">\r\n          <h3 style={{ ...(isAccessibilityMode ? { tabIndex: -1 } : {}) }}>\r\n            {currentQuestion.question}\r\n          </h3>\r\n          <ul>\r\n            {currentQuestion.options.map((option, index) => {\r\n              let className = '';\r\n              if (selectedAnswers[currentQuestionIndex] === index) {\r\n                className = 'selected';\r\n              }\r\n              if (isAnswerChecked) {\r\n                if (index === questions[currentQuestionIndex].correctAnswerIndex) {\r\n                  className = 'correct';\r\n                } else if (selectedAnswers[currentQuestionIndex] === index) {\r\n                  className = 'incorrect';\r\n                }\r\n              }\r\n              return (\r\n                <li\r\n                  key={index}\r\n                  className={className}\r\n                  onClick={() => handleAnswerChange(currentQuestionIndex, index)}\r\n                  role={isAccessibilityMode ? \"button\" : undefined}\r\n                  aria-label={isAccessibilityMode ? `Opțiunea ${index + 1}: ${option}` : undefined}\r\n                  tabIndex={isAccessibilityMode ? 0 : undefined}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={`question-${currentQuestionIndex}-option-${index}`}\r\n                    name={`question-${currentQuestionIndex}`}\r\n                    value={index}\r\n                    checked={selectedAnswers[currentQuestionIndex] === index}\r\n                    onChange={() => {}}\r\n                    style={{ ...(isAccessibilityMode ? { tabIndex: -1 } : {}) }}\r\n                  />\r\n                  <label \r\n                    htmlFor={`question-${currentQuestionIndex}-option-${index}`}\r\n                    style={{ ...(isAccessibilityMode ? { tabIndex: -1 } : {}) }}\r\n                  >\r\n                    {isAccessibilityMode && `${index + 1}. `}{option}\r\n                  </label>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <button \r\n            onClick={handleNext}\r\n            disabled={saving}\r\n            aria-label={isAccessibilityMode ? \r\n              (isAnswerChecked ? 'Treci la următoarea întrebare' : 'Verifică răspunsul selectat') : \r\n              undefined\r\n            }\r\n          >\r\n            {isAnswerChecked ? 'Next' : 'Verifică Răspunsul'}\r\n          </button>\r\n          {error && (\r\n            <div className=\"quiz-error-message\">\r\n              <p>{error}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"result-container\">\r\n          <h3>Testul s-a încheiat</h3>\r\n          <p>Punctajul tău: {score} din {questions.length}</p>\r\n          <p className=\"score-percentage\">Ai obținut {Math.round((score / questions.length) * 100)}%</p>\r\n          \r\n          {saving && <p>Se salvează rezultatul...</p>}\r\n          \r\n          <div className=\"result-actions\">\r\n            <button \r\n              onClick={handleRestart}\r\n              aria-label={isAccessibilityMode ? 'Reîncep testul de la început' : undefined}\r\n              autoFocus={isAccessibilityMode}\r\n            >\r\n              Reia testul\r\n            </button>\r\n            <button \r\n              onClick={handleBackToProfile}\r\n              aria-label={isAccessibilityMode ? 'Merg la pagina de profil' : undefined}\r\n            >\r\n              Vizualizează profilul\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccessibleQuiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}