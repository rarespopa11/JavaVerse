{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\AccessibilityProvider.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/components/AccessibilityProvider.js\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useTextToSpeech } from '../hooks/useTextToSpeech';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AccessibilityContext = /*#__PURE__*/createContext();\nexport const useAccessibility = () => {\n  _s();\n  const context = useContext(AccessibilityContext);\n  if (!context) {\n    throw new Error('useAccessibility must be used within an AccessibilityProvider');\n  }\n  return context;\n};\n_s(useAccessibility, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AccessibilityProvider = ({\n  children\n}) => {\n  _s2();\n  const [isAccessibilityMode, setIsAccessibilityMode] = useState(false);\n  const [announcements, setAnnouncements] = useState([]);\n  const {\n    speak,\n    speakCode,\n    stop\n  } = useTextToSpeech();\n\n  // Funcție pentru anunțuri live către screen reader\n  const announce = (message, priority = 'polite') => {\n    if (!isAccessibilityMode) return; // Nu anunță dacă modul nu e activ\n\n    const announcement = {\n      id: Date.now(),\n      message,\n      priority,\n      timestamp: new Date()\n    };\n    setAnnouncements(prev => [...prev, announcement]);\n\n    // Vorbește mesajul\n    speak(message);\n\n    // Eliminăm anunțul după 5 secunde\n    setTimeout(() => {\n      setAnnouncements(prev => prev.filter(a => a.id !== announcement.id));\n    }, 5000);\n  };\n\n  // Funcție pentru navigare cu tastatura (doar în modul accessibility)\n  const handleKeyboardNavigation = (event, elementType, customHandler) => {\n    if (!isAccessibilityMode) return; // Nu funcționează dacă modul nu e activ\n\n    const {\n      key,\n      ctrlKey,\n      shiftKey\n    } = event;\n\n    // Comenzi speciale pentru nevăzători\n    if (ctrlKey && shiftKey) {\n      switch (key) {\n        case 'R':\n          event.preventDefault();\n          announce('Execuție cod începută', 'assertive');\n          if (customHandler !== null && customHandler !== void 0 && customHandler.runCode) customHandler.runCode();\n          break;\n        case 'A':\n          event.preventDefault();\n          announce('Se generează feedback AI vocal', 'assertive');\n          if (customHandler !== null && customHandler !== void 0 && customHandler.getAIFeedback) customHandler.getAIFeedback();\n          break;\n        case 'M':\n          event.preventDefault();\n          announce('Navigare la următoarea metodă', 'assertive');\n          if (customHandler !== null && customHandler !== void 0 && customHandler.navigateToMethod) customHandler.navigateToMethod();\n          break;\n        case 'V':\n          event.preventDefault();\n          announce('Navigare la următoarea variabilă', 'assertive');\n          if (customHandler !== null && customHandler !== void 0 && customHandler.navigateToVariable) customHandler.navigateToVariable();\n          break;\n        case 'L':\n          event.preventDefault();\n          announce('Citire semantică linie curentă', 'assertive');\n          if (customHandler !== null && customHandler !== void 0 && customHandler.readCurrentLine) customHandler.readCurrentLine();\n          break;\n        case 'H':\n          event.preventDefault();\n          announce('Afișare ajutor accessibility', 'assertive');\n          if (customHandler !== null && customHandler !== void 0 && customHandler.showAccessibilityHelp) customHandler.showAccessibilityHelp();\n          break;\n        case 'S':\n          event.preventDefault();\n          announce('Descriere structură cod', 'assertive');\n          if (customHandler !== null && customHandler !== void 0 && customHandler.describeStructure) customHandler.describeStructure();\n          break;\n        default:\n          // Nu facem nimic pentru alte combinații de taste\n          break;\n      }\n    }\n  };\n  const value = {\n    isAccessibilityMode,\n    setIsAccessibilityMode,\n    announcements,\n    announce,\n    handleKeyboardNavigation,\n    speak,\n    speakCode,\n    stop\n  };\n  return /*#__PURE__*/_jsxDEV(AccessibilityContext.Provider, {\n    value: value,\n    children: [children, isAccessibilityMode && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        \"aria-live\": \"polite\",\n        \"aria-atomic\": \"true\",\n        className: \"sr-only\",\n        id: \"accessibility-announcements-polite\",\n        children: announcements.filter(a => a.priority === 'polite').slice(-1).map(a => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: a.message\n        }, a.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        \"aria-live\": \"assertive\",\n        \"aria-atomic\": \"true\",\n        className: \"sr-only\",\n        id: \"accessibility-announcements-assertive\",\n        children: announcements.filter(a => a.priority === 'assertive').slice(-1).map(a => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: a.message\n        }, a.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 17\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n};\n_s2(AccessibilityProvider, \"D9uREj/NT0cuUBc/rN32dHEMIy0=\", false, function () {\n  return [useTextToSpeech];\n});\n_c = AccessibilityProvider;\nvar _c;\n$RefreshReg$(_c, \"AccessibilityProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useTextToSpeech","jsxDEV","_jsxDEV","Fragment","_Fragment","AccessibilityContext","useAccessibility","_s","context","Error","AccessibilityProvider","children","_s2","isAccessibilityMode","setIsAccessibilityMode","announcements","setAnnouncements","speak","speakCode","stop","announce","message","priority","announcement","id","Date","now","timestamp","prev","setTimeout","filter","a","handleKeyboardNavigation","event","elementType","customHandler","key","ctrlKey","shiftKey","preventDefault","runCode","getAIFeedback","navigateToMethod","navigateToVariable","readCurrentLine","showAccessibilityHelp","describeStructure","value","Provider","className","slice","map","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/AccessibilityProvider.js"],"sourcesContent":["// src/components/AccessibilityProvider.js\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useTextToSpeech } from '../hooks/useTextToSpeech';\r\n\r\nconst AccessibilityContext = createContext();\r\n\r\nexport const useAccessibility = () => {\r\n  const context = useContext(AccessibilityContext);\r\n  if (!context) {\r\n    throw new Error('useAccessibility must be used within an AccessibilityProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AccessibilityProvider = ({ children }) => {\r\n  const [isAccessibilityMode, setIsAccessibilityMode] = useState(false);\r\n  const [announcements, setAnnouncements] = useState([]);\r\n  const { speak, speakCode, stop } = useTextToSpeech();\r\n\r\n  // Funcție pentru anunțuri live către screen reader\r\n  const announce = (message, priority = 'polite') => {\r\n    if (!isAccessibilityMode) return; // Nu anunță dacă modul nu e activ\r\n    \r\n    const announcement = {\r\n      id: Date.now(),\r\n      message,\r\n      priority,\r\n      timestamp: new Date()\r\n    };\r\n    \r\n    setAnnouncements(prev => [...prev, announcement]);\r\n    \r\n    // Vorbește mesajul\r\n    speak(message);\r\n    \r\n    // Eliminăm anunțul după 5 secunde\r\n    setTimeout(() => {\r\n      setAnnouncements(prev => prev.filter(a => a.id !== announcement.id));\r\n    }, 5000);\r\n  };\r\n\r\n  // Funcție pentru navigare cu tastatura (doar în modul accessibility)\r\n  const handleKeyboardNavigation = (event, elementType, customHandler) => {\r\n    if (!isAccessibilityMode) return; // Nu funcționează dacă modul nu e activ\r\n    \r\n    const { key, ctrlKey, shiftKey } = event;\r\n    \r\n    // Comenzi speciale pentru nevăzători\r\n    if (ctrlKey && shiftKey) {\r\n      switch (key) {\r\n        case 'R':\r\n          event.preventDefault();\r\n          announce('Execuție cod începută', 'assertive');\r\n          if (customHandler?.runCode) customHandler.runCode();\r\n          break;\r\n        case 'A':\r\n          event.preventDefault();\r\n          announce('Se generează feedback AI vocal', 'assertive');\r\n          if (customHandler?.getAIFeedback) customHandler.getAIFeedback();\r\n          break;\r\n        case 'M':\r\n          event.preventDefault();\r\n          announce('Navigare la următoarea metodă', 'assertive');\r\n          if (customHandler?.navigateToMethod) customHandler.navigateToMethod();\r\n          break;\r\n        case 'V':\r\n          event.preventDefault();\r\n          announce('Navigare la următoarea variabilă', 'assertive');\r\n          if (customHandler?.navigateToVariable) customHandler.navigateToVariable();\r\n          break;\r\n        case 'L':\r\n          event.preventDefault();\r\n          announce('Citire semantică linie curentă', 'assertive');\r\n          if (customHandler?.readCurrentLine) customHandler.readCurrentLine();\r\n          break;\r\n        case 'H':\r\n          event.preventDefault();\r\n          announce('Afișare ajutor accessibility', 'assertive');\r\n          if (customHandler?.showAccessibilityHelp) customHandler.showAccessibilityHelp();\r\n          break;\r\n        case 'S':\r\n          event.preventDefault();\r\n          announce('Descriere structură cod', 'assertive');\r\n          if (customHandler?.describeStructure) customHandler.describeStructure();\r\n          break;\r\n        default:\r\n          // Nu facem nimic pentru alte combinații de taste\r\n          break;\r\n      }\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    isAccessibilityMode,\r\n    setIsAccessibilityMode,\r\n    announcements,\r\n    announce,\r\n    handleKeyboardNavigation,\r\n    speak,\r\n    speakCode,\r\n    stop\r\n  };\r\n\r\n  return (\r\n    <AccessibilityContext.Provider value={value}>\r\n      {children}\r\n      \r\n      {/* Live regions pentru anunțuri - doar dacă modul e activ */}\r\n      {isAccessibilityMode && (\r\n        <>\r\n          <div\r\n            aria-live=\"polite\"\r\n            aria-atomic=\"true\"\r\n            className=\"sr-only\"\r\n            id=\"accessibility-announcements-polite\"\r\n          >\r\n            {announcements\r\n              .filter(a => a.priority === 'polite')\r\n              .slice(-1)\r\n              .map(a => (\r\n                <div key={a.id}>{a.message}</div>\r\n              ))\r\n            }\r\n          </div>\r\n          \r\n          <div\r\n            aria-live=\"assertive\"\r\n            aria-atomic=\"true\"\r\n            className=\"sr-only\"\r\n            id=\"accessibility-announcements-assertive\"\r\n          >\r\n            {announcements\r\n              .filter(a => a.priority === 'assertive')\r\n              .slice(-1)\r\n              .map(a => (\r\n                <div key={a.id}>{a.message}</div>\r\n              ))\r\n            }\r\n          </div>\r\n        </>\r\n      )}\r\n    </AccessibilityContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}