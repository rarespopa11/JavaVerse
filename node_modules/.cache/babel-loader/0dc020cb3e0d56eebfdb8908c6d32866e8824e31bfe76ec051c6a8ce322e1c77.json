{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\AccessibleCodeEditor.js\",\n  _s = $RefreshSig$();\n// src/components/AccessibleCodeEditor.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { useAccessibility } from './AccessibilityProvider';\nimport { useToast } from './ToastProvider';\nimport '../styles/AccessibleCodeEditor.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AccessibleCodeEditor = ({\n  initialCode,\n  lessonId,\n  onChange,\n  editorKey\n}) => {\n  _s();\n  const defaultCode = `public class Main {\n    public static void main(String[] args) {\n        // Scrie codul tău aici\n        System.out.println(\"Bine ai venit la JavaVerse!\");\n    }\n}`;\n  const [code, setCode] = useState(initialCode || defaultCode);\n  const [cursorPosition, setCursorPosition] = useState(0);\n  const [currentLine, setCurrentLine] = useState(0);\n  const [output, setOutput] = useState('');\n  const [isRunning, setIsRunning] = useState(false);\n  const [feedback, setFeedback] = useState('');\n  const [showFeedback, setShowFeedback] = useState(false);\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\n  const editorRef = useRef(null);\n  const {\n    announce,\n    handleKeyboardNavigation,\n    isScreenReaderActive\n  } = useAccessibility();\n  const toast = useToast();\n\n  // Parser simplu pentru Java pentru detectare elemente\n  const parseJavaElements = code => {\n    const lines = code.split('\\n');\n    const elements = [];\n    lines.forEach((line, index) => {\n      const trimmedLine = line.trim();\n\n      // Detectare metode\n      if (trimmedLine.includes('public') && trimmedLine.includes('(') && trimmedLine.includes(')')) {\n        elements.push({\n          type: 'method',\n          line: index,\n          content: trimmedLine,\n          name: extractMethodName(trimmedLine)\n        });\n      }\n\n      // Detectare variabile\n      if (trimmedLine.match(/^\\s*(int|double|String|boolean|char)\\s+\\w+/)) {\n        elements.push({\n          type: 'variable',\n          line: index,\n          content: trimmedLine,\n          name: extractVariableName(trimmedLine)\n        });\n      }\n\n      // Detectare bucle\n      if (trimmedLine.includes('for') || trimmedLine.includes('while')) {\n        elements.push({\n          type: 'loop',\n          line: index,\n          content: trimmedLine\n        });\n      }\n\n      // Detectare condiționale\n      if (trimmedLine.includes('if') || trimmedLine.includes('else')) {\n        elements.push({\n          type: 'conditional',\n          line: index,\n          content: trimmedLine\n        });\n      }\n    });\n    return elements;\n  };\n  const extractMethodName = line => {\n    const match = line.match(/(\\w+)\\s*\\(/);\n    return match ? match[1] : 'metodă necunoscută';\n  };\n  const extractVariableName = line => {\n    const match = line.match(/^\\s*\\w+\\s+(\\w+)/);\n    return match ? match[1] : 'variabilă necunoscută';\n  };\n\n  // Funcție pentru citirea semantică a liniei curente\n  const readCurrentLineSemanticaly = () => {\n    const lines = code.split('\\n');\n    const currentLineText = lines[currentLine] || '';\n    const trimmedLine = currentLineText.trim();\n    let semanticDescription = '';\n    if (trimmedLine === '') {\n      semanticDescription = 'Linie goală';\n    } else if (trimmedLine.startsWith('//')) {\n      semanticDescription = `Comentariu: ${trimmedLine.substring(2).trim()}`;\n    } else if (trimmedLine.includes('public static void main')) {\n      semanticDescription = 'Metoda principală main care începe execuția programului';\n    } else if (trimmedLine.includes('System.out.println')) {\n      const content = trimmedLine.match(/println\\s*\\(\\s*\"([^\"]*)\"/);\n      semanticDescription = `Afișare text: ${content ? content[1] : 'conținut necunoscut'}`;\n    } else if (trimmedLine.match(/^\\s*(int|double|String|boolean|char)\\s+\\w+/)) {\n      const varMatch = trimmedLine.match(/^\\s*(\\w+)\\s+(\\w+)/);\n      if (varMatch) {\n        semanticDescription = `Declarare variabilă de tip ${varMatch[1]}, numele ${varMatch[2]}`;\n      }\n    } else if (trimmedLine.includes('for')) {\n      semanticDescription = 'Începutul unei bucle for pentru repetarea codului';\n    } else if (trimmedLine.includes('while')) {\n      semanticDescription = 'Începutul unei bucle while pentru repetarea condițională';\n    } else if (trimmedLine.includes('if')) {\n      semanticDescription = 'Instrucțiune condițională if pentru luarea deciziilor';\n    } else if (trimmedLine === '{') {\n      semanticDescription = 'Paranteză acoladă deschisă - începutul unui bloc de cod';\n    } else if (trimmedLine === '}') {\n      semanticDescription = 'Paranteză acoladă închisă - sfârșitul unui bloc de cod';\n    } else {\n      semanticDescription = `Linie de cod: ${trimmedLine}`;\n    }\n    announce(`Linia ${currentLine + 1}: ${semanticDescription}`, 'assertive');\n    return semanticDescription;\n  };\n\n  // Navigare la următoarea metodă\n  const navigateToNextMethod = () => {\n    const elements = parseJavaElements(code);\n    const methods = elements.filter(el => el.type === 'method');\n    const nextMethod = methods.find(method => method.line > currentLine);\n    if (nextMethod) {\n      setCurrentLine(nextMethod.line);\n      moveCursorToLine(nextMethod.line);\n      announce(`Navigat la metoda ${nextMethod.name} pe linia ${nextMethod.line + 1}`, 'assertive');\n    } else {\n      announce('Nu există metode după linia curentă', 'assertive');\n    }\n  };\n\n  // Navigare la următoarea variabilă\n  const navigateToNextVariable = () => {\n    const elements = parseJavaElements(code);\n    const variables = elements.filter(el => el.type === 'variable');\n    const nextVariable = variables.find(variable => variable.line > currentLine);\n    if (nextVariable) {\n      setCurrentLine(nextVariable.line);\n      moveCursorToLine(nextVariable.line);\n      announce(`Navigat la variabila ${nextVariable.name} pe linia ${nextVariable.line + 1}`, 'assertive');\n    } else {\n      announce('Nu există variabile după linia curentă', 'assertive');\n    }\n  };\n\n  // Mutare cursor la o anumită linie\n  const moveCursorToLine = lineNumber => {\n    if (editorRef.current) {\n      const lines = code.split('\\n');\n      let position = 0;\n      for (let i = 0; i < lineNumber && i < lines.length; i++) {\n        position += lines[i].length + 1; // +1 pentru \\n\n      }\n      editorRef.current.setSelectionRange(position, position);\n      editorRef.current.focus();\n      setCursorPosition(position);\n    }\n  };\n\n  // Descrierea structurii codului\n  const describeCodeStructure = () => {\n    const elements = parseJavaElements(code);\n    const methods = elements.filter(el => el.type === 'method');\n    const variables = elements.filter(el => el.type === 'variable');\n    const loops = elements.filter(el => el.type === 'loop');\n    const conditionals = elements.filter(el => el.type === 'conditional');\n    let description = `Structura codului: `;\n    description += `${methods.length} metode, `;\n    description += `${variables.length} variabile, `;\n    description += `${loops.length} bucle, `;\n    description += `${conditionals.length} instrucțiuni condiționale. `;\n    if (methods.length > 0) {\n      description += `Metodele sunt: ${methods.map(m => m.name).join(', ')}. `;\n    }\n    announce(description, 'assertive');\n    return description;\n  };\n\n  // Afișarea ajutorului pentru accessibility\n  const showAccessibilityHelp = () => {\n    const helpText = `Comenzi disponibile pentru accessibility:\nControl+Shift+R: Rulează codul\nControl+Shift+A: Obține feedback AI vocal\nControl+Shift+M: Navighează la următoarea metodă\nControl+Shift+V: Navighează la următoarea variabilă\nControl+Shift+L: Citește linia curentă semantic\nControl+Shift+H: Afișează acest ajutor\nControl+Shift+S: Descrie structura codului`;\n    announce(helpText, 'assertive');\n    setShowFeedback(true);\n    setFeedback(helpText);\n  };\n\n  // Executarea codului cu feedback audio\n  const runCodeWithAccessibility = async () => {\n    announce('Începe execuția codului', 'assertive');\n    setIsRunning(true);\n    setOutput('Se execută codul...');\n    try {\n      const token = sessionStorage.getItem('authToken');\n      const response = await fetch('http://localhost:5000/api/execute-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          code\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        const successMessage = `Execuție reușită. Rezultat: ${data.output || 'Programul s-a executat fără erori'}`;\n        setOutput(data.output || 'Programul s-a executat cu succes!');\n        announce(successMessage, 'assertive');\n        toast.success('Execuție reușită!');\n      } else {\n        const errorMessage = `Eroare de execuție: ${data.error}`;\n        setOutput(`Eroare: ${data.error}`);\n        announce(errorMessage, 'assertive');\n        toast.error('Eroare la execuție');\n      }\n    } catch (error) {\n      const errorMessage = `Eroare de comunicare: ${error.message}`;\n      setOutput(`Eroare: ${error.message}`);\n      announce(errorMessage, 'assertive');\n      toast.error('Eroare de rețea');\n    } finally {\n      setIsRunning(false);\n    }\n  };\n\n  // Obținerea feedback-ului AI cu citire vocală\n  const getAIFeedbackAccessible = async () => {\n    announce('Se generează feedback AI pentru cod', 'assertive');\n    setIsAnalyzing(true);\n    setFeedback('Se analizează codul...');\n    setShowFeedback(true);\n    try {\n      const token = sessionStorage.getItem('authToken');\n      const response = await fetch('http://localhost:5000/api/analyze-code', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`\n        },\n        body: JSON.stringify({\n          code: code,\n          lessonId: lessonId\n        })\n      });\n      const data = await response.json();\n      if (data.success) {\n        setFeedback(data.feedback);\n        announce(`Feedback AI generat. ${data.feedback}`, 'assertive');\n        toast.success('Feedback generat cu succes!');\n      } else {\n        const errorMessage = 'Nu am putut genera feedback pentru acest cod.';\n        setFeedback(errorMessage);\n        announce(errorMessage, 'assertive');\n        toast.error('Eroare la generarea feedback-ului');\n      }\n    } catch (error) {\n      const errorMessage = `Eroare la obținerea feedback-ului: ${error.message}`;\n      setFeedback(errorMessage);\n      announce(errorMessage, 'assertive');\n      toast.error('Eroare de comunicare');\n    } finally {\n      setIsAnalyzing(false);\n    }\n  };\n\n  // Gestionarea schimbărilor în editor\n  const handleCodeChange = event => {\n    const newCode = event.target.value;\n    setCode(newCode);\n\n    // Calculăm linia curentă\n    const cursorPos = event.target.selectionStart;\n    const textBeforeCursor = newCode.substring(0, cursorPos);\n    const lineNumber = (textBeforeCursor.match(/\\n/g) || []).length;\n    setCurrentLine(lineNumber);\n    setCursorPosition(cursorPos);\n    if (onChange) {\n      onChange(newCode);\n    }\n  };\n\n  // Gestionarea navigării cu tastatura\n  const handleKeyDown = event => {\n    handleKeyboardNavigation(event, 'code-editor', {\n      runCode: runCodeWithAccessibility,\n      getAIFeedback: getAIFeedbackAccessible,\n      navigateToMethod: navigateToNextMethod,\n      navigateToVariable: navigateToNextVariable,\n      readCurrentLine: readCurrentLineSemanticaly,\n      showAccessibilityHelp: showAccessibilityHelp,\n      describeStructure: describeCodeStructure\n    });\n  };\n\n  // Resetarea codului\n  const handleResetCode = () => {\n    if (window.confirm('Sigur dorești să resetezi codul? Toate modificările vor fi pierdute.')) {\n      const codeToReset = initialCode || defaultCode;\n      setCode(codeToReset);\n      announce('Codul a fost resetat la versiunea inițială', 'assertive');\n      toast.info('Codul a fost resetat.');\n    }\n  };\n  useEffect(() => {\n    if (initialCode && initialCode !== code) {\n      setCode(initialCode);\n    }\n  }, [initialCode, editorKey]);\n\n  // Anunțăm când editorul este gata\n  useEffect(() => {\n    if (isScreenReaderActive) {\n      announce('Editor de cod Java încărcat și gata pentru utilizare. Apasă Control+Shift+H pentru ajutor.', 'polite');\n    }\n  }, [isScreenReaderActive, announce]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"accessible-code-editor-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"editor-instructions\",\n      className: \"sr-only\",\n      children: [\"Editor de cod Java cu suport complet pentru accessibility. Folose\\u0219te Control+Shift+H pentru lista complet\\u0103 de comenzi. Linia curent\\u0103: \", currentLine + 1, \". Pozi\\u021Bia cursorului: \", cursorPosition, \".\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-header\",\n      role: \"banner\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        id: \"editor-title\",\n        children: \"Editor de cod Java accesibil\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-status\",\n        \"aria-live\": \"polite\",\n        \"aria-label\": `Linia ${currentLine + 1}, poziția ${cursorPosition}`,\n        children: [\"Linia \", currentLine + 1, \" / Pozi\\u021Bia \", cursorPosition]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"editor-actions\",\n        role: \"toolbar\",\n        \"aria-label\": \"Ac\\u021Biuni editor\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleResetCode,\n          \"aria-label\": \"Reseteaz\\u0103 codul la versiunea ini\\u021Bial\\u0103\",\n          className: \"action-button reset-button\",\n          children: \"\\uD83D\\uDD04 Reseteaz\\u0103\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: getAIFeedbackAccessible,\n          disabled: isAnalyzing,\n          \"aria-label\": \"Ob\\u021Bine feedback AI vocal pentru cod\",\n          className: \"action-button ai-button\",\n          children: isAnalyzing ? '⏳ Se analizează...' : '🤖 Feedback AI'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 376,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: runCodeWithAccessibility,\n          disabled: isRunning,\n          \"aria-label\": \"Execut\\u0103 codul Java\",\n          className: \"action-button run-button\",\n          children: isRunning ? '⏳ Se execută...' : '▶️ Rulează'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"editor-wrapper\",\n      role: \"main\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"code-textarea\",\n        className: \"sr-only\",\n        children: \"Editor de cod Java. Folose\\u0219te Control+Shift pentru comenzi speciale de accessibility.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        ref: editorRef,\n        id: \"code-textarea\",\n        className: \"code-textarea\",\n        value: code,\n        onChange: handleCodeChange,\n        onKeyDown: handleKeyDown,\n        role: \"textbox\",\n        \"aria-label\": \"Editor de cod Java\",\n        \"aria-multiline\": \"true\",\n        \"aria-describedby\": \"editor-instructions\",\n        spellCheck: \"false\",\n        autoComplete: \"off\",\n        rows: 20,\n        cols: 80\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output-container\",\n      role: \"region\",\n      \"aria-label\": \"Rezultatul execu\\u021Biei\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"output-header\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          id: \"output-title\",\n          children: \"Rezultatul execu\\u021Biei\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 421,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"output-content\",\n        \"aria-labelledby\": \"output-title\",\n        \"aria-live\": \"polite\",\n        children: output || 'Rulează codul pentru a vedea rezultatul'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 423,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 419,\n      columnNumber: 7\n    }, this), showFeedback && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feedback-container\",\n      role: \"region\",\n      \"aria-label\": \"Feedback AI pentru cod\",\n      \"aria-live\": \"polite\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feedback-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          id: \"feedback-title\",\n          children: \"Feedback AI\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-feedback\",\n          onClick: () => setShowFeedback(false),\n          \"aria-label\": \"\\xCEnchide feedback AI\",\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 442,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feedback-content\",\n        \"aria-labelledby\": \"feedback-title\",\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 349,\n    columnNumber: 5\n  }, this);\n};\n_s(AccessibleCodeEditor, \"Y8heqZIYpyck11t3sxRLCKqw1k4=\", false, function () {\n  return [useAccessibility, useToast];\n});\n_c = AccessibleCodeEditor;\nexport default AccessibleCodeEditor;\nvar _c;\n$RefreshReg$(_c, \"AccessibleCodeEditor\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useAccessibility","useToast","jsxDEV","_jsxDEV","AccessibleCodeEditor","initialCode","lessonId","onChange","editorKey","_s","defaultCode","code","setCode","cursorPosition","setCursorPosition","currentLine","setCurrentLine","output","setOutput","isRunning","setIsRunning","feedback","setFeedback","showFeedback","setShowFeedback","isAnalyzing","setIsAnalyzing","editorRef","announce","handleKeyboardNavigation","isScreenReaderActive","toast","parseJavaElements","lines","split","elements","forEach","line","index","trimmedLine","trim","includes","push","type","content","name","extractMethodName","match","extractVariableName","readCurrentLineSemanticaly","currentLineText","semanticDescription","startsWith","substring","varMatch","navigateToNextMethod","methods","filter","el","nextMethod","find","method","moveCursorToLine","navigateToNextVariable","variables","nextVariable","variable","lineNumber","current","position","i","length","setSelectionRange","focus","describeCodeStructure","loops","conditionals","description","map","m","join","showAccessibilityHelp","helpText","runCodeWithAccessibility","token","sessionStorage","getItem","response","fetch","headers","body","JSON","stringify","data","json","success","successMessage","errorMessage","error","message","getAIFeedbackAccessible","handleCodeChange","event","newCode","target","value","cursorPos","selectionStart","textBeforeCursor","handleKeyDown","runCode","getAIFeedback","navigateToMethod","navigateToVariable","readCurrentLine","describeStructure","handleResetCode","window","confirm","codeToReset","info","className","children","id","fileName","_jsxFileName","columnNumber","role","onClick","disabled","htmlFor","ref","onKeyDown","spellCheck","autoComplete","rows","cols","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/AccessibleCodeEditor.js"],"sourcesContent":["// src/components/AccessibleCodeEditor.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { useAccessibility } from './AccessibilityProvider';\r\nimport { useToast } from './ToastProvider';\r\nimport '../styles/AccessibleCodeEditor.css';\r\n\r\nconst AccessibleCodeEditor = ({ initialCode, lessonId, onChange, editorKey }) => {\r\n  const defaultCode = `public class Main {\r\n    public static void main(String[] args) {\r\n        // Scrie codul tău aici\r\n        System.out.println(\"Bine ai venit la JavaVerse!\");\r\n    }\r\n}`;\r\n\r\n  const [code, setCode] = useState(initialCode || defaultCode);\r\n  const [cursorPosition, setCursorPosition] = useState(0);\r\n  const [currentLine, setCurrentLine] = useState(0);\r\n  const [output, setOutput] = useState('');\r\n  const [isRunning, setIsRunning] = useState(false);\r\n  const [feedback, setFeedback] = useState('');\r\n  const [showFeedback, setShowFeedback] = useState(false);\r\n  const [isAnalyzing, setIsAnalyzing] = useState(false);\r\n\r\n  const editorRef = useRef(null);\r\n  const { announce, handleKeyboardNavigation, isScreenReaderActive } = useAccessibility();\r\n  const toast = useToast();\r\n\r\n  // Parser simplu pentru Java pentru detectare elemente\r\n  const parseJavaElements = (code) => {\r\n    const lines = code.split('\\n');\r\n    const elements = [];\r\n\r\n    lines.forEach((line, index) => {\r\n      const trimmedLine = line.trim();\r\n      \r\n      // Detectare metode\r\n      if (trimmedLine.includes('public') && trimmedLine.includes('(') && trimmedLine.includes(')')) {\r\n        elements.push({\r\n          type: 'method',\r\n          line: index,\r\n          content: trimmedLine,\r\n          name: extractMethodName(trimmedLine)\r\n        });\r\n      }\r\n      \r\n      // Detectare variabile\r\n      if (trimmedLine.match(/^\\s*(int|double|String|boolean|char)\\s+\\w+/)) {\r\n        elements.push({\r\n          type: 'variable',\r\n          line: index,\r\n          content: trimmedLine,\r\n          name: extractVariableName(trimmedLine)\r\n        });\r\n      }\r\n      \r\n      // Detectare bucle\r\n      if (trimmedLine.includes('for') || trimmedLine.includes('while')) {\r\n        elements.push({\r\n          type: 'loop',\r\n          line: index,\r\n          content: trimmedLine\r\n        });\r\n      }\r\n      \r\n      // Detectare condiționale\r\n      if (trimmedLine.includes('if') || trimmedLine.includes('else')) {\r\n        elements.push({\r\n          type: 'conditional',\r\n          line: index,\r\n          content: trimmedLine\r\n        });\r\n      }\r\n    });\r\n\r\n    return elements;\r\n  };\r\n\r\n  const extractMethodName = (line) => {\r\n    const match = line.match(/(\\w+)\\s*\\(/);\r\n    return match ? match[1] : 'metodă necunoscută';\r\n  };\r\n\r\n  const extractVariableName = (line) => {\r\n    const match = line.match(/^\\s*\\w+\\s+(\\w+)/);\r\n    return match ? match[1] : 'variabilă necunoscută';\r\n  };\r\n\r\n  // Funcție pentru citirea semantică a liniei curente\r\n  const readCurrentLineSemanticaly = () => {\r\n    const lines = code.split('\\n');\r\n    const currentLineText = lines[currentLine] || '';\r\n    const trimmedLine = currentLineText.trim();\r\n    \r\n    let semanticDescription = '';\r\n    \r\n    if (trimmedLine === '') {\r\n      semanticDescription = 'Linie goală';\r\n    } else if (trimmedLine.startsWith('//')) {\r\n      semanticDescription = `Comentariu: ${trimmedLine.substring(2).trim()}`;\r\n    } else if (trimmedLine.includes('public static void main')) {\r\n      semanticDescription = 'Metoda principală main care începe execuția programului';\r\n    } else if (trimmedLine.includes('System.out.println')) {\r\n      const content = trimmedLine.match(/println\\s*\\(\\s*\"([^\"]*)\"/);\r\n      semanticDescription = `Afișare text: ${content ? content[1] : 'conținut necunoscut'}`;\r\n    } else if (trimmedLine.match(/^\\s*(int|double|String|boolean|char)\\s+\\w+/)) {\r\n      const varMatch = trimmedLine.match(/^\\s*(\\w+)\\s+(\\w+)/);\r\n      if (varMatch) {\r\n        semanticDescription = `Declarare variabilă de tip ${varMatch[1]}, numele ${varMatch[2]}`;\r\n      }\r\n    } else if (trimmedLine.includes('for')) {\r\n      semanticDescription = 'Începutul unei bucle for pentru repetarea codului';\r\n    } else if (trimmedLine.includes('while')) {\r\n      semanticDescription = 'Începutul unei bucle while pentru repetarea condițională';\r\n    } else if (trimmedLine.includes('if')) {\r\n      semanticDescription = 'Instrucțiune condițională if pentru luarea deciziilor';\r\n    } else if (trimmedLine === '{') {\r\n      semanticDescription = 'Paranteză acoladă deschisă - începutul unui bloc de cod';\r\n    } else if (trimmedLine === '}') {\r\n      semanticDescription = 'Paranteză acoladă închisă - sfârșitul unui bloc de cod';\r\n    } else {\r\n      semanticDescription = `Linie de cod: ${trimmedLine}`;\r\n    }\r\n    \r\n    announce(`Linia ${currentLine + 1}: ${semanticDescription}`, 'assertive');\r\n    return semanticDescription;\r\n  };\r\n\r\n  // Navigare la următoarea metodă\r\n  const navigateToNextMethod = () => {\r\n    const elements = parseJavaElements(code);\r\n    const methods = elements.filter(el => el.type === 'method');\r\n    const nextMethod = methods.find(method => method.line > currentLine);\r\n    \r\n    if (nextMethod) {\r\n      setCurrentLine(nextMethod.line);\r\n      moveCursorToLine(nextMethod.line);\r\n      announce(`Navigat la metoda ${nextMethod.name} pe linia ${nextMethod.line + 1}`, 'assertive');\r\n    } else {\r\n      announce('Nu există metode după linia curentă', 'assertive');\r\n    }\r\n  };\r\n\r\n  // Navigare la următoarea variabilă\r\n  const navigateToNextVariable = () => {\r\n    const elements = parseJavaElements(code);\r\n    const variables = elements.filter(el => el.type === 'variable');\r\n    const nextVariable = variables.find(variable => variable.line > currentLine);\r\n    \r\n    if (nextVariable) {\r\n      setCurrentLine(nextVariable.line);\r\n      moveCursorToLine(nextVariable.line);\r\n      announce(`Navigat la variabila ${nextVariable.name} pe linia ${nextVariable.line + 1}`, 'assertive');\r\n    } else {\r\n      announce('Nu există variabile după linia curentă', 'assertive');\r\n    }\r\n  };\r\n\r\n  // Mutare cursor la o anumită linie\r\n  const moveCursorToLine = (lineNumber) => {\r\n    if (editorRef.current) {\r\n      const lines = code.split('\\n');\r\n      let position = 0;\r\n      for (let i = 0; i < lineNumber && i < lines.length; i++) {\r\n        position += lines[i].length + 1; // +1 pentru \\n\r\n      }\r\n      editorRef.current.setSelectionRange(position, position);\r\n      editorRef.current.focus();\r\n      setCursorPosition(position);\r\n    }\r\n  };\r\n\r\n  // Descrierea structurii codului\r\n  const describeCodeStructure = () => {\r\n    const elements = parseJavaElements(code);\r\n    const methods = elements.filter(el => el.type === 'method');\r\n    const variables = elements.filter(el => el.type === 'variable');\r\n    const loops = elements.filter(el => el.type === 'loop');\r\n    const conditionals = elements.filter(el => el.type === 'conditional');\r\n    \r\n    let description = `Structura codului: `;\r\n    description += `${methods.length} metode, `;\r\n    description += `${variables.length} variabile, `;\r\n    description += `${loops.length} bucle, `;\r\n    description += `${conditionals.length} instrucțiuni condiționale. `;\r\n    \r\n    if (methods.length > 0) {\r\n      description += `Metodele sunt: ${methods.map(m => m.name).join(', ')}. `;\r\n    }\r\n    \r\n    announce(description, 'assertive');\r\n    return description;\r\n  };\r\n\r\n  // Afișarea ajutorului pentru accessibility\r\n  const showAccessibilityHelp = () => {\r\n    const helpText = `Comenzi disponibile pentru accessibility:\r\nControl+Shift+R: Rulează codul\r\nControl+Shift+A: Obține feedback AI vocal\r\nControl+Shift+M: Navighează la următoarea metodă\r\nControl+Shift+V: Navighează la următoarea variabilă\r\nControl+Shift+L: Citește linia curentă semantic\r\nControl+Shift+H: Afișează acest ajutor\r\nControl+Shift+S: Descrie structura codului`;\r\n    \r\n    announce(helpText, 'assertive');\r\n    setShowFeedback(true);\r\n    setFeedback(helpText);\r\n  };\r\n\r\n  // Executarea codului cu feedback audio\r\n  const runCodeWithAccessibility = async () => {\r\n    announce('Începe execuția codului', 'assertive');\r\n    setIsRunning(true);\r\n    setOutput('Se execută codul...');\r\n\r\n    try {\r\n      const token = sessionStorage.getItem('authToken');\r\n      \r\n      const response = await fetch('http://localhost:5000/api/execute-code', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({ code })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        const successMessage = `Execuție reușită. Rezultat: ${data.output || 'Programul s-a executat fără erori'}`;\r\n        setOutput(data.output || 'Programul s-a executat cu succes!');\r\n        announce(successMessage, 'assertive');\r\n        toast.success('Execuție reușită!');\r\n      } else {\r\n        const errorMessage = `Eroare de execuție: ${data.error}`;\r\n        setOutput(`Eroare: ${data.error}`);\r\n        announce(errorMessage, 'assertive');\r\n        toast.error('Eroare la execuție');\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = `Eroare de comunicare: ${error.message}`;\r\n      setOutput(`Eroare: ${error.message}`);\r\n      announce(errorMessage, 'assertive');\r\n      toast.error('Eroare de rețea');\r\n    } finally {\r\n      setIsRunning(false);\r\n    }\r\n  };\r\n\r\n  // Obținerea feedback-ului AI cu citire vocală\r\n  const getAIFeedbackAccessible = async () => {\r\n    announce('Se generează feedback AI pentru cod', 'assertive');\r\n    setIsAnalyzing(true);\r\n    setFeedback('Se analizează codul...');\r\n    setShowFeedback(true);\r\n\r\n    try {\r\n      const token = sessionStorage.getItem('authToken');\r\n      \r\n      const response = await fetch('http://localhost:5000/api/analyze-code', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${token}`\r\n        },\r\n        body: JSON.stringify({ \r\n          code: code,\r\n          lessonId: lessonId \r\n        })\r\n      });\r\n\r\n      const data = await response.json();\r\n      \r\n      if (data.success) {\r\n        setFeedback(data.feedback);\r\n        announce(`Feedback AI generat. ${data.feedback}`, 'assertive');\r\n        toast.success('Feedback generat cu succes!');\r\n      } else {\r\n        const errorMessage = 'Nu am putut genera feedback pentru acest cod.';\r\n        setFeedback(errorMessage);\r\n        announce(errorMessage, 'assertive');\r\n        toast.error('Eroare la generarea feedback-ului');\r\n      }\r\n    } catch (error) {\r\n      const errorMessage = `Eroare la obținerea feedback-ului: ${error.message}`;\r\n      setFeedback(errorMessage);\r\n      announce(errorMessage, 'assertive');\r\n      toast.error('Eroare de comunicare');\r\n    } finally {\r\n      setIsAnalyzing(false);\r\n    }\r\n  };\r\n\r\n  // Gestionarea schimbărilor în editor\r\n  const handleCodeChange = (event) => {\r\n    const newCode = event.target.value;\r\n    setCode(newCode);\r\n    \r\n    // Calculăm linia curentă\r\n    const cursorPos = event.target.selectionStart;\r\n    const textBeforeCursor = newCode.substring(0, cursorPos);\r\n    const lineNumber = (textBeforeCursor.match(/\\n/g) || []).length;\r\n    setCurrentLine(lineNumber);\r\n    setCursorPosition(cursorPos);\r\n    \r\n    if (onChange) {\r\n      onChange(newCode);\r\n    }\r\n  };\r\n\r\n  // Gestionarea navigării cu tastatura\r\n  const handleKeyDown = (event) => {\r\n    handleKeyboardNavigation(event, 'code-editor', {\r\n      runCode: runCodeWithAccessibility,\r\n      getAIFeedback: getAIFeedbackAccessible,\r\n      navigateToMethod: navigateToNextMethod,\r\n      navigateToVariable: navigateToNextVariable,\r\n      readCurrentLine: readCurrentLineSemanticaly,\r\n      showAccessibilityHelp: showAccessibilityHelp,\r\n      describeStructure: describeCodeStructure\r\n    });\r\n  };\r\n\r\n  // Resetarea codului\r\n  const handleResetCode = () => {\r\n    if (window.confirm('Sigur dorești să resetezi codul? Toate modificările vor fi pierdute.')) {\r\n      const codeToReset = initialCode || defaultCode;\r\n      setCode(codeToReset);\r\n      announce('Codul a fost resetat la versiunea inițială', 'assertive');\r\n      toast.info('Codul a fost resetat.');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (initialCode && initialCode !== code) {\r\n      setCode(initialCode);\r\n    }\r\n  }, [initialCode, editorKey]);\r\n\r\n  // Anunțăm când editorul este gata\r\n  useEffect(() => {\r\n    if (isScreenReaderActive) {\r\n      announce('Editor de cod Java încărcat și gata pentru utilizare. Apasă Control+Shift+H pentru ajutor.', 'polite');\r\n    }\r\n  }, [isScreenReaderActive, announce]);\r\n\r\n  return (\r\n    <div className=\"accessible-code-editor-container\">\r\n      {/* Instrucțiuni pentru screen reader */}\r\n      <div id=\"editor-instructions\" className=\"sr-only\">\r\n        Editor de cod Java cu suport complet pentru accessibility.\r\n        Folosește Control+Shift+H pentru lista completă de comenzi.\r\n        Linia curentă: {currentLine + 1}.\r\n        Poziția cursorului: {cursorPosition}.\r\n      </div>\r\n\r\n      {/* Header cu informații și acțiuni */}\r\n      <div className=\"editor-header\" role=\"banner\">\r\n        <h3 id=\"editor-title\">Editor de cod Java accesibil</h3>\r\n        <div \r\n          className=\"editor-status\" \r\n          aria-live=\"polite\"\r\n          aria-label={`Linia ${currentLine + 1}, poziția ${cursorPosition}`}\r\n        >\r\n          Linia {currentLine + 1} / Poziția {cursorPosition}\r\n        </div>\r\n        <div className=\"editor-actions\" role=\"toolbar\" aria-label=\"Acțiuni editor\">\r\n          <button \r\n            onClick={handleResetCode}\r\n            aria-label=\"Resetează codul la versiunea inițială\"\r\n            className=\"action-button reset-button\"\r\n          >\r\n            🔄 Resetează\r\n          </button>\r\n          <button \r\n            onClick={getAIFeedbackAccessible}\r\n            disabled={isAnalyzing}\r\n            aria-label=\"Obține feedback AI vocal pentru cod\"\r\n            className=\"action-button ai-button\"\r\n          >\r\n            {isAnalyzing ? '⏳ Se analizează...' : '🤖 Feedback AI'}\r\n          </button>\r\n          <button \r\n            onClick={runCodeWithAccessibility}\r\n            disabled={isRunning}\r\n            aria-label=\"Execută codul Java\"\r\n            className=\"action-button run-button\"\r\n          >\r\n            {isRunning ? '⏳ Se execută...' : '▶️ Rulează'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Editorul principal */}\r\n      <div className=\"editor-wrapper\" role=\"main\">\r\n        <label htmlFor=\"code-textarea\" className=\"sr-only\">\r\n          Editor de cod Java. Folosește Control+Shift pentru comenzi speciale de accessibility.\r\n        </label>\r\n        <textarea\r\n          ref={editorRef}\r\n          id=\"code-textarea\"\r\n          className=\"code-textarea\"\r\n          value={code}\r\n          onChange={handleCodeChange}\r\n          onKeyDown={handleKeyDown}\r\n          role=\"textbox\"\r\n          aria-label=\"Editor de cod Java\"\r\n          aria-multiline=\"true\"\r\n          aria-describedby=\"editor-instructions\"\r\n          spellCheck=\"false\"\r\n          autoComplete=\"off\"\r\n          rows={20}\r\n          cols={80}\r\n        />\r\n      </div>\r\n\r\n      {/* Zona de output */}\r\n      <div className=\"output-container\" role=\"region\" aria-label=\"Rezultatul execuției\">\r\n        <div className=\"output-header\">\r\n          <h4 id=\"output-title\">Rezultatul execuției</h4>\r\n        </div>\r\n        <pre \r\n          className=\"output-content\"\r\n          aria-labelledby=\"output-title\"\r\n          aria-live=\"polite\"\r\n        >\r\n          {output || 'Rulează codul pentru a vedea rezultatul'}\r\n        </pre>\r\n      </div>\r\n\r\n      {/* Zona de feedback AI */}\r\n      {showFeedback && (\r\n        <div \r\n          className=\"feedback-container\" \r\n          role=\"region\" \r\n          aria-label=\"Feedback AI pentru cod\"\r\n          aria-live=\"polite\"\r\n        >\r\n          <div className=\"feedback-header\">\r\n            <h4 id=\"feedback-title\">Feedback AI</h4>\r\n            <button \r\n              className=\"close-feedback\" \r\n              onClick={() => setShowFeedback(false)}\r\n              aria-label=\"Închide feedback AI\"\r\n            >\r\n              &times;\r\n            </button>\r\n          </div>\r\n          <div \r\n            className=\"feedback-content\"\r\n            aria-labelledby=\"feedback-title\"\r\n          >\r\n            {feedback}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AccessibleCodeEditor;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}