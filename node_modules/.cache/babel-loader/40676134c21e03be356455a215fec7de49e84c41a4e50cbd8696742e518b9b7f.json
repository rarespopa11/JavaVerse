{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\Quiz.js\",\n  _s = $RefreshSig$();\nimport '../styles/Quiz.css'; // Importul CSS\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Quiz() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [isFinished, setIsFinished] = useState(false);\n  const [isAnswerChecked, setIsAnswerChecked] = useState(false); // Stare pentru validarea răspunsului\n  const [courseId, setCourseId] = useState(null);\n  const [totalLessons, setTotalLessons] = useState(0);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Obține userId din localStorage\n  const userId = localStorage.getItem('userId');\n  const authToken = localStorage.getItem('authToken');\n  useEffect(() => {\n    const courseIdFromUrl = window.location.pathname.split('/')[2]; // Extragem ID-ul cursului din URL\n    setCourseId(courseIdFromUrl);\n\n    // Verificare autentificare\n    if (!userId || !authToken) {\n      console.error('Utilizatorul nu este autentificat');\n      setError('Trebuie să fii autentificat pentru a susține testul.');\n      return;\n    }\n    fetch(`http://localhost:5000/api/courses/${courseIdFromUrl}`).then(response => response.json()).then(data => {\n      if (data.course && data.course.questions) {\n        setQuestions(data.course.questions);\n        setTotalLessons(data.course.totalLessons); // Setăm numărul total de lecții din curs\n      }\n    }).catch(error => {\n      console.error('Error fetching questions:', error);\n      setError('Nu am putut încărca întrebările pentru test.');\n    });\n  }, [userId, authToken]);\n  const handleAnswerChange = useCallback((index, answerIndex) => {\n    const updatedAnswers = [...selectedAnswers];\n    updatedAnswers[index] = answerIndex;\n    setSelectedAnswers(updatedAnswers);\n  }, [selectedAnswers]);\n\n  // Funcție pentru salvarea progresului la test\n  const saveProgress = useCallback(async testScore => {\n    if (!userId || !courseId) {\n      console.error('Lipsesc informații esențiale: userId sau courseId');\n      return;\n    }\n    setSaving(true);\n    try {\n      // Obținem progresul existent pentru acest curs\n      const progressResponse = await fetch(`http://localhost:5000/api/user/progress/${userId}`);\n      const progressData = await progressResponse.json();\n\n      // Găsim progresul pentru cursul curent\n      const currentProgress = progressData.find(p => p.courseId._id === courseId);\n\n      // Determinăm câte lecții au fost completate (păstrăm valoarea existentă)\n      const completedLessons = currentProgress ? currentProgress.completedLessons : totalLessons;\n\n      // Salvăm progresul actualizat\n      const response = await fetch('http://localhost:5000/api/user/progress', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          userId,\n          courseId,\n          completedLessons,\n          // Păstrăm numărul de lecții completate\n          totalLessons,\n          testScore // Actualizăm scorul testului\n        })\n      });\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || 'Eroare la salvarea progresului');\n      }\n      console.log('Progresul la test salvat cu succes');\n    } catch (error) {\n      console.error('Eroare la salvarea progresului testului:', error);\n      setError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\n    } finally {\n      setSaving(false);\n    }\n  }, [userId, courseId, totalLessons, authToken]);\n  const handleNext = useCallback(() => {\n    if (isAnswerChecked) {\n      // Al doilea click - trecem la următoarea întrebare\n      if (currentQuestionIndex < questions.length - 1) {\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\n        setIsAnswerChecked(false); // Resetăm starea\n      } else {\n        // La finalizarea testului, calculăm scorul final și salvăm progresul\n        const finalScore = Math.round(score / questions.length * 100);\n        saveProgress(finalScore);\n        setIsFinished(true);\n      }\n    } else {\n      // Primul click - validăm răspunsul\n      if (selectedAnswers[currentQuestionIndex] === undefined) {\n        alert('Te rugăm să selectezi un răspuns!');\n        return;\n      }\n\n      // Verificăm dacă răspunsul este corect\n      if (selectedAnswers[currentQuestionIndex] === questions[currentQuestionIndex].correctAnswerIndex) {\n        setScore(prevScore => prevScore + 1); // Actualizăm scorul\n      }\n      setIsAnswerChecked(true); // Setăm că răspunsul a fost verificat\n    }\n  }, [isAnswerChecked, currentQuestionIndex, questions, selectedAnswers, score, saveProgress]);\n  const handleRestart = useCallback(() => {\n    setScore(0);\n    setCurrentQuestionIndex(0);\n    setSelectedAnswers([]);\n    setIsFinished(false);\n    setIsAnswerChecked(false); // Resetăm starea pentru validarea răspunsurilor\n  }, []);\n  const handleBackToProfile = useCallback(() => {\n    navigate('/profile');\n  }, [navigate]);\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Eroare la \\xEEnc\\u0103rcarea testului\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(-1),\n        children: \"\\xCEnapoi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-loading\",\n      children: \"Se \\xEEncarc\\u0103 \\xEEntreb\\u0103rile...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\xCEntrebarea \", currentQuestionIndex + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this), !isFinished ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.options.map((option, index) => {\n          let className = '';\n          if (selectedAnswers[currentQuestionIndex] === index) {\n            // Adaugă clasa selected la răspunsul ales\n            className = 'selected';\n          }\n          if (isAnswerChecked) {\n            if (index === questions[currentQuestionIndex].correctAnswerIndex) {\n              // Răspuns corect - verde\n              className = 'correct';\n            } else if (selectedAnswers[currentQuestionIndex] === index) {\n              // Răspuns greșit - roșu\n              className = 'incorrect';\n            }\n          }\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: className,\n            onClick: () => handleAnswerChange(currentQuestionIndex, index) // Activăm click pe întreaga listă\n            ,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: `question-${currentQuestionIndex}-option-${index}`,\n              name: `question-${currentQuestionIndex}`,\n              value: index,\n              checked: selectedAnswers[currentQuestionIndex] === index,\n              onChange: () => {} // Manipulăm schimbarea prin onClick pe li\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `question-${currentQuestionIndex}-option-${index}`,\n              children: option\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 197,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNext,\n        disabled: saving,\n        children: isAnswerChecked ? 'Next' : 'Verifică Răspunsul'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Testul S-a \\xCEncheiat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Punctajul t\\u0103u: \", score, \" din \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score-percentage\",\n        children: [\"Ai ob\\u021Binut \", Math.round(score / questions.length * 100), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRestart,\n          children: \"Reia Testul\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToProfile,\n          children: \"Vizualizeaz\\u0103 Profilul\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 5\n  }, this);\n}\n_s(Quiz, \"I9LqvBqiMAv1FMhdwPMZCW/WpdI=\", false, function () {\n  return [useNavigate];\n});\n_c = Quiz;\nexport default Quiz;\nvar _c;\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","jsxDEV","_jsxDEV","Quiz","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","score","setScore","isFinished","setIsFinished","isAnswerChecked","setIsAnswerChecked","courseId","setCourseId","totalLessons","setTotalLessons","saving","setSaving","error","setError","navigate","userId","localStorage","getItem","authToken","courseIdFromUrl","window","location","pathname","split","console","fetch","then","response","json","data","course","catch","handleAnswerChange","index","answerIndex","updatedAnswers","saveProgress","testScore","progressResponse","progressData","currentProgress","find","p","_id","completedLessons","method","headers","body","JSON","stringify","success","Error","message","log","handleNext","length","finalScore","Math","round","undefined","alert","correctAnswerIndex","prevScore","handleRestart","handleBackToProfile","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","currentQuestion","question","options","map","option","type","id","name","value","checked","onChange","htmlFor","disabled","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/Quiz.js"],"sourcesContent":["import '../styles/Quiz.css'; // Importul CSS\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Quiz() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [isFinished, setIsFinished] = useState(false);\r\n  const [isAnswerChecked, setIsAnswerChecked] = useState(false); // Stare pentru validarea răspunsului\r\n  const [courseId, setCourseId] = useState(null);\r\n  const [totalLessons, setTotalLessons] = useState(0);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Obține userId din localStorage\r\n  const userId = localStorage.getItem('userId');\r\n  const authToken = localStorage.getItem('authToken');\r\n\r\n  useEffect(() => {\r\n    const courseIdFromUrl = window.location.pathname.split('/')[2]; // Extragem ID-ul cursului din URL\r\n    setCourseId(courseIdFromUrl);\r\n\r\n    // Verificare autentificare\r\n    if (!userId || !authToken) {\r\n      console.error('Utilizatorul nu este autentificat');\r\n      setError('Trebuie să fii autentificat pentru a susține testul.');\r\n      return;\r\n    }\r\n\r\n    fetch(`http://localhost:5000/api/courses/${courseIdFromUrl}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.course && data.course.questions) {\r\n          setQuestions(data.course.questions);\r\n          setTotalLessons(data.course.totalLessons); // Setăm numărul total de lecții din curs\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching questions:', error);\r\n        setError('Nu am putut încărca întrebările pentru test.');\r\n      });\r\n  }, [userId, authToken]);\r\n\r\n  const handleAnswerChange = useCallback((index, answerIndex) => {\r\n    const updatedAnswers = [...selectedAnswers];\r\n    updatedAnswers[index] = answerIndex;\r\n    setSelectedAnswers(updatedAnswers);\r\n  }, [selectedAnswers]);\r\n\r\n  // Funcție pentru salvarea progresului la test\r\n  const saveProgress = useCallback(async (testScore) => {\r\n    if (!userId || !courseId) {\r\n      console.error('Lipsesc informații esențiale: userId sau courseId');\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n    \r\n    try {\r\n      // Obținem progresul existent pentru acest curs\r\n      const progressResponse = await fetch(`http://localhost:5000/api/user/progress/${userId}`);\r\n      const progressData = await progressResponse.json();\r\n      \r\n      // Găsim progresul pentru cursul curent\r\n      const currentProgress = progressData.find(p => p.courseId._id === courseId);\r\n      \r\n      // Determinăm câte lecții au fost completate (păstrăm valoarea existentă)\r\n      const completedLessons = currentProgress ? currentProgress.completedLessons : totalLessons;\r\n\r\n      // Salvăm progresul actualizat\r\n      const response = await fetch('http://localhost:5000/api/user/progress', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authToken}`\r\n        },\r\n        body: JSON.stringify({\r\n          userId,\r\n          courseId,\r\n          completedLessons, // Păstrăm numărul de lecții completate\r\n          totalLessons,\r\n          testScore, // Actualizăm scorul testului\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!data.success) {\r\n        throw new Error(data.message || 'Eroare la salvarea progresului');\r\n      }\r\n      \r\n      console.log('Progresul la test salvat cu succes');\r\n    } catch (error) {\r\n      console.error('Eroare la salvarea progresului testului:', error);\r\n      setError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  }, [userId, courseId, totalLessons, authToken]);\r\n\r\n  const handleNext = useCallback(() => {\r\n    if (isAnswerChecked) {\r\n      // Al doilea click - trecem la următoarea întrebare\r\n      if (currentQuestionIndex < questions.length - 1) {\r\n        setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n        setIsAnswerChecked(false); // Resetăm starea\r\n      } else {\r\n        // La finalizarea testului, calculăm scorul final și salvăm progresul\r\n        const finalScore = Math.round((score / questions.length) * 100);\r\n        saveProgress(finalScore);\r\n        setIsFinished(true);\r\n      }\r\n    } else {\r\n      // Primul click - validăm răspunsul\r\n      if (selectedAnswers[currentQuestionIndex] === undefined) {\r\n        alert('Te rugăm să selectezi un răspuns!');\r\n        return;\r\n      }\r\n\r\n      // Verificăm dacă răspunsul este corect\r\n      if (selectedAnswers[currentQuestionIndex] === questions[currentQuestionIndex].correctAnswerIndex) {\r\n        setScore(prevScore => prevScore + 1); // Actualizăm scorul\r\n      }\r\n\r\n      setIsAnswerChecked(true); // Setăm că răspunsul a fost verificat\r\n    }\r\n  }, [isAnswerChecked, currentQuestionIndex, questions, selectedAnswers, score, saveProgress]);\r\n\r\n  const handleRestart = useCallback(() => {\r\n    setScore(0);\r\n    setCurrentQuestionIndex(0);\r\n    setSelectedAnswers([]);\r\n    setIsFinished(false);\r\n    setIsAnswerChecked(false); // Resetăm starea pentru validarea răspunsurilor\r\n  }, []);\r\n\r\n  const handleBackToProfile = useCallback(() => {\r\n    navigate('/profile');\r\n  }, [navigate]);\r\n\r\n  if (error) {\r\n    return (\r\n      <div className=\"quiz-error\">\r\n        <h2>Eroare la încărcarea testului</h2>\r\n        <p>{error}</p>\r\n        <button onClick={() => navigate(-1)}>Înapoi</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (questions.length === 0) {\r\n    return <div className=\"quiz-loading\">Se încarcă întrebările...</div>;\r\n  }\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      <h2>Întrebarea {currentQuestionIndex + 1}</h2>\r\n\r\n      {!isFinished ? (\r\n        <div className=\"question-container\">\r\n          <h3>{currentQuestion.question}</h3>\r\n          <ul>\r\n            {currentQuestion.options.map((option, index) => {\r\n              let className = '';\r\n              if (selectedAnswers[currentQuestionIndex] === index) {\r\n                // Adaugă clasa selected la răspunsul ales\r\n                className = 'selected';\r\n              }\r\n              if (isAnswerChecked) {\r\n                if (index === questions[currentQuestionIndex].correctAnswerIndex) {\r\n                  // Răspuns corect - verde\r\n                  className = 'correct';\r\n                } else if (selectedAnswers[currentQuestionIndex] === index) {\r\n                  // Răspuns greșit - roșu\r\n                  className = 'incorrect';\r\n                }\r\n              }\r\n              return (\r\n                <li\r\n                  key={index}\r\n                  className={className}\r\n                  onClick={() => handleAnswerChange(currentQuestionIndex, index)} // Activăm click pe întreaga listă\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={`question-${currentQuestionIndex}-option-${index}`}\r\n                    name={`question-${currentQuestionIndex}`}\r\n                    value={index}\r\n                    checked={selectedAnswers[currentQuestionIndex] === index}\r\n                    onChange={() => {}} // Manipulăm schimbarea prin onClick pe li\r\n                  />\r\n                  <label htmlFor={`question-${currentQuestionIndex}-option-${index}`}>{option}</label>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <button \r\n            onClick={handleNext}\r\n            disabled={saving}\r\n          >\r\n            {isAnswerChecked ? 'Next' : 'Verifică Răspunsul'}\r\n          </button>\r\n        </div>\r\n      ) : (\r\n        <div className=\"result-container\">\r\n          <h3>Testul S-a Încheiat</h3>\r\n          <p>Punctajul tău: {score} din {questions.length}</p>\r\n          <p className=\"score-percentage\">Ai obținut {Math.round((score / questions.length) * 100)}%</p>\r\n          \r\n          <div className=\"result-actions\">\r\n            <button onClick={handleRestart}>Reia Testul</button>\r\n            <button onClick={handleBackToProfile}>Vizualizează Profilul</button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Quiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}