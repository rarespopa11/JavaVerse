{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\AccessibleQuiz.js\",\n  _s = $RefreshSig$();\n// src/components/AccessibleQuiz.js - Final fixed version\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAccessibility } from '../hooks/useAccessibility';\nimport '../styles/Quiz.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AccessibleQuiz() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [isFinished, setIsFinished] = useState(false);\n  const [isAnswerChecked, setIsAnswerChecked] = useState(false);\n  const [courseId, setCourseId] = useState(null);\n  const [totalLessons, setTotalLessons] = useState(0);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const {\n    isAccessibilityMode,\n    useQuizAccessibility,\n    announceLoading,\n    announceError\n  } = useAccessibility();\n  const {\n    announceQuestion,\n    announceQuizProgress,\n    announceQuizResult\n  } = useQuizAccessibility();\n  const userId = sessionStorage.getItem('userId');\n  const authToken = sessionStorage.getItem('authToken');\n\n  // Funcție pentru citirea textului cu punctuație (pentru întrebări de programare)\n  const readTextWithPunctuation = useCallback(text => {\n    if (!text) return text;\n    return text.split('').map(char => {\n      const punctuationMap = {\n        '=': ' egal ',\n        ';': ' punct și virgulă ',\n        '(': ' paranteză deschisă ',\n        ')': ' paranteză închisă ',\n        '{': ' acoladă deschisă ',\n        '}': ' acoladă închisă ',\n        '[': ' paranteză pătrată deschisă ',\n        ']': ' paranteză pătrată închisă ',\n        '.': ' punct ',\n        ',': ' virgulă ',\n        ':': ' două puncte ',\n        '+': ' plus ',\n        '-': ' minus ',\n        '*': ' asterisc ',\n        '/': ' slash ',\n        '<': ' mai mic ',\n        '>': ' mai mare ',\n        '&': ' ampersand ',\n        '|': ' bară verticală '\n      };\n      return punctuationMap[char] || char;\n    }).join('');\n  }, []);\n\n  // FIXAT: handleAnswerChange cu anunț simplificat\n  const handleAnswerChange = useCallback((index, answerIndex) => {\n    const updatedAnswers = [...selectedAnswers];\n    updatedAnswers[index] = answerIndex;\n    setSelectedAnswers(updatedAnswers);\n    if (isAccessibilityMode && window.accessibilityManager) {\n      // IMPORTANT: Opresc orice citire în curs\n      window.accessibilityManager.stopReading();\n      setTimeout(() => {\n        // FIXAT: Anunț simplificat - doar \"ai selectat răspunsul x\"\n        window.accessibilityManager.speak(`Ai selectat răspunsul ${answerIndex + 1}.`, 'high');\n      }, 100);\n    }\n  }, [selectedAnswers, currentQuestionIndex, isAccessibilityMode]);\n  const saveProgress = useCallback(async testScore => {\n    if (!userId || !courseId) {\n      console.error('Lipsesc informații esențiale: userId sau courseId');\n      return;\n    }\n    setSaving(true);\n    if (isAccessibilityMode) {\n      announceLoading('Se salvează rezultatul testului...');\n    }\n    try {\n      const progressResponse = await fetch(`http://localhost:5000/api/user/progress/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n      const progressData = await progressResponse.json();\n      const currentProgress = progressData.find(p => p.courseId._id === courseId);\n      const completedLessons = currentProgress ? currentProgress.completedLessons : totalLessons;\n      const response = await fetch('http://localhost:5000/api/user/progress', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          userId,\n          courseId,\n          completedLessons,\n          totalLessons,\n          testScore\n        })\n      });\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || 'Eroare la salvarea progresului');\n      }\n      console.log('Progresul la test salvat cu succes');\n    } catch (error) {\n      console.error('Eroare la salvarea progresului testului:', error);\n      setError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\n      if (isAccessibilityMode) {\n        announceError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\n      }\n    } finally {\n      setSaving(false);\n    }\n  }, [userId, courseId, totalLessons, authToken, isAccessibilityMode, announceLoading, announceError]);\n\n  // FIXAT: handleNext cu verificare îmbunătățită\n  const handleNext = useCallback(() => {\n    if (isAnswerChecked) {\n      // Mergem la următoarea întrebare\n      if (currentQuestionIndex < questions.length - 1) {\n        const nextIndex = currentQuestionIndex + 1;\n        setCurrentQuestionIndex(nextIndex);\n        setIsAnswerChecked(false);\n        if (isAccessibilityMode) {\n          announceQuizProgress(nextIndex + 1, questions.length);\n          setTimeout(() => {\n            const questionWithPunctuation = readTextWithPunctuation(questions[nextIndex].question);\n            const optionsWithPunctuation = questions[nextIndex].options.map(readTextWithPunctuation);\n            announceQuestion(nextIndex + 1, questions.length, questionWithPunctuation, optionsWithPunctuation);\n          }, 1000);\n        }\n      } else {\n        // Finalizăm testul\n        const finalScore = Math.round(score / questions.length * 100);\n        saveProgress(finalScore);\n        setIsFinished(true);\n        if (isAccessibilityMode) {\n          setTimeout(() => {\n            announceQuizResult(score, questions.length);\n          }, 1000);\n        }\n      }\n    } else {\n      // FIXAT: Verificare îmbunătățită pentru răspuns\n      if (selectedAnswers[currentQuestionIndex] === undefined) {\n        const message = 'Te rugăm să selectezi un răspuns!';\n        if (isAccessibilityMode && window.accessibilityManager) {\n          window.accessibilityManager.speak(message, 'high');\n        }\n        return;\n      }\n      const currentQuestion = questions[currentQuestionIndex];\n      const selectedAnswer = selectedAnswers[currentQuestionIndex];\n      const correctAnswerIndex = currentQuestion.correctAnswerIndex;\n      const isCorrect = selectedAnswer === correctAnswerIndex;\n      if (isCorrect) {\n        setScore(prevScore => prevScore + 1);\n      }\n      setIsAnswerChecked(true);\n      if (isAccessibilityMode && window.accessibilityManager) {\n        let message = '';\n        if (isCorrect) {\n          message = 'Răspuns corect! ';\n        } else {\n          const correctOption = readTextWithPunctuation(currentQuestion.options[correctAnswerIndex]);\n          message = `Răspuns incorect. Răspunsul corect este: ${correctAnswerIndex + 1}. ${correctOption}. `;\n        }\n        message += 'Apasă Enter pentru a continua la următoarea întrebare.';\n        setTimeout(() => {\n          window.accessibilityManager.speak(message, 'high');\n        }, 500);\n      }\n    }\n  }, [isAnswerChecked, currentQuestionIndex, questions, selectedAnswers, score, saveProgress, isAccessibilityMode, announceQuestion, announceQuizProgress, announceQuizResult, readTextWithPunctuation]);\n\n  // FIXAT: Listener pentru comenzile rapide de accesibilitate\n  useEffect(() => {\n    if (!isAccessibilityMode) return;\n    const handleKeyPress = e => {\n      if (!isAccessibilityMode) return;\n\n      // FIXAT: Pentru sfârșitul quiz-ului - navigare prin comenzi rapide\n      if (isFinished) {\n        // Prevenim navigarea normală cu Tab\n        if (e.key === 'Tab') {\n          e.preventDefault();\n          return;\n        }\n        return;\n      }\n\n      // Selectare răspuns cu tastele 1-4\n      if (['1', '2', '3', '4'].includes(e.key)) {\n        var _questions$currentQue;\n        const answerIndex = parseInt(e.key) - 1;\n        if (answerIndex < ((_questions$currentQue = questions[currentQuestionIndex]) === null || _questions$currentQue === void 0 ? void 0 : _questions$currentQue.options.length)) {\n          handleAnswerChange(currentQuestionIndex, answerIndex);\n          e.preventDefault();\n        }\n      }\n\n      // FIXAT: Enter pentru validare răspuns cu verificare corectă\n      if (e.key === 'Enter') {\n        e.preventDefault();\n        e.stopPropagation();\n\n        // FIXAT: Verificăm dacă avem un răspuns selectat ÎNAINTE de orice altceva\n        if (selectedAnswers[currentQuestionIndex] === undefined && !isAnswerChecked) {\n          const message = 'Te rugăm să selectezi un răspuns mai întâi!';\n          if (window.accessibilityManager) {\n            window.accessibilityManager.speak(message, 'high');\n          }\n          return;\n        }\n        handleNext();\n      }\n    };\n    document.addEventListener('keydown', handleKeyPress, true);\n    return () => document.removeEventListener('keydown', handleKeyPress, true);\n  }, [isAccessibilityMode, currentQuestionIndex, questions, isFinished, selectedAnswers, isAnswerChecked, handleAnswerChange, handleNext]);\n  useEffect(() => {\n    const courseIdFromUrl = window.location.pathname.split('/')[2];\n    setCourseId(courseIdFromUrl);\n    if (!userId || !authToken) {\n      console.error('Utilizatorul nu este autentificat');\n      setError('Trebuie să fii autentificat pentru a susține testul.');\n      if (isAccessibilityMode) {\n        announceError('Trebuie să fii autentificat pentru a susține testul.');\n      }\n      return;\n    }\n    if (isAccessibilityMode) {\n      announceLoading('Se încarcă întrebările testului...');\n    }\n    fetch(`http://localhost:5000/api/courses/${courseIdFromUrl}`).then(response => response.json()).then(data => {\n      if (data.course && data.course.questions) {\n        setQuestions(data.course.questions);\n        setTotalLessons(data.course.totalLessons);\n        if (isAccessibilityMode) {\n          setTimeout(() => {\n            const questionWithPunctuation = readTextWithPunctuation(data.course.questions[0].question);\n            const optionsWithPunctuation = data.course.questions[0].options.map(readTextWithPunctuation);\n            announceQuestion(1, data.course.questions.length, questionWithPunctuation, optionsWithPunctuation);\n          }, 1500);\n        }\n      }\n    }).catch(error => {\n      console.error('Error fetching questions:', error);\n      setError('Nu am putut încărca întrebările pentru test.');\n      if (isAccessibilityMode) {\n        announceError('Nu am putut încărca întrebările pentru test.');\n      }\n    });\n  }, [userId, authToken, isAccessibilityMode, readTextWithPunctuation, announceError, announceLoading, announceQuestion]);\n  const handleRestart = useCallback(() => {\n    setScore(0);\n    setCurrentQuestionIndex(0);\n    setSelectedAnswers([]);\n    setIsFinished(false);\n    setIsAnswerChecked(false);\n    setError(null);\n    if (isAccessibilityMode) {\n      setTimeout(() => {\n        const questionWithPunctuation = readTextWithPunctuation(questions[0].question);\n        const optionsWithPunctuation = questions[0].options.map(readTextWithPunctuation);\n        announceQuestion(1, questions.length, questionWithPunctuation, optionsWithPunctuation);\n      }, 1000);\n    }\n  }, [isAccessibilityMode, questions, announceQuestion, readTextWithPunctuation]);\n  const handleBackToProfile = useCallback(() => {\n    if (isAccessibilityMode) {\n      announceLoading('Navighez la profil...');\n      sessionStorage.setItem('accessibilityModeActive', 'true');\n    }\n    navigate('/profile');\n  }, [navigate, isAccessibilityMode, announceLoading]);\n  const handleBackToCourses = useCallback(() => {\n    if (isAccessibilityMode) {\n      announceLoading('Navighez la cursuri...');\n      sessionStorage.setItem('accessibilityModeActive', 'true');\n    }\n    navigate('/courses');\n  }, [navigate, isAccessibilityMode, announceLoading]);\n\n  // FIXAT: Anunț pentru sfârșitul testului cu comenzi rapide\n  useEffect(() => {\n    if (isFinished && isAccessibilityMode && window.accessibilityManager) {\n      setTimeout(() => {\n        const message = `Pentru a relua testul, apasă R. Pentru a vizualiza profilul, apasă Alt + R. Pentru a reveni la cursuri, apasă Alt + C.`;\n        window.accessibilityManager.speak(message, 'high');\n      }, 3000); // După ce se termină anunțul rezultatului\n    }\n  }, [isFinished, isAccessibilityMode]);\n\n  // FIXAT: Listener pentru comenzi rapide la sfârșitul testului\n  useEffect(() => {\n    if (!isAccessibilityMode || !isFinished) return;\n    const handleEndGameKeys = e => {\n      if (e.key === 'r' || e.key === 'R') {\n        e.preventDefault();\n        handleRestart();\n      } else if (e.altKey && e.key === 'r') {\n        e.preventDefault();\n        handleBackToProfile();\n      } else if (e.altKey && e.key === 'c') {\n        e.preventDefault();\n        handleBackToCourses();\n      }\n    };\n    document.addEventListener('keydown', handleEndGameKeys, true);\n    return () => document.removeEventListener('keydown', handleEndGameKeys, true);\n  }, [isAccessibilityMode, isFinished, handleRestart, handleBackToProfile, handleBackToCourses]);\n  if (error && !questions.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Eroare la \\xEEnc\\u0103rcarea testului\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 366,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(-1),\n        children: \"\\xCEnapoi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 7\n    }, this);\n  }\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-loading\",\n      children: \"Se \\xEEncarc\\u0103 \\xEEntreb\\u0103rile...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 374,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [isAccessibilityMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accessibility-instructions\",\n      style: {\n        position: 'absolute',\n        left: '-9999px',\n        width: '1px',\n        height: '1px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Folose\\u0219te tastele 1-4 pentru a selecta r\\u0103spunsurile. Enter pentru a valida r\\u0103spunsul sau a trece la urm\\u0103toarea \\xEEntrebare.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isFinished ? 'Test finalizat' : `Întrebarea ${currentQuestionIndex + 1}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), !isFinished ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          ...(isAccessibilityMode ? {\n            tabIndex: -1\n          } : {})\n        },\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.options.map((option, index) => {\n          let className = '';\n          if (selectedAnswers[currentQuestionIndex] === index) {\n            className = 'selected';\n          }\n          if (isAnswerChecked) {\n            if (index === questions[currentQuestionIndex].correctAnswerIndex) {\n              className = 'correct';\n            } else if (selectedAnswers[currentQuestionIndex] === index) {\n              className = 'incorrect';\n            }\n          }\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: className,\n            onClick: () => handleAnswerChange(currentQuestionIndex, index),\n            role: isAccessibilityMode ? \"button\" : undefined,\n            \"aria-label\": isAccessibilityMode ? `Opțiunea ${index + 1}: ${option}` : undefined,\n            tabIndex: isAccessibilityMode ? 0 : undefined,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: `question-${currentQuestionIndex}-option-${index}`,\n              name: `question-${currentQuestionIndex}`,\n              value: index,\n              checked: selectedAnswers[currentQuestionIndex] === index,\n              onChange: () => {},\n              style: {\n                ...(isAccessibilityMode ? {\n                  tabIndex: -1\n                } : {})\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `question-${currentQuestionIndex}-option-${index}`,\n              style: {\n                ...(isAccessibilityMode ? {\n                  tabIndex: -1\n                } : {})\n              },\n              children: [isAccessibilityMode && `${index + 1}. `, option]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 418,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 404,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNext,\n        disabled: saving,\n        \"aria-label\": isAccessibilityMode ? isAnswerChecked ? 'Treci la următoarea întrebare' : 'Verifică răspunsul selectat' : undefined,\n        children: isAnswerChecked ? 'Next' : 'Verifică Răspunsul'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-error-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 457,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Testul s-a \\xEEncheiat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Punctajul t\\u0103u: \", score, \" din \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score-percentage\",\n        children: [\"Ai ob\\u021Binut \", Math.round(score / questions.length * 100), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 465,\n        columnNumber: 11\n      }, this), saving && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Se salveaz\\u0103 rezultatul...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRestart,\n          \"aria-label\": isAccessibilityMode ? 'Reîncep testul de la început' : undefined,\n          children: \"Reia testul\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 470,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToProfile,\n          \"aria-label\": isAccessibilityMode ? 'Merg la pagina de profil' : undefined,\n          children: \"Vizualizeaz\\u0103 profilul\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToCourses,\n          \"aria-label\": isAccessibilityMode ? 'Merg la pagina de cursuri' : undefined,\n          children: \"\\xCEnapoi la cursuri\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 482,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 380,\n    columnNumber: 5\n  }, this);\n}\n_s(AccessibleQuiz, \"FWjwe7e4I/xy0JjVunR3prlPLOM=\", false, function () {\n  return [useNavigate, useAccessibility, useQuizAccessibility];\n});\n_c = AccessibleQuiz;\nexport default AccessibleQuiz;\nvar _c;\n$RefreshReg$(_c, \"AccessibleQuiz\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","useAccessibility","jsxDEV","_jsxDEV","AccessibleQuiz","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","score","setScore","isFinished","setIsFinished","isAnswerChecked","setIsAnswerChecked","courseId","setCourseId","totalLessons","setTotalLessons","saving","setSaving","error","setError","navigate","isAccessibilityMode","useQuizAccessibility","announceLoading","announceError","announceQuestion","announceQuizProgress","announceQuizResult","userId","sessionStorage","getItem","authToken","readTextWithPunctuation","text","split","map","char","punctuationMap","join","handleAnswerChange","index","answerIndex","updatedAnswers","window","accessibilityManager","stopReading","setTimeout","speak","saveProgress","testScore","console","progressResponse","fetch","headers","progressData","json","currentProgress","find","p","_id","completedLessons","response","method","body","JSON","stringify","data","success","Error","message","log","handleNext","length","nextIndex","questionWithPunctuation","question","optionsWithPunctuation","options","finalScore","Math","round","undefined","currentQuestion","selectedAnswer","correctAnswerIndex","isCorrect","prevScore","correctOption","handleKeyPress","e","key","preventDefault","includes","_questions$currentQue","parseInt","stopPropagation","document","addEventListener","removeEventListener","courseIdFromUrl","location","pathname","then","course","catch","handleRestart","handleBackToProfile","setItem","handleBackToCourses","handleEndGameKeys","altKey","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","style","position","left","width","height","tabIndex","option","role","type","id","name","value","checked","onChange","htmlFor","disabled","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/AccessibleQuiz.js"],"sourcesContent":["// src/components/AccessibleQuiz.js - Final fixed version\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAccessibility } from '../hooks/useAccessibility';\r\nimport '../styles/Quiz.css';\r\n\r\nfunction AccessibleQuiz() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [isFinished, setIsFinished] = useState(false);\r\n  const [isAnswerChecked, setIsAnswerChecked] = useState(false);\r\n  const [courseId, setCourseId] = useState(null);\r\n  const [totalLessons, setTotalLessons] = useState(0);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n  const navigate = useNavigate();\r\n  const { isAccessibilityMode, useQuizAccessibility, announceLoading, announceError } = useAccessibility();\r\n  const { announceQuestion, announceQuizProgress, announceQuizResult } = useQuizAccessibility();\r\n\r\n  const userId = sessionStorage.getItem('userId');\r\n  const authToken = sessionStorage.getItem('authToken');\r\n\r\n  // Funcție pentru citirea textului cu punctuație (pentru întrebări de programare)\r\n  const readTextWithPunctuation = useCallback((text) => {\r\n    if (!text) return text;\r\n    \r\n    return text.split('').map(char => {\r\n      const punctuationMap = {\r\n        '=': ' egal ',\r\n        ';': ' punct și virgulă ',\r\n        '(': ' paranteză deschisă ',\r\n        ')': ' paranteză închisă ',\r\n        '{': ' acoladă deschisă ',\r\n        '}': ' acoladă închisă ',\r\n        '[': ' paranteză pătrată deschisă ',\r\n        ']': ' paranteză pătrată închisă ',\r\n        '.': ' punct ',\r\n        ',': ' virgulă ',\r\n        ':': ' două puncte ',\r\n        '+': ' plus ',\r\n        '-': ' minus ',\r\n        '*': ' asterisc ',\r\n        '/': ' slash ',\r\n        '<': ' mai mic ',\r\n        '>': ' mai mare ',\r\n        '&': ' ampersand ',\r\n        '|': ' bară verticală '\r\n      };\r\n      return punctuationMap[char] || char;\r\n    }).join('');\r\n  }, []);\r\n\r\n  // FIXAT: handleAnswerChange cu anunț simplificat\r\n  const handleAnswerChange = useCallback((index, answerIndex) => {\r\n    const updatedAnswers = [...selectedAnswers];\r\n    updatedAnswers[index] = answerIndex;\r\n    setSelectedAnswers(updatedAnswers);\r\n\r\n    if (isAccessibilityMode && window.accessibilityManager) {\r\n      // IMPORTANT: Opresc orice citire în curs\r\n      window.accessibilityManager.stopReading();\r\n      \r\n      setTimeout(() => {\r\n        // FIXAT: Anunț simplificat - doar \"ai selectat răspunsul x\"\r\n        window.accessibilityManager.speak(`Ai selectat răspunsul ${answerIndex + 1}.`, 'high');\r\n      }, 100);\r\n    }\r\n  }, [selectedAnswers, currentQuestionIndex, isAccessibilityMode]);\r\n\r\n  const saveProgress = useCallback(async (testScore) => {\r\n    if (!userId || !courseId) {\r\n      console.error('Lipsesc informații esențiale: userId sau courseId');\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n    \r\n    if (isAccessibilityMode) {\r\n      announceLoading('Se salvează rezultatul testului...');\r\n    }\r\n    \r\n    try {\r\n      const progressResponse = await fetch(`http://localhost:5000/api/user/progress/${userId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${authToken}`\r\n        }\r\n      });\r\n      const progressData = await progressResponse.json();\r\n      \r\n      const currentProgress = progressData.find(p => p.courseId._id === courseId);\r\n      const completedLessons = currentProgress ? currentProgress.completedLessons : totalLessons;\r\n\r\n      const response = await fetch('http://localhost:5000/api/user/progress', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authToken}`\r\n        },\r\n        body: JSON.stringify({\r\n          userId,\r\n          courseId,\r\n          completedLessons,\r\n          totalLessons,\r\n          testScore,\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!data.success) {\r\n        throw new Error(data.message || 'Eroare la salvarea progresului');\r\n      }\r\n      \r\n      console.log('Progresul la test salvat cu succes');\r\n    } catch (error) {\r\n      console.error('Eroare la salvarea progresului testului:', error);\r\n      setError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\r\n      if (isAccessibilityMode) {\r\n        announceError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\r\n      }\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  }, [userId, courseId, totalLessons, authToken, isAccessibilityMode, announceLoading, announceError]);\r\n\r\n  // FIXAT: handleNext cu verificare îmbunătățită\r\n  const handleNext = useCallback(() => {\r\n    if (isAnswerChecked) {\r\n      // Mergem la următoarea întrebare\r\n      if (currentQuestionIndex < questions.length - 1) {\r\n        const nextIndex = currentQuestionIndex + 1;\r\n        setCurrentQuestionIndex(nextIndex);\r\n        setIsAnswerChecked(false);\r\n        \r\n        if (isAccessibilityMode) {\r\n          announceQuizProgress(nextIndex + 1, questions.length);\r\n          setTimeout(() => {\r\n            const questionWithPunctuation = readTextWithPunctuation(questions[nextIndex].question);\r\n            const optionsWithPunctuation = questions[nextIndex].options.map(readTextWithPunctuation);\r\n            \r\n            announceQuestion(\r\n              nextIndex + 1,\r\n              questions.length,\r\n              questionWithPunctuation,\r\n              optionsWithPunctuation\r\n            );\r\n          }, 1000);\r\n        }\r\n      } else {\r\n        // Finalizăm testul\r\n        const finalScore = Math.round((score / questions.length) * 100);\r\n        saveProgress(finalScore);\r\n        setIsFinished(true);\r\n        \r\n        if (isAccessibilityMode) {\r\n          setTimeout(() => {\r\n            announceQuizResult(score, questions.length);\r\n          }, 1000);\r\n        }\r\n      }\r\n    } else {\r\n      // FIXAT: Verificare îmbunătățită pentru răspuns\r\n      if (selectedAnswers[currentQuestionIndex] === undefined) {\r\n        const message = 'Te rugăm să selectezi un răspuns!';\r\n        if (isAccessibilityMode && window.accessibilityManager) {\r\n          window.accessibilityManager.speak(message, 'high');\r\n        }\r\n        return;\r\n      }\r\n\r\n      const currentQuestion = questions[currentQuestionIndex];\r\n      const selectedAnswer = selectedAnswers[currentQuestionIndex];\r\n      const correctAnswerIndex = currentQuestion.correctAnswerIndex;\r\n      const isCorrect = selectedAnswer === correctAnswerIndex;\r\n\r\n      if (isCorrect) {\r\n        setScore(prevScore => prevScore + 1);\r\n      }\r\n\r\n      setIsAnswerChecked(true);\r\n      \r\n      if (isAccessibilityMode && window.accessibilityManager) {\r\n        let message = '';\r\n        if (isCorrect) {\r\n          message = 'Răspuns corect! ';\r\n        } else {\r\n          const correctOption = readTextWithPunctuation(currentQuestion.options[correctAnswerIndex]);\r\n          message = `Răspuns incorect. Răspunsul corect este: ${correctAnswerIndex + 1}. ${correctOption}. `;\r\n        }\r\n        message += 'Apasă Enter pentru a continua la următoarea întrebare.';\r\n        \r\n        setTimeout(() => {\r\n          window.accessibilityManager.speak(message, 'high');\r\n        }, 500);\r\n      }\r\n    }\r\n  }, [isAnswerChecked, currentQuestionIndex, questions, selectedAnswers, score, saveProgress, isAccessibilityMode, announceQuestion, announceQuizProgress, announceQuizResult, readTextWithPunctuation]);\r\n\r\n  // FIXAT: Listener pentru comenzile rapide de accesibilitate\r\n  useEffect(() => {\r\n    if (!isAccessibilityMode) return;\r\n\r\n    const handleKeyPress = (e) => {\r\n      if (!isAccessibilityMode) return;\r\n\r\n      // FIXAT: Pentru sfârșitul quiz-ului - navigare prin comenzi rapide\r\n      if (isFinished) {\r\n        // Prevenim navigarea normală cu Tab\r\n        if (e.key === 'Tab') {\r\n          e.preventDefault();\r\n          return;\r\n        }\r\n        return;\r\n      }\r\n\r\n      // Selectare răspuns cu tastele 1-4\r\n      if (['1', '2', '3', '4'].includes(e.key)) {\r\n        const answerIndex = parseInt(e.key) - 1;\r\n        if (answerIndex < questions[currentQuestionIndex]?.options.length) {\r\n          handleAnswerChange(currentQuestionIndex, answerIndex);\r\n          e.preventDefault();\r\n        }\r\n      }\r\n      \r\n      // FIXAT: Enter pentru validare răspuns cu verificare corectă\r\n      if (e.key === 'Enter') {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        \r\n        // FIXAT: Verificăm dacă avem un răspuns selectat ÎNAINTE de orice altceva\r\n        if (selectedAnswers[currentQuestionIndex] === undefined && !isAnswerChecked) {\r\n          const message = 'Te rugăm să selectezi un răspuns mai întâi!';\r\n          if (window.accessibilityManager) {\r\n            window.accessibilityManager.speak(message, 'high');\r\n          }\r\n          return;\r\n        }\r\n        \r\n        handleNext();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyPress, true);\r\n    return () => document.removeEventListener('keydown', handleKeyPress, true);\r\n  }, [isAccessibilityMode, currentQuestionIndex, questions, isFinished, selectedAnswers, isAnswerChecked, handleAnswerChange, handleNext]);\r\n\r\n  useEffect(() => {\r\n    const courseIdFromUrl = window.location.pathname.split('/')[2];\r\n    setCourseId(courseIdFromUrl);\r\n\r\n    if (!userId || !authToken) {\r\n      console.error('Utilizatorul nu este autentificat');\r\n      setError('Trebuie să fii autentificat pentru a susține testul.');\r\n      if (isAccessibilityMode) {\r\n        announceError('Trebuie să fii autentificat pentru a susține testul.');\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (isAccessibilityMode) {\r\n      announceLoading('Se încarcă întrebările testului...');\r\n    }\r\n\r\n    fetch(`http://localhost:5000/api/courses/${courseIdFromUrl}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.course && data.course.questions) {\r\n          setQuestions(data.course.questions);\r\n          setTotalLessons(data.course.totalLessons);\r\n          \r\n          if (isAccessibilityMode) {\r\n            setTimeout(() => {\r\n              const questionWithPunctuation = readTextWithPunctuation(data.course.questions[0].question);\r\n              const optionsWithPunctuation = data.course.questions[0].options.map(readTextWithPunctuation);\r\n              \r\n              announceQuestion(\r\n                1, \r\n                data.course.questions.length, \r\n                questionWithPunctuation, \r\n                optionsWithPunctuation\r\n              );\r\n            }, 1500);\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching questions:', error);\r\n        setError('Nu am putut încărca întrebările pentru test.');\r\n        if (isAccessibilityMode) {\r\n          announceError('Nu am putut încărca întrebările pentru test.');\r\n        }\r\n      });\r\n  }, [userId, authToken, isAccessibilityMode, readTextWithPunctuation, announceError, announceLoading, announceQuestion]);\r\n\r\n  const handleRestart = useCallback(() => {\r\n    setScore(0);\r\n    setCurrentQuestionIndex(0);\r\n    setSelectedAnswers([]);\r\n    setIsFinished(false);\r\n    setIsAnswerChecked(false);\r\n    setError(null);\r\n    \r\n    if (isAccessibilityMode) {\r\n      setTimeout(() => {\r\n        const questionWithPunctuation = readTextWithPunctuation(questions[0].question);\r\n        const optionsWithPunctuation = questions[0].options.map(readTextWithPunctuation);\r\n        \r\n        announceQuestion(1, questions.length, questionWithPunctuation, optionsWithPunctuation);\r\n      }, 1000);\r\n    }\r\n  }, [isAccessibilityMode, questions, announceQuestion, readTextWithPunctuation]);\r\n\r\n  const handleBackToProfile = useCallback(() => {\r\n    if (isAccessibilityMode) {\r\n      announceLoading('Navighez la profil...');\r\n      sessionStorage.setItem('accessibilityModeActive', 'true');\r\n    }\r\n    navigate('/profile');\r\n  }, [navigate, isAccessibilityMode, announceLoading]);\r\n\r\n  const handleBackToCourses = useCallback(() => {\r\n    if (isAccessibilityMode) {\r\n      announceLoading('Navighez la cursuri...');\r\n      sessionStorage.setItem('accessibilityModeActive', 'true');\r\n    }\r\n    navigate('/courses');\r\n  }, [navigate, isAccessibilityMode, announceLoading]);\r\n\r\n  // FIXAT: Anunț pentru sfârșitul testului cu comenzi rapide\r\n  useEffect(() => {\r\n    if (isFinished && isAccessibilityMode && window.accessibilityManager) {\r\n      setTimeout(() => {\r\n        const message = `Pentru a relua testul, apasă R. Pentru a vizualiza profilul, apasă Alt + R. Pentru a reveni la cursuri, apasă Alt + C.`;\r\n        window.accessibilityManager.speak(message, 'high');\r\n      }, 3000); // După ce se termină anunțul rezultatului\r\n    }\r\n  }, [isFinished, isAccessibilityMode]);\r\n\r\n  // FIXAT: Listener pentru comenzi rapide la sfârșitul testului\r\n  useEffect(() => {\r\n    if (!isAccessibilityMode || !isFinished) return;\r\n\r\n    const handleEndGameKeys = (e) => {\r\n      if (e.key === 'r' || e.key === 'R') {\r\n        e.preventDefault();\r\n        handleRestart();\r\n      } else if (e.altKey && e.key === 'r') {\r\n        e.preventDefault();\r\n        handleBackToProfile();\r\n      } else if (e.altKey && e.key === 'c') {\r\n        e.preventDefault();\r\n        handleBackToCourses();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleEndGameKeys, true);\r\n    return () => document.removeEventListener('keydown', handleEndGameKeys, true);\r\n  }, [isAccessibilityMode, isFinished, handleRestart, handleBackToProfile, handleBackToCourses]);\r\n\r\n  if (error && !questions.length) {\r\n    return (\r\n      <div className=\"quiz-error\">\r\n        <h2>Eroare la încărcarea testului</h2>\r\n        <p>{error}</p>\r\n        <button onClick={() => navigate(-1)}>Înapoi</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (questions.length === 0) {\r\n    return <div className=\"quiz-loading\">Se încarcă întrebările...</div>;\r\n  }\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      {isAccessibilityMode && (\r\n        <div className=\"accessibility-instructions\" style={{ \r\n          position: 'absolute', \r\n          left: '-9999px',\r\n          width: '1px',\r\n          height: '1px' \r\n        }}>\r\n          <p>\r\n            Folosește tastele 1-4 pentru a selecta răspunsurile. Enter pentru a valida răspunsul sau a trece la următoarea întrebare.\r\n          </p>\r\n        </div>\r\n      )}\r\n      \r\n      {/* FIXAT: Titlul să nu afișeze întrebarea greșită la sfârșit */}\r\n      <h2>\r\n        {isFinished ? 'Test finalizat' : `Întrebarea ${currentQuestionIndex + 1}`}\r\n      </h2>\r\n\r\n      {!isFinished ? (\r\n        <div className=\"question-container\">\r\n          <h3 style={{ ...(isAccessibilityMode ? { tabIndex: -1 } : {}) }}>\r\n            {currentQuestion.question}\r\n          </h3>\r\n          <ul>\r\n            {currentQuestion.options.map((option, index) => {\r\n              let className = '';\r\n              if (selectedAnswers[currentQuestionIndex] === index) {\r\n                className = 'selected';\r\n              }\r\n              if (isAnswerChecked) {\r\n                if (index === questions[currentQuestionIndex].correctAnswerIndex) {\r\n                  className = 'correct';\r\n                } else if (selectedAnswers[currentQuestionIndex] === index) {\r\n                  className = 'incorrect';\r\n                }\r\n              }\r\n              return (\r\n                <li\r\n                  key={index}\r\n                  className={className}\r\n                  onClick={() => handleAnswerChange(currentQuestionIndex, index)}\r\n                  role={isAccessibilityMode ? \"button\" : undefined}\r\n                  aria-label={isAccessibilityMode ? `Opțiunea ${index + 1}: ${option}` : undefined}\r\n                  tabIndex={isAccessibilityMode ? 0 : undefined}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={`question-${currentQuestionIndex}-option-${index}`}\r\n                    name={`question-${currentQuestionIndex}`}\r\n                    value={index}\r\n                    checked={selectedAnswers[currentQuestionIndex] === index}\r\n                    onChange={() => {}}\r\n                    style={{ ...(isAccessibilityMode ? { tabIndex: -1 } : {}) }}\r\n                  />\r\n                  <label \r\n                    htmlFor={`question-${currentQuestionIndex}-option-${index}`}\r\n                    style={{ ...(isAccessibilityMode ? { tabIndex: -1 } : {}) }}\r\n                  >\r\n                    {isAccessibilityMode && `${index + 1}. `}{option}\r\n                  </label>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <button \r\n            onClick={handleNext}\r\n            disabled={saving}\r\n            aria-label={isAccessibilityMode ? \r\n              (isAnswerChecked ? 'Treci la următoarea întrebare' : 'Verifică răspunsul selectat') : \r\n              undefined\r\n            }\r\n          >\r\n            {isAnswerChecked ? 'Next' : 'Verifică Răspunsul'}\r\n          </button>\r\n          {error && (\r\n            <div className=\"quiz-error-message\">\r\n              <p>{error}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"result-container\">\r\n          <h3>Testul s-a încheiat</h3>\r\n          <p>Punctajul tău: {score} din {questions.length}</p>\r\n          <p className=\"score-percentage\">Ai obținut {Math.round((score / questions.length) * 100)}%</p>\r\n          \r\n          {saving && <p>Se salvează rezultatul...</p>}\r\n          \r\n          <div className=\"result-actions\">\r\n            <button \r\n              onClick={handleRestart}\r\n              aria-label={isAccessibilityMode ? 'Reîncep testul de la început' : undefined}\r\n            >\r\n              Reia testul\r\n            </button>\r\n            <button \r\n              onClick={handleBackToProfile}\r\n              aria-label={isAccessibilityMode ? 'Merg la pagina de profil' : undefined}\r\n            >\r\n              Vizualizează profilul\r\n            </button>\r\n            <button \r\n              onClick={handleBackToCourses}\r\n              aria-label={isAccessibilityMode ? 'Merg la pagina de cursuri' : undefined}\r\n            >\r\n              Înapoi la cursuri\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccessibleQuiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}