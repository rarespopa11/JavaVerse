{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rares\\\\Documents\\\\licentaV3\\\\java-verse\\\\src\\\\components\\\\AccessibleQuiz.js\",\n  _s = $RefreshSig$();\n// src/components/AccessibleQuiz.js\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAccessibility } from '../hooks/useAccessibility';\nimport '../styles/Quiz.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AccessibleQuiz() {\n  _s();\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [score, setScore] = useState(0);\n  const [isFinished, setIsFinished] = useState(false);\n  const [isAnswerChecked, setIsAnswerChecked] = useState(false);\n  const [courseId, setCourseId] = useState(null);\n  const [totalLessons, setTotalLessons] = useState(0);\n  const [saving, setSaving] = useState(false);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n  const {\n    isAccessibilityMode,\n    useQuizAccessibility,\n    announceLoading,\n    announceError\n  } = useAccessibility();\n  const {\n    announceQuestion,\n    announceAnswerSelected,\n    announceQuizProgress,\n    announceQuizResult\n  } = useQuizAccessibility();\n  const userId = sessionStorage.getItem('userId');\n  const authToken = sessionStorage.getItem('authToken');\n\n  // Listener pentru comenzile rapide de accesibilitate\n  useEffect(() => {\n    if (!isAccessibilityMode) return;\n    const handleKeyPress = e => {\n      if (!isAccessibilityMode || isFinished) return;\n\n      // Selectare răspuns cu tastele 1-4\n      if (['1', '2', '3', '4'].includes(e.key)) {\n        var _questions$currentQue;\n        const answerIndex = parseInt(e.key) - 1;\n        if (answerIndex < ((_questions$currentQue = questions[currentQuestionIndex]) === null || _questions$currentQue === void 0 ? void 0 : _questions$currentQue.options.length)) {\n          handleAnswerChange(currentQuestionIndex, answerIndex);\n          e.preventDefault();\n        }\n      }\n\n      // Trimitere răspuns cu Ctrl+Shift+T\n      if (e.ctrlKey && e.shiftKey && e.key === 'T') {\n        handleNext();\n        e.preventDefault();\n      }\n    };\n    document.addEventListener('keydown', handleKeyPress);\n    return () => document.removeEventListener('keydown', handleKeyPress);\n  }, [isAccessibilityMode, currentQuestionIndex, questions, isFinished]);\n  useEffect(() => {\n    const courseIdFromUrl = window.location.pathname.split('/')[2];\n    setCourseId(courseIdFromUrl);\n    if (!userId || !authToken) {\n      console.error('Utilizatorul nu este autentificat');\n      setError('Trebuie să fii autentificat pentru a susține testul.');\n      if (isAccessibilityMode) {\n        announceError('Trebuie să fii autentificat pentru a susține testul.');\n      }\n      return;\n    }\n    if (isAccessibilityMode) {\n      announceLoading('Se încarcă întrebările testului...');\n    }\n    fetch(`http://localhost:5000/api/courses/${courseIdFromUrl}`).then(response => response.json()).then(data => {\n      if (data.course && data.course.questions) {\n        setQuestions(data.course.questions);\n        setTotalLessons(data.course.totalLessons);\n        if (isAccessibilityMode) {\n          setTimeout(() => {\n            announceQuestion(1, data.course.questions.length, data.course.questions[0].question, data.course.questions[0].options);\n          }, 1500);\n        }\n      }\n    }).catch(error => {\n      console.error('Error fetching questions:', error);\n      setError('Nu am putut încărca întrebările pentru test.');\n      if (isAccessibilityMode) {\n        announceError('Nu am putut încărca întrebările pentru test.');\n      }\n    });\n  }, [userId, authToken, isAccessibilityMode]);\n  const handleAnswerChange = useCallback((index, answerIndex) => {\n    const updatedAnswers = [...selectedAnswers];\n    updatedAnswers[index] = answerIndex;\n    setSelectedAnswers(updatedAnswers);\n    if (isAccessibilityMode) {\n      const selectedOption = questions[currentQuestionIndex].options[answerIndex];\n      announceAnswerSelected(answerIndex, selectedOption);\n    }\n  }, [selectedAnswers, currentQuestionIndex, questions, isAccessibilityMode, announceAnswerSelected]);\n  const saveProgress = useCallback(async testScore => {\n    if (!userId || !courseId) {\n      console.error('Lipsesc informații esențiale: userId sau courseId');\n      return;\n    }\n    setSaving(true);\n    if (isAccessibilityMode) {\n      announceLoading('Se salvează rezultatul testului...');\n    }\n    try {\n      const progressResponse = await fetch(`http://localhost:5000/api/user/progress/${userId}`, {\n        headers: {\n          'Authorization': `Bearer ${authToken}`\n        }\n      });\n      const progressData = await progressResponse.json();\n      const currentProgress = progressData.find(p => p.courseId._id === courseId);\n      const completedLessons = currentProgress ? currentProgress.completedLessons : totalLessons;\n      const response = await fetch('http://localhost:5000/api/user/progress', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${authToken}`\n        },\n        body: JSON.stringify({\n          userId,\n          courseId,\n          completedLessons,\n          totalLessons,\n          testScore\n        })\n      });\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || 'Eroare la salvarea progresului');\n      }\n      console.log('Progresul la test salvat cu succes');\n    } catch (error) {\n      console.error('Eroare la salvarea progresului testului:', error);\n      setError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\n      if (isAccessibilityMode) {\n        announceError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\n      }\n    } finally {\n      setSaving(false);\n    }\n  }, [userId, courseId, totalLessons, authToken, isAccessibilityMode, announceLoading, announceError]);\n  const handleNext = useCallback(() => {\n    if (isAnswerChecked) {\n      if (currentQuestionIndex < questions.length - 1) {\n        const nextIndex = currentQuestionIndex + 1;\n        setCurrentQuestionIndex(nextIndex);\n        setIsAnswerChecked(false);\n        if (isAccessibilityMode) {\n          announceQuizProgress(nextIndex + 1, questions.length);\n          setTimeout(() => {\n            announceQuestion(nextIndex + 1, questions.length, questions[nextIndex].question, questions[nextIndex].options);\n          }, 1000);\n        }\n      } else {\n        const finalScore = Math.round(score / questions.length * 100);\n        saveProgress(finalScore);\n        setIsFinished(true);\n        if (isAccessibilityMode) {\n          setTimeout(() => {\n            announceQuizResult(score, questions.length);\n          }, 1000);\n        }\n      }\n    } else {\n      if (selectedAnswers[currentQuestionIndex] === undefined) {\n        const message = 'Te rugăm să selectezi un răspuns!';\n        alert(message);\n        if (isAccessibilityMode) {\n          announceError(message);\n        }\n        return;\n      }\n      if (selectedAnswers[currentQuestionIndex] === questions[currentQuestionIndex].correctAnswerIndex) {\n        setScore(prevScore => prevScore + 1);\n      }\n      setIsAnswerChecked(true);\n      if (isAccessibilityMode) {\n        const isCorrect = selectedAnswers[currentQuestionIndex] === questions[currentQuestionIndex].correctAnswerIndex;\n        const message = isCorrect ? 'Răspuns corect!' : 'Răspuns incorect.';\n        setTimeout(() => {\n          announceAnswerSelected(selectedAnswers[currentQuestionIndex], message);\n        }, 500);\n      }\n    }\n  }, [isAnswerChecked, currentQuestionIndex, questions, selectedAnswers, score, saveProgress, isAccessibilityMode, announceQuestion, announceQuizProgress, announceQuizResult, announceError, announceAnswerSelected]);\n  const handleRestart = useCallback(() => {\n    setScore(0);\n    setCurrentQuestionIndex(0);\n    setSelectedAnswers([]);\n    setIsFinished(false);\n    setIsAnswerChecked(false);\n    setError(null);\n    if (isAccessibilityMode) {\n      setTimeout(() => {\n        announceQuestion(1, questions.length, questions[0].question, questions[0].options);\n      }, 1000);\n    }\n  }, [isAccessibilityMode, questions, announceQuestion]);\n  const handleBackToProfile = useCallback(() => {\n    if (isAccessibilityMode) {\n      announceLoading('Navighez la profil...');\n    }\n    navigate('/profile');\n  }, [navigate, isAccessibilityMode, announceLoading]);\n  if (error && !questions.length) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-error\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Eroare la \\xEEnc\\u0103rcarea testului\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => navigate(-1),\n        children: \"\\xCEnapoi\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this);\n  }\n  if (questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-loading\",\n      children: \"Se \\xEEncarc\\u0103 \\xEEntreb\\u0103rile...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 12\n    }, this);\n  }\n  const currentQuestion = questions[currentQuestionIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"quiz-container\",\n    children: [isAccessibilityMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"accessibility-instructions\",\n      style: {\n        position: 'absolute',\n        left: '-9999px',\n        width: '1px',\n        height: '1px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Folose\\u0219te tastele 1-4 pentru a selecta r\\u0103spunsurile. Control+Shift+T pentru a trimite r\\u0103spunsul.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"\\xCEntrebarea \", currentQuestionIndex + 1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), !isFinished ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: currentQuestion.options.map((option, index) => {\n          let className = '';\n          if (selectedAnswers[currentQuestionIndex] === index) {\n            className = 'selected';\n          }\n          if (isAnswerChecked) {\n            if (index === questions[currentQuestionIndex].correctAnswerIndex) {\n              className = 'correct';\n            } else if (selectedAnswers[currentQuestionIndex] === index) {\n              className = 'incorrect';\n            }\n          }\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            className: className,\n            onClick: () => handleAnswerChange(currentQuestionIndex, index),\n            role: isAccessibilityMode ? \"button\" : undefined,\n            \"aria-label\": isAccessibilityMode ? `Opțiunea ${index + 1}: ${option}` : undefined,\n            tabIndex: isAccessibilityMode ? 0 : undefined,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"radio\",\n              id: `question-${currentQuestionIndex}-option-${index}`,\n              name: `question-${currentQuestionIndex}`,\n              value: index,\n              checked: selectedAnswers[currentQuestionIndex] === index,\n              onChange: () => {}\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: `question-${currentQuestionIndex}-option-${index}`,\n              children: [isAccessibilityMode && `${index + 1}. `, option]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 306,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 290,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleNext,\n        disabled: saving,\n        \"aria-label\": isAccessibilityMode ? isAnswerChecked ? 'Treci la următoarea întrebare' : 'Verifică răspunsul selectat' : undefined,\n        children: isAnswerChecked ? 'Next' : 'Verifică Răspunsul'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 313,\n        columnNumber: 11\n      }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"quiz-error-message\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: error\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Testul s-a \\xEEncheiat\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Punctajul t\\u0103u: \", score, \" din \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"score-percentage\",\n        children: [\"Ai ob\\u021Binut \", Math.round(score / questions.length * 100), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this), saving && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Se salveaz\\u0103 rezultatul...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 335,\n        columnNumber: 22\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"result-actions\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleRestart,\n          \"aria-label\": isAccessibilityMode ? 'Reîncep testul de la început' : undefined,\n          children: \"Reia testul\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleBackToProfile,\n          \"aria-label\": isAccessibilityMode ? 'Merg la pagina de profil' : undefined,\n          children: \"Vizualizeaz\\u0103 profilul\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 344,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n}\n_s(AccessibleQuiz, \"9qgA5gv/aWmkJmawcP0kRfw9ze8=\", false, function () {\n  return [useNavigate, useAccessibility, useQuizAccessibility];\n});\n_c = AccessibleQuiz;\nexport default AccessibleQuiz;\nvar _c;\n$RefreshReg$(_c, \"AccessibleQuiz\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","useAccessibility","jsxDEV","_jsxDEV","AccessibleQuiz","_s","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","score","setScore","isFinished","setIsFinished","isAnswerChecked","setIsAnswerChecked","courseId","setCourseId","totalLessons","setTotalLessons","saving","setSaving","error","setError","navigate","isAccessibilityMode","useQuizAccessibility","announceLoading","announceError","announceQuestion","announceAnswerSelected","announceQuizProgress","announceQuizResult","userId","sessionStorage","getItem","authToken","handleKeyPress","e","includes","key","_questions$currentQue","answerIndex","parseInt","options","length","handleAnswerChange","preventDefault","ctrlKey","shiftKey","handleNext","document","addEventListener","removeEventListener","courseIdFromUrl","window","location","pathname","split","console","fetch","then","response","json","data","course","setTimeout","question","catch","index","updatedAnswers","selectedOption","saveProgress","testScore","progressResponse","headers","progressData","currentProgress","find","p","_id","completedLessons","method","body","JSON","stringify","success","Error","message","log","nextIndex","finalScore","Math","round","undefined","alert","correctAnswerIndex","prevScore","isCorrect","handleRestart","handleBackToProfile","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","currentQuestion","style","position","left","width","height","map","option","role","tabIndex","type","id","name","value","checked","onChange","htmlFor","disabled","_c","$RefreshReg$"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/components/AccessibleQuiz.js"],"sourcesContent":["// src/components/AccessibleQuiz.js\r\nimport React, { useState, useEffect, useCallback } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAccessibility } from '../hooks/useAccessibility';\r\nimport '../styles/Quiz.css';\r\n\r\nfunction AccessibleQuiz() {\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\r\n  const [score, setScore] = useState(0);\r\n  const [isFinished, setIsFinished] = useState(false);\r\n  const [isAnswerChecked, setIsAnswerChecked] = useState(false);\r\n  const [courseId, setCourseId] = useState(null);\r\n  const [totalLessons, setTotalLessons] = useState(0);\r\n  const [saving, setSaving] = useState(false);\r\n  const [error, setError] = useState(null);\r\n  \r\n  const navigate = useNavigate();\r\n  const { isAccessibilityMode, useQuizAccessibility, announceLoading, announceError } = useAccessibility();\r\n  const { announceQuestion, announceAnswerSelected, announceQuizProgress, announceQuizResult } = useQuizAccessibility();\r\n\r\n  const userId = sessionStorage.getItem('userId');\r\n  const authToken = sessionStorage.getItem('authToken');\r\n\r\n  // Listener pentru comenzile rapide de accesibilitate\r\n  useEffect(() => {\r\n    if (!isAccessibilityMode) return;\r\n\r\n    const handleKeyPress = (e) => {\r\n      if (!isAccessibilityMode || isFinished) return;\r\n\r\n      // Selectare răspuns cu tastele 1-4\r\n      if (['1', '2', '3', '4'].includes(e.key)) {\r\n        const answerIndex = parseInt(e.key) - 1;\r\n        if (answerIndex < questions[currentQuestionIndex]?.options.length) {\r\n          handleAnswerChange(currentQuestionIndex, answerIndex);\r\n          e.preventDefault();\r\n        }\r\n      }\r\n      \r\n      // Trimitere răspuns cu Ctrl+Shift+T\r\n      if (e.ctrlKey && e.shiftKey && e.key === 'T') {\r\n        handleNext();\r\n        e.preventDefault();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyPress);\r\n    return () => document.removeEventListener('keydown', handleKeyPress);\r\n  }, [isAccessibilityMode, currentQuestionIndex, questions, isFinished]);\r\n\r\n  useEffect(() => {\r\n    const courseIdFromUrl = window.location.pathname.split('/')[2];\r\n    setCourseId(courseIdFromUrl);\r\n\r\n    if (!userId || !authToken) {\r\n      console.error('Utilizatorul nu este autentificat');\r\n      setError('Trebuie să fii autentificat pentru a susține testul.');\r\n      if (isAccessibilityMode) {\r\n        announceError('Trebuie să fii autentificat pentru a susține testul.');\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (isAccessibilityMode) {\r\n      announceLoading('Se încarcă întrebările testului...');\r\n    }\r\n\r\n    fetch(`http://localhost:5000/api/courses/${courseIdFromUrl}`)\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        if (data.course && data.course.questions) {\r\n          setQuestions(data.course.questions);\r\n          setTotalLessons(data.course.totalLessons);\r\n          \r\n          if (isAccessibilityMode) {\r\n            setTimeout(() => {\r\n              announceQuestion(\r\n                1, \r\n                data.course.questions.length, \r\n                data.course.questions[0].question, \r\n                data.course.questions[0].options\r\n              );\r\n            }, 1500);\r\n          }\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error('Error fetching questions:', error);\r\n        setError('Nu am putut încărca întrebările pentru test.');\r\n        if (isAccessibilityMode) {\r\n          announceError('Nu am putut încărca întrebările pentru test.');\r\n        }\r\n      });\r\n  }, [userId, authToken, isAccessibilityMode]);\r\n\r\n  const handleAnswerChange = useCallback((index, answerIndex) => {\r\n    const updatedAnswers = [...selectedAnswers];\r\n    updatedAnswers[index] = answerIndex;\r\n    setSelectedAnswers(updatedAnswers);\r\n\r\n    if (isAccessibilityMode) {\r\n      const selectedOption = questions[currentQuestionIndex].options[answerIndex];\r\n      announceAnswerSelected(answerIndex, selectedOption);\r\n    }\r\n  }, [selectedAnswers, currentQuestionIndex, questions, isAccessibilityMode, announceAnswerSelected]);\r\n\r\n  const saveProgress = useCallback(async (testScore) => {\r\n    if (!userId || !courseId) {\r\n      console.error('Lipsesc informații esențiale: userId sau courseId');\r\n      return;\r\n    }\r\n\r\n    setSaving(true);\r\n    \r\n    if (isAccessibilityMode) {\r\n      announceLoading('Se salvează rezultatul testului...');\r\n    }\r\n    \r\n    try {\r\n      const progressResponse = await fetch(`http://localhost:5000/api/user/progress/${userId}`, {\r\n        headers: {\r\n          'Authorization': `Bearer ${authToken}`\r\n        }\r\n      });\r\n      const progressData = await progressResponse.json();\r\n      \r\n      const currentProgress = progressData.find(p => p.courseId._id === courseId);\r\n      const completedLessons = currentProgress ? currentProgress.completedLessons : totalLessons;\r\n\r\n      const response = await fetch('http://localhost:5000/api/user/progress', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': `Bearer ${authToken}`\r\n        },\r\n        body: JSON.stringify({\r\n          userId,\r\n          courseId,\r\n          completedLessons,\r\n          totalLessons,\r\n          testScore,\r\n        }),\r\n      });\r\n      \r\n      const data = await response.json();\r\n      \r\n      if (!data.success) {\r\n        throw new Error(data.message || 'Eroare la salvarea progresului');\r\n      }\r\n      \r\n      console.log('Progresul la test salvat cu succes');\r\n    } catch (error) {\r\n      console.error('Eroare la salvarea progresului testului:', error);\r\n      setError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\r\n      if (isAccessibilityMode) {\r\n        announceError('Nu am putut salva progresul. Te rugăm să încerci din nou.');\r\n      }\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  }, [userId, courseId, totalLessons, authToken, isAccessibilityMode, announceLoading, announceError]);\r\n\r\n  const handleNext = useCallback(() => {\r\n    if (isAnswerChecked) {\r\n      if (currentQuestionIndex < questions.length - 1) {\r\n        const nextIndex = currentQuestionIndex + 1;\r\n        setCurrentQuestionIndex(nextIndex);\r\n        setIsAnswerChecked(false);\r\n        \r\n        if (isAccessibilityMode) {\r\n          announceQuizProgress(nextIndex + 1, questions.length);\r\n          setTimeout(() => {\r\n            announceQuestion(\r\n              nextIndex + 1,\r\n              questions.length,\r\n              questions[nextIndex].question,\r\n              questions[nextIndex].options\r\n            );\r\n          }, 1000);\r\n        }\r\n      } else {\r\n        const finalScore = Math.round((score / questions.length) * 100);\r\n        saveProgress(finalScore);\r\n        setIsFinished(true);\r\n        \r\n        if (isAccessibilityMode) {\r\n          setTimeout(() => {\r\n            announceQuizResult(score, questions.length);\r\n          }, 1000);\r\n        }\r\n      }\r\n    } else {\r\n      if (selectedAnswers[currentQuestionIndex] === undefined) {\r\n        const message = 'Te rugăm să selectezi un răspuns!';\r\n        alert(message);\r\n        if (isAccessibilityMode) {\r\n          announceError(message);\r\n        }\r\n        return;\r\n      }\r\n\r\n      if (selectedAnswers[currentQuestionIndex] === questions[currentQuestionIndex].correctAnswerIndex) {\r\n        setScore(prevScore => prevScore + 1);\r\n      }\r\n\r\n      setIsAnswerChecked(true);\r\n      \r\n      if (isAccessibilityMode) {\r\n        const isCorrect = selectedAnswers[currentQuestionIndex] === questions[currentQuestionIndex].correctAnswerIndex;\r\n        const message = isCorrect ? 'Răspuns corect!' : 'Răspuns incorect.';\r\n        setTimeout(() => {\r\n          announceAnswerSelected(selectedAnswers[currentQuestionIndex], message);\r\n        }, 500);\r\n      }\r\n    }\r\n  }, [isAnswerChecked, currentQuestionIndex, questions, selectedAnswers, score, saveProgress, isAccessibilityMode, announceQuestion, announceQuizProgress, announceQuizResult, announceError, announceAnswerSelected]);\r\n\r\n  const handleRestart = useCallback(() => {\r\n    setScore(0);\r\n    setCurrentQuestionIndex(0);\r\n    setSelectedAnswers([]);\r\n    setIsFinished(false);\r\n    setIsAnswerChecked(false);\r\n    setError(null);\r\n    \r\n    if (isAccessibilityMode) {\r\n      setTimeout(() => {\r\n        announceQuestion(1, questions.length, questions[0].question, questions[0].options);\r\n      }, 1000);\r\n    }\r\n  }, [isAccessibilityMode, questions, announceQuestion]);\r\n\r\n  const handleBackToProfile = useCallback(() => {\r\n    if (isAccessibilityMode) {\r\n      announceLoading('Navighez la profil...');\r\n    }\r\n    navigate('/profile');\r\n  }, [navigate, isAccessibilityMode, announceLoading]);\r\n\r\n  if (error && !questions.length) {\r\n    return (\r\n      <div className=\"quiz-error\">\r\n        <h2>Eroare la încărcarea testului</h2>\r\n        <p>{error}</p>\r\n        <button onClick={() => navigate(-1)}>Înapoi</button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (questions.length === 0) {\r\n    return <div className=\"quiz-loading\">Se încarcă întrebările...</div>;\r\n  }\r\n\r\n  const currentQuestion = questions[currentQuestionIndex];\r\n\r\n  return (\r\n    <div className=\"quiz-container\">\r\n      {isAccessibilityMode && (\r\n        <div className=\"accessibility-instructions\" style={{ \r\n          position: 'absolute', \r\n          left: '-9999px',\r\n          width: '1px',\r\n          height: '1px' \r\n        }}>\r\n          <p>Folosește tastele 1-4 pentru a selecta răspunsurile. Control+Shift+T pentru a trimite răspunsul.</p>\r\n        </div>\r\n      )}\r\n      \r\n      <h2>Întrebarea {currentQuestionIndex + 1}</h2>\r\n\r\n      {!isFinished ? (\r\n        <div className=\"question-container\">\r\n          <h3>{currentQuestion.question}</h3>\r\n          <ul>\r\n            {currentQuestion.options.map((option, index) => {\r\n              let className = '';\r\n              if (selectedAnswers[currentQuestionIndex] === index) {\r\n                className = 'selected';\r\n              }\r\n              if (isAnswerChecked) {\r\n                if (index === questions[currentQuestionIndex].correctAnswerIndex) {\r\n                  className = 'correct';\r\n                } else if (selectedAnswers[currentQuestionIndex] === index) {\r\n                  className = 'incorrect';\r\n                }\r\n              }\r\n              return (\r\n                <li\r\n                  key={index}\r\n                  className={className}\r\n                  onClick={() => handleAnswerChange(currentQuestionIndex, index)}\r\n                  role={isAccessibilityMode ? \"button\" : undefined}\r\n                  aria-label={isAccessibilityMode ? `Opțiunea ${index + 1}: ${option}` : undefined}\r\n                  tabIndex={isAccessibilityMode ? 0 : undefined}\r\n                >\r\n                  <input\r\n                    type=\"radio\"\r\n                    id={`question-${currentQuestionIndex}-option-${index}`}\r\n                    name={`question-${currentQuestionIndex}`}\r\n                    value={index}\r\n                    checked={selectedAnswers[currentQuestionIndex] === index}\r\n                    onChange={() => {}}\r\n                  />\r\n                  <label htmlFor={`question-${currentQuestionIndex}-option-${index}`}>\r\n                    {isAccessibilityMode && `${index + 1}. `}{option}\r\n                  </label>\r\n                </li>\r\n              );\r\n            })}\r\n          </ul>\r\n          <button \r\n            onClick={handleNext}\r\n            disabled={saving}\r\n            aria-label={isAccessibilityMode ? \r\n              (isAnswerChecked ? 'Treci la următoarea întrebare' : 'Verifică răspunsul selectat') : \r\n              undefined\r\n            }\r\n          >\r\n            {isAnswerChecked ? 'Next' : 'Verifică Răspunsul'}\r\n          </button>\r\n          {error && (\r\n            <div className=\"quiz-error-message\">\r\n              <p>{error}</p>\r\n            </div>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <div className=\"result-container\">\r\n          <h3>Testul s-a încheiat</h3>\r\n          <p>Punctajul tău: {score} din {questions.length}</p>\r\n          <p className=\"score-percentage\">Ai obținut {Math.round((score / questions.length) * 100)}%</p>\r\n          \r\n          {saving && <p>Se salvează rezultatul...</p>}\r\n          \r\n          <div className=\"result-actions\">\r\n            <button \r\n              onClick={handleRestart}\r\n              aria-label={isAccessibilityMode ? 'Reîncep testul de la început' : undefined}\r\n            >\r\n              Reia testul\r\n            </button>\r\n            <button \r\n              onClick={handleBackToProfile}\r\n              aria-label={isAccessibilityMode ? 'Merg la pagina de profil' : undefined}\r\n            >\r\n              Vizualizează profilul\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccessibleQuiz;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}