{"ast":null,"code":"var _s5 = $RefreshSig$();\n// src/hooks/useAccessibility.js\nimport { useState, useEffect, useCallback } from 'react';\nimport accessibilityManager from '../utils/AccessibilityManager';\n\n/**\r\n * Hook React pentru integrarea cu sistemul de accesibilitate\r\n * Permite componentelor să interacționeze cu funcționalitățile pentru nevăzători\r\n */\nexport const useAccessibility = () => {\n  _s5();\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n  const [isAccessibilityMode, setIsAccessibilityMode] = useState(false);\n  const [isSpeaking, setIsSpeaking] = useState(false);\n  useEffect(() => {\n    // Monitorizăm schimbările de stare ale accessibility manager-ului\n    const handleAccessibilityChange = event => {\n      setIsAccessibilityMode(event.detail.isActive);\n    };\n    const handleSpeechStart = () => setIsSpeaking(true);\n    const handleSpeechEnd = () => setIsSpeaking(false);\n\n    // Adăugăm listenerii\n    document.addEventListener('accessibilityModeChanged', handleAccessibilityChange);\n\n    // Monitorizăm schimbările de vorbire\n    const checkSpeechStatus = () => {\n      setIsSpeaking(accessibilityManager.isSpeaking);\n    };\n    const intervalId = setInterval(checkSpeechStatus, 200);\n\n    // Setăm starea inițială\n    setIsAccessibilityMode(accessibilityManager.isActive);\n    setIsSpeaking(accessibilityManager.isSpeaking);\n\n    // Cleanup\n    return () => {\n      document.removeEventListener('accessibilityModeChanged', handleAccessibilityChange);\n      clearInterval(intervalId);\n    };\n  }, []);\n\n  // Funcții pentru interacțiunea cu accessibility manager\n  const announce = useCallback((message, priority = 'normal') => {\n    accessibilityManager.announce(message, priority);\n  }, []);\n  const stopReading = useCallback(() => {\n    accessibilityManager.stopReading();\n  }, []);\n  const readPageContent = useCallback(() => {\n    accessibilityManager.readCurrentPage();\n  }, []);\n  const readQuizQuestion = useCallback((question, options) => {\n    accessibilityManager.readQuizQuestion(question, options);\n  }, []);\n  const announceQuizResult = useCallback((score, totalQuestions) => {\n    accessibilityManager.announceQuizResult(score, totalQuestions);\n  }, []);\n  const readCodeLine = useCallback(lineNumber => {\n    accessibilityManager.readCodeLine(lineNumber);\n  }, []);\n  const announceCodeChange = useCallback((newCode, position) => {\n    accessibilityManager.announceCodeChange(newCode, position);\n  }, []);\n  const announceNavigation = useCallback(pageName => {\n    announce(`Navigând la ${pageName}`, 'high');\n  }, [announce]);\n  const announceError = useCallback(errorMessage => {\n    announce(`Eroare: ${errorMessage}`, 'high');\n  }, [announce]);\n  const announceSuccess = useCallback(successMessage => {\n    announce(`Succes: ${successMessage}`, 'high');\n  }, [announce]);\n  const announceLoading = useCallback((loadingMessage = 'Se încarcă...') => {\n    announce(loadingMessage, 'normal');\n  }, [announce]);\n  const announceFormError = useCallback((fieldName, errorMessage) => {\n    announce(`Eroare la câmpul ${fieldName}: ${errorMessage}`, 'high');\n  }, [announce]);\n  const announceFormSuccess = useCallback(successMessage => {\n    announce(`Formular trimis cu succes: ${successMessage}`, 'high');\n  }, [announce]);\n\n  // Hook pentru componente specifice\n  const useQuizAccessibility = () => {\n    _s();\n    const announceQuestion = useCallback((questionNumber, totalQuestions, question, options) => {\n      const text = `Întrebarea ${questionNumber} din ${totalQuestions}: ${question}. ` + `Variantele de răspuns sunt: ` + options.map((option, index) => `${index + 1}: ${option}`).join('. ') + `. Folosește tastele 1 până la ${options.length} pentru a selecta răspunsul.`;\n      announce(text, 'high');\n    }, []);\n    const announceAnswerSelected = useCallback((answerIndex, answerText) => {\n      announce(`Ai selectat răspunsul ${answerIndex + 1}: ${answerText}`, 'normal');\n    }, []);\n    const announceQuizProgress = useCallback((currentQuestion, totalQuestions) => {\n      announce(`Progres: întrebarea ${currentQuestion} din ${totalQuestions}`, 'normal');\n    }, []);\n    return {\n      announceQuestion,\n      announceAnswerSelected,\n      announceQuizProgress,\n      announceQuizResult\n    };\n  };\n  _s(useQuizAccessibility, \"Y57P9LboQLMT1FW0GBThk9S/+iM=\");\n  const useCodeEditorAccessibility = () => {\n    _s2();\n    const announceCodeExecution = useCallback(() => {\n      announce('Se execută codul...', 'high');\n    }, []);\n    const announceExecutionResult = useCallback((output, hasError = false) => {\n      const prefix = hasError ? 'Eroare la execuție:' : 'Rezultatul execuției:';\n      announce(`${prefix} ${output}`, 'high');\n    }, []);\n    const announceFeedbackRequest = useCallback(() => {\n      announce('Se solicită feedback de la AI...', 'normal');\n    }, []);\n    const announceFeedbackReceived = useCallback(feedback => {\n      announce(`Feedback primit: ${feedback}`, 'high');\n    }, []);\n    const announceCodeSaved = useCallback(() => {\n      announce('Codul a fost salvat', 'normal');\n    }, []);\n    const announceLineNavigation = useCallback((lineNumber, lineContent) => {\n      announce(`Linia ${lineNumber}: ${lineContent}`, 'normal');\n    }, []);\n    return {\n      announceCodeExecution,\n      announceExecutionResult,\n      announceFeedbackRequest,\n      announceFeedbackReceived,\n      announceCodeSaved,\n      announceLineNavigation,\n      announceCodeChange\n    };\n  };\n  _s2(useCodeEditorAccessibility, \"zmqNoLTdVwW3u/oRWroTkAimdMI=\");\n  const useCourseAccessibility = () => {\n    _s3();\n    const announceLessonStart = useCallback((lessonTitle, lessonNumber, totalLessons) => {\n      announce(`Începe lecția ${lessonNumber} din ${totalLessons}: ${lessonTitle}`, 'high');\n    }, []);\n    const announceLessonContent = useCallback(content => {\n      announce(`Conținutul lecției: ${content}`, 'normal');\n    }, []);\n    const announceCodeExample = useCallback((code, explanation) => {\n      announce(`Exemplu de cod: ${code}. Explicație: ${explanation}`, 'normal');\n    }, []);\n    const announceLessonComplete = useCallback(lessonTitle => {\n      announce(`Lecția ${lessonTitle} a fost completată cu succes!`, 'high');\n    }, []);\n    const announceCourseProgress = useCallback((completedLessons, totalLessons) => {\n      const percentage = Math.round(completedLessons / totalLessons * 100);\n      announce(`Progres curs: ${completedLessons} din ${totalLessons} lecții completate (${percentage}%)`, 'normal');\n    }, []);\n    return {\n      announceLessonStart,\n      announceLessonContent,\n      announceCodeExample,\n      announceLessonComplete,\n      announceCourseProgress\n    };\n  };\n  _s3(useCourseAccessibility, \"zA1icSm+TGW6mMxaXS9R+BIk29E=\");\n  const useNavigationAccessibility = () => {\n    _s4();\n    const announcePageLoad = useCallback((pageName, pageDescription = '') => {\n      announce(`Pagina ${pageName} încărcată. ${pageDescription}`, 'high');\n    }, []);\n    const announceMenuOpen = useCallback(menuName => {\n      announce(`Meniul ${menuName} este deschis. Folosește săgețile pentru navigare.`, 'normal');\n    }, []);\n    const announceMenuClose = useCallback(menuName => {\n      announce(`Meniul ${menuName} s-a închis`, 'normal');\n    }, []);\n    const announceModalOpen = useCallback((modalTitle, modalDescription = '') => {\n      announce(`Modal deschis: ${modalTitle}. ${modalDescription}`, 'high');\n    }, []);\n    const announceModalClose = useCallback(() => {\n      announce('Modal închis', 'normal');\n    }, []);\n    return {\n      announcePageLoad,\n      announceMenuOpen,\n      announceMenuClose,\n      announceModalOpen,\n      announceModalClose\n    };\n  };\n  _s4(useNavigationAccessibility, \"WDqjC7Q+j0hg6OzdiLtluyEW+YI=\");\n  return {\n    // Stare\n    isAccessibilityMode,\n    isSpeaking,\n    // Funcții generale\n    announce,\n    stopReading,\n    readPageContent,\n    // Funcții pentru anunțuri specifice\n    announceNavigation,\n    announceError,\n    announceSuccess,\n    announceLoading,\n    announceFormError,\n    announceFormSuccess,\n    // Hooks specializate pentru componente\n    useQuizAccessibility,\n    useCodeEditorAccessibility,\n    useCourseAccessibility,\n    useNavigationAccessibility\n  };\n};\n_s5(useAccessibility, \"7XuVkx/apwrB4cEjkyE7WpWsh2Q=\");\nexport default useAccessibility;","map":{"version":3,"names":["useState","useEffect","useCallback","accessibilityManager","useAccessibility","_s5","_s","$RefreshSig$","_s2","_s3","_s4","isAccessibilityMode","setIsAccessibilityMode","isSpeaking","setIsSpeaking","handleAccessibilityChange","event","detail","isActive","handleSpeechStart","handleSpeechEnd","document","addEventListener","checkSpeechStatus","intervalId","setInterval","removeEventListener","clearInterval","announce","message","priority","stopReading","readPageContent","readCurrentPage","readQuizQuestion","question","options","announceQuizResult","score","totalQuestions","readCodeLine","lineNumber","announceCodeChange","newCode","position","announceNavigation","pageName","announceError","errorMessage","announceSuccess","successMessage","announceLoading","loadingMessage","announceFormError","fieldName","announceFormSuccess","useQuizAccessibility","announceQuestion","questionNumber","text","map","option","index","join","length","announceAnswerSelected","answerIndex","answerText","announceQuizProgress","currentQuestion","useCodeEditorAccessibility","announceCodeExecution","announceExecutionResult","output","hasError","prefix","announceFeedbackRequest","announceFeedbackReceived","feedback","announceCodeSaved","announceLineNavigation","lineContent","useCourseAccessibility","announceLessonStart","lessonTitle","lessonNumber","totalLessons","announceLessonContent","content","announceCodeExample","code","explanation","announceLessonComplete","announceCourseProgress","completedLessons","percentage","Math","round","useNavigationAccessibility","announcePageLoad","pageDescription","announceMenuOpen","menuName","announceMenuClose","announceModalOpen","modalTitle","modalDescription","announceModalClose"],"sources":["C:/Users/rares/Documents/licentaV3/java-verse/src/hooks/useAccessibility.js"],"sourcesContent":["// src/hooks/useAccessibility.js\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport accessibilityManager from '../utils/AccessibilityManager';\r\n\r\n/**\r\n * Hook React pentru integrarea cu sistemul de accesibilitate\r\n * Permite componentelor să interacționeze cu funcționalitățile pentru nevăzători\r\n */\r\nexport const useAccessibility = () => {\r\n  const [isAccessibilityMode, setIsAccessibilityMode] = useState(false);\r\n  const [isSpeaking, setIsSpeaking] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Monitorizăm schimbările de stare ale accessibility manager-ului\r\n    const handleAccessibilityChange = (event) => {\r\n      setIsAccessibilityMode(event.detail.isActive);\r\n    };\r\n\r\n    const handleSpeechStart = () => setIsSpeaking(true);\r\n    const handleSpeechEnd = () => setIsSpeaking(false);\r\n\r\n    // Adăugăm listenerii\r\n    document.addEventListener('accessibilityModeChanged', handleAccessibilityChange);\r\n    \r\n    // Monitorizăm schimbările de vorbire\r\n    const checkSpeechStatus = () => {\r\n      setIsSpeaking(accessibilityManager.isSpeaking);\r\n    };\r\n    \r\n    const intervalId = setInterval(checkSpeechStatus, 200);\r\n\r\n    // Setăm starea inițială\r\n    setIsAccessibilityMode(accessibilityManager.isActive);\r\n    setIsSpeaking(accessibilityManager.isSpeaking);\r\n\r\n    // Cleanup\r\n    return () => {\r\n      document.removeEventListener('accessibilityModeChanged', handleAccessibilityChange);\r\n      clearInterval(intervalId);\r\n    };\r\n  }, []);\r\n\r\n  // Funcții pentru interacțiunea cu accessibility manager\r\n  const announce = useCallback((message, priority = 'normal') => {\r\n    accessibilityManager.announce(message, priority);\r\n  }, []);\r\n\r\n  const stopReading = useCallback(() => {\r\n    accessibilityManager.stopReading();\r\n  }, []);\r\n\r\n  const readPageContent = useCallback(() => {\r\n    accessibilityManager.readCurrentPage();\r\n  }, []);\r\n\r\n  const readQuizQuestion = useCallback((question, options) => {\r\n    accessibilityManager.readQuizQuestion(question, options);\r\n  }, []);\r\n\r\n  const announceQuizResult = useCallback((score, totalQuestions) => {\r\n    accessibilityManager.announceQuizResult(score, totalQuestions);\r\n  }, []);\r\n\r\n  const readCodeLine = useCallback((lineNumber) => {\r\n    accessibilityManager.readCodeLine(lineNumber);\r\n  }, []);\r\n\r\n  const announceCodeChange = useCallback((newCode, position) => {\r\n    accessibilityManager.announceCodeChange(newCode, position);\r\n  }, []);\r\n\r\n  const announceNavigation = useCallback((pageName) => {\r\n    announce(`Navigând la ${pageName}`, 'high');\r\n  }, [announce]);\r\n\r\n  const announceError = useCallback((errorMessage) => {\r\n    announce(`Eroare: ${errorMessage}`, 'high');\r\n  }, [announce]);\r\n\r\n  const announceSuccess = useCallback((successMessage) => {\r\n    announce(`Succes: ${successMessage}`, 'high');\r\n  }, [announce]);\r\n\r\n  const announceLoading = useCallback((loadingMessage = 'Se încarcă...') => {\r\n    announce(loadingMessage, 'normal');\r\n  }, [announce]);\r\n\r\n  const announceFormError = useCallback((fieldName, errorMessage) => {\r\n    announce(`Eroare la câmpul ${fieldName}: ${errorMessage}`, 'high');\r\n  }, [announce]);\r\n\r\n  const announceFormSuccess = useCallback((successMessage) => {\r\n    announce(`Formular trimis cu succes: ${successMessage}`, 'high');\r\n  }, [announce]);\r\n\r\n  // Hook pentru componente specifice\r\n  const useQuizAccessibility = () => {\r\n    const announceQuestion = useCallback((questionNumber, totalQuestions, question, options) => {\r\n      const text = `Întrebarea ${questionNumber} din ${totalQuestions}: ${question}. ` +\r\n                  `Variantele de răspuns sunt: ` +\r\n                  options.map((option, index) => `${index + 1}: ${option}`).join('. ') +\r\n                  `. Folosește tastele 1 până la ${options.length} pentru a selecta răspunsul.`;\r\n      announce(text, 'high');\r\n    }, []);\r\n\r\n    const announceAnswerSelected = useCallback((answerIndex, answerText) => {\r\n      announce(`Ai selectat răspunsul ${answerIndex + 1}: ${answerText}`, 'normal');\r\n    }, []);\r\n\r\n    const announceQuizProgress = useCallback((currentQuestion, totalQuestions) => {\r\n      announce(`Progres: întrebarea ${currentQuestion} din ${totalQuestions}`, 'normal');\r\n    }, []);\r\n\r\n    return {\r\n      announceQuestion,\r\n      announceAnswerSelected,\r\n      announceQuizProgress,\r\n      announceQuizResult\r\n    };\r\n  };\r\n\r\n  const useCodeEditorAccessibility = () => {\r\n    const announceCodeExecution = useCallback(() => {\r\n      announce('Se execută codul...', 'high');\r\n    }, []);\r\n\r\n    const announceExecutionResult = useCallback((output, hasError = false) => {\r\n      const prefix = hasError ? 'Eroare la execuție:' : 'Rezultatul execuției:';\r\n      announce(`${prefix} ${output}`, 'high');\r\n    }, []);\r\n\r\n    const announceFeedbackRequest = useCallback(() => {\r\n      announce('Se solicită feedback de la AI...', 'normal');\r\n    }, []);\r\n\r\n    const announceFeedbackReceived = useCallback((feedback) => {\r\n      announce(`Feedback primit: ${feedback}`, 'high');\r\n    }, []);\r\n\r\n    const announceCodeSaved = useCallback(() => {\r\n      announce('Codul a fost salvat', 'normal');\r\n    }, []);\r\n\r\n    const announceLineNavigation = useCallback((lineNumber, lineContent) => {\r\n      announce(`Linia ${lineNumber}: ${lineContent}`, 'normal');\r\n    }, []);\r\n\r\n    return {\r\n      announceCodeExecution,\r\n      announceExecutionResult,\r\n      announceFeedbackRequest,\r\n      announceFeedbackReceived,\r\n      announceCodeSaved,\r\n      announceLineNavigation,\r\n      announceCodeChange\r\n    };\r\n  };\r\n\r\n  const useCourseAccessibility = () => {\r\n    const announceLessonStart = useCallback((lessonTitle, lessonNumber, totalLessons) => {\r\n      announce(`Începe lecția ${lessonNumber} din ${totalLessons}: ${lessonTitle}`, 'high');\r\n    }, []);\r\n\r\n    const announceLessonContent = useCallback((content) => {\r\n      announce(`Conținutul lecției: ${content}`, 'normal');\r\n    }, []);\r\n\r\n    const announceCodeExample = useCallback((code, explanation) => {\r\n      announce(`Exemplu de cod: ${code}. Explicație: ${explanation}`, 'normal');\r\n    }, []);\r\n\r\n    const announceLessonComplete = useCallback((lessonTitle) => {\r\n      announce(`Lecția ${lessonTitle} a fost completată cu succes!`, 'high');\r\n    }, []);\r\n\r\n    const announceCourseProgress = useCallback((completedLessons, totalLessons) => {\r\n      const percentage = Math.round((completedLessons / totalLessons) * 100);\r\n      announce(`Progres curs: ${completedLessons} din ${totalLessons} lecții completate (${percentage}%)`, 'normal');\r\n    }, []);\r\n\r\n    return {\r\n      announceLessonStart,\r\n      announceLessonContent,\r\n      announceCodeExample,\r\n      announceLessonComplete,\r\n      announceCourseProgress\r\n    };\r\n  };\r\n\r\n  const useNavigationAccessibility = () => {\r\n    const announcePageLoad = useCallback((pageName, pageDescription = '') => {\r\n      announce(`Pagina ${pageName} încărcată. ${pageDescription}`, 'high');\r\n    }, []);\r\n\r\n    const announceMenuOpen = useCallback((menuName) => {\r\n      announce(`Meniul ${menuName} este deschis. Folosește săgețile pentru navigare.`, 'normal');\r\n    }, []);\r\n\r\n    const announceMenuClose = useCallback((menuName) => {\r\n      announce(`Meniul ${menuName} s-a închis`, 'normal');\r\n    }, []);\r\n\r\n    const announceModalOpen = useCallback((modalTitle, modalDescription = '') => {\r\n      announce(`Modal deschis: ${modalTitle}. ${modalDescription}`, 'high');\r\n    }, []);\r\n\r\n    const announceModalClose = useCallback(() => {\r\n      announce('Modal închis', 'normal');\r\n    }, []);\r\n\r\n    return {\r\n      announcePageLoad,\r\n      announceMenuOpen,\r\n      announceMenuClose,\r\n      announceModalOpen,\r\n      announceModalClose\r\n    };\r\n  };\r\n\r\n      return {\r\n    // Stare\r\n    isAccessibilityMode,\r\n    isSpeaking,\r\n    \r\n    // Funcții generale\r\n    announce,\r\n    stopReading,\r\n    readPageContent,\r\n    \r\n    // Funcții pentru anunțuri specifice\r\n    announceNavigation,\r\n    announceError,\r\n    announceSuccess,\r\n    announceLoading,\r\n    announceFormError,\r\n    announceFormSuccess,\r\n    \r\n    // Hooks specializate pentru componente\r\n    useQuizAccessibility,\r\n    useCodeEditorAccessibility,\r\n    useCourseAccessibility,\r\n    useNavigationAccessibility\r\n  };\r\n};\r\n\r\nexport default useAccessibility;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}